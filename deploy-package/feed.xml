<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Rahul Aher | Blog</title>
        <link>https://rahulaher.netlify.app</link>
        <description>undefined</description>
        <lastBuildDate>Tue, 16 Sep 2025 06:16:41 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>;)</generator>
        <image>
            <title>Rahul Aher | Blog</title>
            <url>https://rahulaher.netlify.app/__og-image__/image/articles/og.png</url>
            <link>https://rahulaher.netlify.app</link>
        </image>
        <copyright>Code licensed under MIT, written content licensed under CC-BY-NC-SA 4.0 - Rahul Aher</copyright>
        <atom:link href="https://rahulaher.netlify.app/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Create MongoDB database using Node JS]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-13/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-13/</guid>
            <pubDate>Thu, 17 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Okay, it’s time to create a database. Go to the database website by clicking here. There are two ways to install the database]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->Okay, it’s time to create a database. Go to the database website by clicking here. There are two ways to install the database:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Download the file and install it<!--]--></strong>: Remember, MongoDB is cross-platform, so it works on Windows, Linux, and everywhere.<!--]--></li><li><!--[--><strong><!--[-->Use a managed database service<!--]--></strong>: You can ask MongoDB to host and manage your data.<!--]--></li><!--]--></ol><p><!--[-->There are also two versions of MongoDB:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Community version<!--]--></strong>: This is free and available for developers to use.<!--]--></li><li><!--[--><strong><!--[-->Enterprise version<!--]--></strong>: This is for large companies, and you need to pay for it.<!--]--></li><!--]--></ul><p><!--[-->This version corrects the grammar while keeping the content clear and simple. Let me know if you'd like further adjustments!<!--]--></p><h3><a><!--[-->Self-Managed vs Mongo-Managed<!--]--></a></h3><p><!--[-->With <strong><!--[-->self-managed<!--]--></strong>, you install, back up, and host everything yourself — that’s what self-manage means. But let's use the second approach where <strong><!--[-->MongoDB manages everything<!--]--></strong>. So, in this blog or notes (whatever you want to call it), we are using the <strong><!--[-->MongoDB Managed version<!--]--></strong>. If you want to know how to manage it yourself, plant a seed by writing a blog here. You can get started by <a><!--[--><!--[-->clicking here<!--]--><!--]--></a>.<!--]--></p><h3><a><!--[-->Installing MongoDB<!--]--></a></h3><p><!--[-->After clicking on download or installing <strong><!--[-->Atlas<!--]--></strong>, you’ll be asked to fill out a form with 2-3 fields. Fill that in, then proceed to the next step. Since this database is managed by MongoDB, they might adjust the setup based on your requirements. Rename your cluster — it’s currently named <strong><!--[-->Cluster 0<!--]--></strong>, but you’ll need to identify it later.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Click on <strong><!--[-->free MO<!--]--></strong> — remember in the last blog we learned that the server is hosted in a location? Check if <strong><!--[-->Mumbai<!--]--></strong> is written there. After clicking <strong><!--[-->Create Deployment<!--]--></strong>, a dialog will appear. Copy your username and password. You can create multiple users or just click on the <strong><!--[-->Create a Connection Method<!--]--></strong> button, where you can find your cluster name. As you can see in the screenshot, your cluster is created. Now, to use it, click on <strong><!--[-->Connect<!--]--></strong>. Remember, the website interface might look different depending on when you're using it, but the same keywords and steps apply consistently.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->After clicking <strong><!--[-->Connect<!--]--></strong>, choose your driver. You should have a username and password; if not, create them in the dialog by clicking <strong><!--[-->Connect<!--]--></strong>. Copy the connection string and paste it into your file. We will create a <code><!--[-->database.js<!--]--></code> file and paste the string there, just like below. Make sure to replace <code><!--[-->&lt;db_password&gt;<!--]--></code> with your actual password.
recap 24:50<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> URI</span><span>=</span><span> '</span><span>mongodb+srv://heyashu:&lt;db_password&gt;@digiden.m6she.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=DigiDen</span><span>'
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Visualize Database and Connect<!--]--></a></h3><p><!--[-->To do this, download the software <a><!--[--><!--[-->MongoDB Compass<!--]--><!--]--></a> to see and manage the database using a GUI. If you want to learn what GUI and CLI mean in Hindi, click here: <a><!--[--><!--[-->What is CLI vs GUI<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Or, you can click this link to watch a 1-minute video on <a><!--[--><!--[-->how to download MongoDB Compass<!--]--><!--]--></a>. Once downloaded, paste the connection string URL you copied earlier and click <strong><!--[-->Connect<!--]--></strong>. You’ll see some sample data. From here, you can create a database directly in MongoDB Compass. Look for the <strong><!--[-->Create Database<!--]--></strong> green button.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->After clicking on <strong><!--[-->Create Database<!--]--></strong>, I named it <strong><!--[-->Notes<!--]--></strong> and created a collection called <strong><!--[-->user<!--]--></strong>. I can see this after clicking on <strong><!--[-->Notes<!--]--></strong> from the sidebar and then clicking on <strong><!--[-->Add Data<!--]--></strong>. You can either import data from a JSON file or write the document (JSON) manually.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->I have added this, and then click insert, so first user is created in Databse Notes and User collection,<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>/** 
</span></span><span><span>* Paste one or more documents here
</span></span><span><span>*/
</span></span><span><span>{
</span></span><span><span>  "</span><span>firstName</span><span>"</span><span> :</span><span>"</span><span>heyashu</span><span>"</span><span>,
</span></span><span><span>  "</span><span>website</span><span>"</span><span> : </span><span>"</span><span>heyashu.in</span><span>"</span><span>,
</span></span><span><span>  "</span><span>city</span><span>"</span><span> :</span><span>"</span><span>ayodhya</span><span>"
</span></span><span><span>
</span></span><span><span>}
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->After clicking insert it will wlook like this, id is auto genreated<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>_id
</span></span><span><span>66</span><span>e68c334a5d8d6956583843
</span></span><span><span>firstName
</span></span><span><span>"</span><span>heyashu</span><span>"
</span></span><span><span>website
</span></span><span><span>"</span><span>heyashu.in</span><span>"
</span></span><span><span>city
</span></span><span><span>"</span><span>ayodhya</span><span>"
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Now lets read using code<!--]--></a></h3><p><!--[-->So lets go to editor wherever you have pasted your connection string install MonoDb node js driver using NPM, <a><!--[--><!--[-->what is npm<!--]--><!--]--></a><!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>npm</span><span> install</span><span> mongodb
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->It will add <strong><!--[-->node_modules<!--]--></strong>, <strong><!--[-->package.json<!--]--></strong>, and <strong><!--[-->package-lock.json<!--]--></strong>. We will discuss these later. If you’ve already done <strong><!--[-->git init<!--]--></strong>, it means you want to manage this whole code using Git. If not, run <strong><!--[-->git init<!--]--></strong> in your terminal.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>git</span><span> init
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->then createa file .gitignore and paste<!--]--></p><div><span></span><!--[--><pre><!--[--><code>node_modules
</code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->In the sidebar, you’ll see many changes. Actually, <strong><!--[-->node_modules<!--]--></strong> contains the code of the packages you installed using npm, but we won’t push that to the Git repo. We need it only for development purposes. The <strong><!--[-->node_modules<!--]--></strong> folder itself is more than 50MB, so it's not good practice to host it. That’s why we add a <strong><!--[-->.gitignore<!--]--></strong> file, and <strong><!--[-->node_modules<!--]--></strong> will be ignored. Don’t worry, we’ll write more on this later. For now, just do it. Let’s focus on the database. Nice, right?<!--]--></p><h3><a><!--[-->Read the Data<!--]--></a></h3><p><!--[--><a><!--[--><!--[-->Read Mondo Node Document from here<!--]--><!--]--></a> , ok now lets see how to read the data from DB and setup mongo things<!--]--></p><p><!--[-->Just Paste this code in you JS file, now if you file name is database.js, run <code><!--[-->node database.js<!--]--></code> in terminal<!--]--></p><div><span></span><!--[--><pre><!--[--><code>// Importing the MongoClient class from the mongodb package
const { MongoClient } = require("mongodb");

// MongoDB connection string (replace &lt;username&gt; and &lt;password&gt; with actual credentials)
const URI =
  "mongodb+srv://&lt;username&gt;:&lt;password&gt;@digiden.m6she.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=DigiDen";

// Create a new MongoClient instance using the connection URI
const client = new MongoClient(URI);

// Specify the name of the database
const dbname = "Notes";

// Main function to handle MongoDB operations
async function main() {
  // Connect to the MongoDB server
  await client.connect();
  console.log("Connected to MongoDB");

  // Access the database by its name
  const db = client.db(dbname);

  // Access the 'user' collection within the database
  const userCollection = db.collection("user");

  // Fetch all documents from the 'user' collection and convert them to an array
  const findRes = await userCollection.find({}).toArray();

  // Log the results (documents from the 'user' collection)
  console.log("findRes: ", findRes);

  // Return 'Done' when the operation is complete
  return "Done";
}

// Call the main function and handle the results
main()
  .then(console.log("DATA LOGGED")) // Log a message if the function is successful
  .catch(console.error) // Log any errors if they occur
  .finally(() =&gt;

  
  //output
/* findRes:  [
  {
    _id: new ObjectId('66e68c334a5d8d6956583843'),
    firstName: 'heyashu',
    website: 'heyashu.in',
    city: 'ayodhya'
  }
] */
</code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Insert the data<!--]--></a></h3><p><!--[-->Now you read the data suppose you want to insert the data now in our Collection<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span> // insert the data
</span></span><span><span>    const</span><span> newData</span><span>={
</span></span><span><span>      firstName</span><span>:</span><span> "</span><span>Mohan</span><span>"</span><span>,
</span></span><span><span>      website</span><span>:</span><span>'</span><span>heyashu.in/digital-garden</span><span>'</span><span>,
</span></span><span><span>      city</span><span>:</span><span>'</span><span>Ayodhya-2</span><span>'
</span></span><span><span>    }
</span></span><span><span>  
</span></span><span><span>  
</span></span><span><span>    const</span><span> insertResult</span><span>=</span><span> await</span><span> userCollection</span><span>.</span><span>insertMany</span><span>([</span><span>newData</span><span>])
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>insertResult</span><span>"</span><span>,</span><span>insertResult</span><span>);
</span></span><span><span>    
</span></span><span><span>    // now try to read the data as befor eyou will get
</span></span><span><span>    //OUTPUT
</span></span><span><span>    /* [
</span></span><span><span>  {
</span></span><span><span>    _id: new ObjectId('66e68c334a5d8d6956583843'),
</span></span><span><span>    firstName: 'heyashu',
</span></span><span><span>    website: 'heyashu.in',
</span></span><span><span>    city: 'ayodhya'
</span></span><span><span>  },
</span></span><span><span>  {
</span></span><span><span>    _id: new ObjectId('66e6a4c72f5bc23db4698a68'),
</span></span><span><span>    firstName: 'Mohan',
</span></span><span><span>    website: 'heyashu.in/digital-garden',
</span></span><span><span>    city: 'Ayodhya-2'
</span></span><span><span>  }
</span></span><span><span>]*/
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Later, we will see:<!--]--></p><ul><!--[--><li><!--[-->How to index<!--]--></li><li><!--[-->How to update the data<!--]--></li><li><!--[-->How to delete the data<!--]--></li><li><!--[-->Read what is <strong><!--[-->FindCursor<!--]--></strong><!--]--></li><!--]--></ul><p><!--[-->And that's all for this episode!<!--]--></p><p><!--[-->I'm Rahul Aher, and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by forking the repo. If you're interested in writing the next episode's notes, <a><!--[--><!--[-->fork the repo and contribute<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Take care, Good Bye :) <a><!--[--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Databases and mongoDB]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-12/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-12/</guid>
            <pubDate>Wed, 16 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[In computer science, a database is an organized collection of data, a structured way of collecting and storing information. It is based on the DBMS (Database Management System), which means you can create, delete, edit, and retrieve data. The DBMS software manages everything, including the storage.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->In computer science, a <strong><!--[-->database<!--]--></strong> is an organized collection of data, a structured way of collecting and storing information. It is based on the <strong><!--[-->DBMS<!--]--></strong> (Database Management System), which means you can create, delete, edit, and retrieve data. The DBMS software manages everything, including the storage.<!--]--></p><h3><a><!--[-->Types of Databases<!--]--></a></h3><ol><!--[--><li><!--[-->Relational Databases (MySQL, PostgreSQL)<!--]--></li><li><!--[-->NoSQL Databases (MongoDB)<!--]--></li><li><!--[-->In-Memory Databases (Redis)<!--]--></li><li><!--[-->Distributed Databases (CockroachDB)<!--]--></li><li><!--[-->Time-Series Databases (InfluxDB)<!--]--></li><li><!--[-->Object-Oriented Databases (db40)<!--]--></li><li><!--[-->Graph Databases (Neo4J)<!--]--></li><li><!--[-->Hierarchical Databases (IBM IMS)<!--]--></li><li><!--[-->Network Databases (IDMS)<!--]--></li><li><!--[-->Cloud Databases (Amazon RDS)<!--]--></li><li><!--[-->Multi Model Database<!--]--></li><!--]--></ol><p><!--[-->I’m not diving deeper into this. You can read more by searching on the internet.<!--]--></p><h3><a><!--[-->RDBMS: Relational Databases (MySQL, PostgreSQL)<!--]--></a></h3><p><!--[--><img><!--]--></p><p><!--[-->In 1970, <strong><!--[-->E.F. Codd<!--]--></strong> introduced Codd's 12 rules (actually 13, because they start from 0 to 12). He designed <a><!--[--><!--[-->these rules<!--]--><!--]--></a>  to define what qualifies as a relational database. If a database follows these 12 rules, it falls into the category of a relational database. There are multiple databases that don’t strictly follow all these rules but are still called relational databases. <strong><!--[-->MySQL<!--]--></strong> and <strong><!--[-->PostgreSQL<!--]--></strong> are the most commonly used in this category.<!--]--></p><h3><a><!--[-->History of MySQL<!--]--></a></h3><p><!--[-->MySQL was created by <strong><!--[-->Michael Widenius<!--]--></strong>. He has three daughters: My, Max, and Maria. <strong><!--[-->My<!--]--></strong> is the name of his eldest daughter, which is how <strong><!--[-->MySQL<!--]--></strong> got its name. Later, he created more databases, like <strong><!--[-->MaxDB<!--]--></strong> and <strong><!--[-->MariaDB<!--]--></strong>. MariaDB was a fork of MySQL.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->After some time, <strong><!--[-->Sun Microsystems<!--]--></strong> acquired MySQL, and later, Oracle acquired Sun Microsystems, so now Oracle manages MySQL. This isn't typically asked in interviews, but it's good to know for your curiosity! <a><!--[--><!--[-->read the full history<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Postgres<!--]--></a></h3><p><!--[-->Another scientist, <strong><!--[-->Michael Stonebraker<!--]--></strong>, was working on a project called <strong><!--[-->Ingres<!--]--></strong> at the University of California.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->He left the university around 1985 and started a new project called <strong><!--[-->Post Ingres<!--]--></strong>. This project focused on <strong><!--[-->SQL<!--]--></strong> (Structured Query Language), and eventually, it evolved into what we now know as <strong><!--[-->PostgreSQL<!--]--></strong>.<!--]--></p><h3><a><!--[-->SQL: Structured Query Language<!--]--></a></h3><p><!--[-->Now that you know about different types of databases and their history, you understand they are organized and structured. To manage these databases — to create, read, update, and delete data — you need to perform operations called <strong><!--[-->queries<!--]--></strong>. For that, we use a language called <strong><!--[-->Structured Query Language (SQL)<!--]--></strong>.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Don’t get confused with "sequel" or "prequel" — it's not related to movies! Some people pronounce SQL as "sequel," but it stands for <strong><!--[-->Structured Query Language<!--]--></strong>, not related to cinema, haha!<!--]--></p><h3><a><!--[-->NoSQL (MongoDB)<!--]--></a></h3><p><!--[--><strong><!--[-->Types of NoSQL:<!--]--></strong><!--]--></p><ol><!--[--><li><!--[-->Document DB<!--]--></li><li><!--[-->Key-Value DB<!--]--></li><li><!--[-->Graph DB<!--]--></li><li><!--[-->Wide-Column DB<!--]--></li><li><!--[-->Multi-Model DB<!--]--></li><!--]--></ol><p><!--[-->MongoDB uses the <strong><!--[-->Document<!--]--></strong> type of NoSQL database. Some people call it "Not Only SQL" or "Non-SQL," but the naming varies. The key difference is that it doesn’t operate using <strong><!--[-->Structured Query Language (SQL)<!--]--></strong>. NoSQL databases came into existence around the 2000s.<!--]--></p><h3><a><!--[-->History of MongoDB<!--]--></a></h3><p><!--[-->MongoDB was created in 2009 by a company called <strong><!--[-->10gen<!--]--></strong>. The name <strong><!--[-->Mongo<!--]--></strong> comes from the word <strong><!--[-->Gigante<!--]--></strong>, meaning "huge," because it can store a massive amount of data. Later, the company 10gen shifted its focus to MongoDB and renamed itself to <strong><!--[-->MongoDB Inc<!--]--></strong>.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->MongoDB quickly evolved and became popular, as it emerged around the same time as <strong><!--[-->Node.js<!--]--></strong>. It felt like Node.js and MongoDB were made for each other, which increased developer productivity. MongoDB is built using <strong><!--[-->C++<!--]--></strong> with some JavaScript code as well.<!--]--></p><h3><a><!--[-->Presentation of Database Tables<!--]--></a></h3><p><!--[-->Relational databases store data in rows and columns. "Relational" means that there are relationships between different tables. For example, in a <strong><!--[-->student<!--]--></strong> table (as shown below), there might be another table called <strong><!--[-->hobbies<!--]--></strong>. The <strong><!--[-->student_id<!--]--></strong> in the hobbies table is related to the student table because each row in the hobbies table is linked to a student. The <strong><!--[-->student_id<!--]--></strong> is used as a <strong><!--[-->foreign key<!--]--></strong> to create this relationship, which is how relational databases work.<!--]--></p><p><!--[-->In <strong><!--[-->MongoDB<!--]--></strong>, we have <strong><!--[-->collections<!--]--></strong> that function like JavaScript objects or JSON data, but in MongoDB, they are called <strong><!--[-->Documents<!--]--></strong>. The keys in MongoDB are referred to as <strong><!--[-->fields<!--]--></strong>. In MongoDB, there is no need for <strong><!--[--><a><!--[--><!--[-->data normalization<!--]--><!--]--></a><!--]--></strong>  or joins, and there can be multiple collections.<!--]--></p><h3><a><!--[-->Difference between RDBMS and NoSQL<!--]--></a></h3><p><!--[-->I am just pasting the image. Please Google it to learn more. To be honest, I’m tired today as I just came back from somewhere and don’t have the energy right now. Sorry this time, I’ve written quite a lot already.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Queries to Query yourself<!--]--></a></h3><ol><!--[--><li><!--[-->Why NoSQL recommended for social media Databses<!--]--></li><li><!--[--><a><!--[--><!--[-->Read uber schemaless Databse blog<!--]--><!--]--></a><!--]--></li><!--]--></ol><p><!--[-->And that's all for this episode!<!--]--></p><p><!--[-->I'm Rahul Aher, and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by forking the repo. If you're interested in writing the next episode's notes, <a><!--[--><!--[-->fork the repo and contribute<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Take care, Good Bye :) <a><!--[--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Create a http server using Node JS]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-11/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-11/</guid>
            <pubDate>Tue, 15 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[We covered a lot of theory, investigating Node.js from its beginnings to 2025, and now it’s time to take action. But be patient — we'll start with some theory to set the context of what a server is, and then write something. Today, your VS Code or code editor won’t be alone. Node.js will be part of your code base, and we will write something. So, what are we waiting for? Let's begin! We'll read about servers, what development means, what a proxy server is, and what DNS is. Then, we’ll create a server]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->We covered a lot of theory, investigating Node.js from its beginnings to 2025, and now it’s time to take action. But be patient — we'll start with some theory to set the context of what a server is, and then write something. Today, your VS Code or code editor won’t be alone. Node.js will be part of your code base, and we will write something. So, what are we waiting for? Let's begin! We'll read about servers, what development means, what a proxy server is, and what DNS is. Then, we’ll create a server<!--]--></p><h3><a><!--[-->What is Server?<!--]--></a></h3><p><!--[-->When someone says "deploy to the server," it means we're referring to the hardware where the operating system and processors are. It means we're running our application, the one we've coded, on that machine. This hardware allows us to save something to the system and retrieve it. That’s what a server does. Deployment is all about saving and running our code on that hardware machine<!--]--></p><h3><a><!--[-->Can we use our systme as server?<!--]--></a></h3><p><!--[-->The answer is yes, but the question is: will you be able to provide what a server from AWS offers? No, because you have limited RAM, limited memory, and no 24/7 access. So, while it's possible, it’s not practical. AWS and other servers run 24/7, have large-scale RAM and memory, and their processors are very powerful. Internet connection is also a concern.<!--]--></p><h3><a><!--[-->IP Address<!--]--></a></h3><p><!--[-->A system can be identified by one address. For your computer, this address might change, but for servers, it does not. Servers have a dedicated IP address that never changes, which is why they are called servers. They are designed to serve, and they also have multiple hardware servers running in different locations. For example, when you create a Firebase server, it will ask where you want your server, such as Singapore. To create a real-time database server, you just click, and you’ll be asked to choose the physical location where you want to connect.<!--]--></p><h3><a><!--[-->Node Server<!--]--></a></h3><p><!--[-->What we do now and in the future is create servers that can handle requests from the outside world. That’s what Node.js is all about. Now, let’s discuss the architecture and dive deeper into it.<!--]--></p><h3><a><!--[-->Client Sevrer Acrtictire<!--]--></a></h3><p><!--[-->A client is simply a person or system trying to access your server. For example, if someone opens a browser on their laptop and tries to access a file, whenever a client hits a URL (e.g., <a><!--[--><!--[-->www.heyashu.com<!--]--><!--]--></a>), the browser (the client) wants to access files from Heyashu. A socket connection is opened, and there is something on the server side listening to these requests. An application deployed somewhere listens for these requests, and that machine or app is called the server. There might be multiple clients making similar requests to the server's assets. As we've seen with libuv and Node.js, the server handles these requests by receiving data through the socket connection and sending it back to the client. And that's the whole process.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->TCP IP Protocol/Web<!--]--></a></h3><p><!--[-->Whenever data is sent, it uses the <strong><!--[-->Transfer Control Protocol (TCP)<!--]--></strong>. Again, this falls under the academic side of computer networking, so you can learn more about it by looking up <strong><!--[-->TCP/IP connections<!--]--></strong> on the internet. Multiple computers are connected to each other using the internet, which is why it’s called the web, and each has an address. But what does "protocol" mean? It means rules. Communication must follow some rules, that’s all. For example, if I start writing these notes in Chinese, you wouldn’t understand. By the way, I’m writing digital notes on Node.js in <strong><!--[-->Hinglish<!--]--></strong> — check here. So, rules are set, and that’s how communication works.<!--]--></p><h3><a><!--[-->Other protoals 24<!--]--></a></h3><p><!--[-->HTTP, FTP, SMTP are different types of request protocols. Depending on the type of request, different rules are used to transfer data. It's like getting things from a shop — different items have different rules. For example, water needs a bottle, but vegetables need a packet. The same applies to requests in a server; the protocol defines the rules. For normal web requests, we use the <strong><!--[-->HTTP protocol<!--]--></strong> (Hypertext Transfer Protocol).<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->How data is sent to the client? Data Transfer<!--]--></a></h3><p><!--[-->Data is not sent in bulk; it is sent in chunks, which in computer network language are called <strong><!--[-->packets<!--]--></strong>.<!--]--></p><p><!--[-->There is also the concept of <strong><!--[-->streams<!--]--></strong> and <strong><!--[-->buffers<!--]--></strong>. A stream means a continuous connection, and a buffer means chunks of data. We will learn more about this later, but for now, just remember that <strong><!--[-->TCP/IP<!--]--></strong> is the protocol used to send data from server to client. In Node.js, the concept of <strong><!--[-->streams and buffers<!--]--></strong> is important, so go and learn it!<!--]--></p><h3><a><!--[-->Domain Name<!--]--></a></h3><p><!--[-->Whenever you visit a server, you use something like a web address. For example, for these notes, you might type <strong><!--[--><a><!--[--><!--[-->www.heyashu.in<!--]--><!--]--></a><!--]--></strong>. You also know that the data is sent from a server because I’m not running my system 24/7 to serve these notes. I’m using a server, and that server has a unique IP address. If you type that IP address, you will get the same website. But <strong><!--[-->heyashu.in<!--]--></strong> is called a <strong><!--[-->DNS<!--]--></strong> (Domain Name System). <strong><!--[-->Google.com<!--]--></strong> is a DNS, and <strong><!--[-->namastedev<!--]--></strong> is a DNS. Got it? Now, try hitting this IP: <strong><!--[-->8.8.4.4<!--]--></strong> or this one: <strong><!--[-->142.250.217.78<!--]--></strong>. These are IP addresses, and if you hit <strong><!--[-->142.250.217.78<!--]--></strong>, you will get <strong><!--[-->google.com<!--]--></strong>.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->It means <strong><!--[-->google.com<!--]--></strong> is mapped to this IP address. Got it? You are using domain names because it's tough for humans to remember these IP addresses. So, remember: first, the browser contacts the <strong><!--[-->DNS server<!--]--></strong>, which gives you the IP address, and then you connect to that IP. Got it?<!--]--></p><h3><a><!--[-->Can we have multiple HTTP servers?<!--]--></a></h3><p><!--[-->Can we create multiple applications on the same server? Multiple servers on multiple machines? Confusing, right? Haha, I mean, is it possible to have multiple servers running to handle different things? Yes, it's possible! Now, suppose you have two HTTP servers, meaning two Node.js instances. Which server will handle the incoming request? It will be decided based on the <strong><!--[-->port<!--]--></strong><!--]--></p><h3><a><!--[-->Ports in IP Addresses<!--]--></a></h3><p><!--[-->A <strong><!--[-->port<!--]--></strong> decides which server will take the request. Now, suppose you're requesting <strong><!--[-->142.250.217.78:3000<!--]--></strong>—3000 is the port number. The server that listens on port 3000 will handle the request. The port is the decider, okay?<!--]--></p><p><!--[-->So, <strong><!--[-->a port is a number that identifies a specific application or service on a network-connected device and is used in conjunction with an IP address to send and receive messages.<!--]--></strong> For more, you can read up on computer networks, haha!<!--]--></p><p><!--[--><img><!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span> heyashu</span><span>.</span><span>in</span><span>        /</span><span>digital</span><span>-</span><span>garden</span><span> 
</span></span><span><span> 142.250</span><span>.</span><span>217.78</span><span>:      </span><span>3000</span><span> 
</span></span><span><span>  [</span><span>IP</span><span> Address</span><span>]</span><span>       [</span><span>NodeJS</span><span> app</span><span> handling</span><span> digital</span><span>-</span><span>garden</span><span> code</span><span>/</span><span> page</span><span>]
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So, actually, a proper website has different things hosted on different servers. For example, files might be hosted on one server, another server might handle images, and yet another one handles databases. You get it, right? This makes things faster, with one server dedicated to images, another for files, etc. We’ll be building all of this, so stay tuned!<!--]--></p><h3><a><!--[-->Socket vs Web Sockets<!--]--></a></h3><p><!--[--><img><!--]--></p><p><!--[-->When we request something, a socket connection is opened, and data is received, involving the opening and closing of sockets. WebSocket connections are different—they stay open and allow two-way communication. You can explore different types of sockets. Normally, socket connections are made and closed, but WebSockets remain open, which makes them resource-heavy. Read more about it!<!--]--></p><h3><a><!--[-->Lets create a sever<!--]--></a></h3><p><!--[-->Node.js has multiple built-in modules. <strong><!--[-->https<!--]--></strong> is one of them, and it's used to create a server. The <strong><!--[-->https<!--]--></strong> module has a function called <code><!--[-->createServer<!--]--></code>. Here’s a list of modules — whatever you see in this list are called <strong><!--[-->native modules<!--]--></strong> of Node.js. Sometimes, they are imported like <code><!--[-->node:http<!--]--></code> in the code. Wait and see!<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> http</span><span>=</span><span> require</span><span>(</span><span>'</span><span>http</span><span>'</span><span>)
</span></span><span><span>// const http= require('node:http')
</span></span><span><span>
</span></span><span><span>// sever is an https and now can listen the requests
</span></span><span><span>const</span><span> sever</span><span>=</span><span> http</span><span>.</span><span>createServer</span><span>(</span><span>function</span><span>(</span><span>req</span><span>,</span><span>res</span><span>){
</span></span><span><span>  //req and res are the object you get 
</span></span><span><span>  // .end to use to send the response
</span></span><span><span>  res</span><span>.</span><span>end</span><span>(</span><span>'</span><span>You are getting this from heyashu.in</span><span>'</span><span>)
</span></span><span><span>})
</span></span><span><span>
</span></span><span><span>// listen on post 7777
</span></span><span><span>sever</span><span>.</span><span>listen</span><span>(</span><span>7777</span><span>)
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Now whe you will do <code><!--[-->node file-name.js<!--]--></code> in terminal then it will wait for the request. and got the browser’s url type <a><!--[--><!--[-->localhost:7777<!--]--><!--]--></a> and you wll get this<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->What if you need to identiy the url whatever /seed-a-plant<!--]--></p><p><!--[-->update the code like this<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> sever</span><span>=</span><span> http</span><span>.</span><span>createServer</span><span>(</span><span>function</span><span>(</span><span>req</span><span>,</span><span>res</span><span>){
</span></span><span><span>  //req and res are the object you get 
</span></span><span><span>  // .end to use to send the response
</span></span><span><span>  if</span><span>(</span><span>req</span><span>.</span><span>url</span><span> ===</span><span>'</span><span>/seed-a-plant</span><span>'</span><span>){
</span></span><span><span>    res</span><span>.</span><span>end</span><span>(</span><span>'</span><span>🌱 Plant Seeded, Wohoo  👏</span><span>'</span><span>)
</span></span><span><span>    return
</span></span><span><span>  }
</span></span><span><span>  res</span><span>.</span><span>end</span><span>(</span><span>'</span><span>You are getting this from heyashu.in</span><span>'</span><span>)
</span></span><span><span>})
</span></span><span><span>
</span></span><span><span>// listen on post 7777
</span></span><span><span>sever</span><span>.</span><span>listen</span><span>(</span><span>7777</span><span>)
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[--><img><!--]--></p><p><!--[-->Creating a server using the <strong><!--[-->https<!--]--></strong> module can be tough for large-scale applications, so we’ll be using <strong><!--[-->Express.js<!--]--></strong>, a framework for Node.js, to make things simpler. Writing large-scale applications in plain JavaScript is challenging, which is why we use frameworks like <strong><!--[-->React<!--]--></strong>, <strong><!--[-->Vue<!--]--></strong>, and <strong><!--[-->Angular<!--]--></strong>. The same applies here. So let’s take a quick look at what Express.js is and the complications we might face. You can check this, or we will write more about it here in this digital garden and drop a link.<!--]--></p><h3><a><!--[-->Express JS<!--]--></a></h3><p><!--[-->It’s a framework for <strong><!--[-->Node.js<!--]--></strong>. We will discuss it later.<!--]--></p><h3><a><!--[-->Things to Learn<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->Socket connections<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->HTTPS vs HTTP<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->FTP<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->SMTP<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->TCP<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Streams and buffers<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Data packets<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Load balancers<!--]--></strong><!--]--></li><!--]--></ol><p><!--[-->And that's all for this episode!<!--]--></p><p><!--[-->I'm Rahul Aher, and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by forking the repo. If you're interested in writing the next episode's notes, <a><!--[--><!--[-->fork the repo and contribute<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Take care, Good Bye :) <a><!--[--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LibUV Thread Pool: Deep Dive]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-10/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-10/</guid>
            <pubDate>Mon, 14 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome back! If you haven’t read the previous blog about the two friends, go and check that out first because things are getting more interesting. We’ve received an official FIR against Node.js, and when Node.js faced trouble, it called in its two best friends for help. One of them, V8, was already investigated in our last episode. Now, it’s time to bring in the second friend: Libuv.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->Welcome back! If you haven’t read the previous blog about the two friends, go and check that out first because things are getting more interesting. We’ve received an official FIR against Node.js, and when Node.js faced trouble, it called in its two best friends for help. One of them, V8, was already investigated in our last episode. Now, it’s time to bring in the second friend: <strong><!--[-->Libuv<!--]--></strong>.<!--]--></p><p><!--[-->Libuv is full of secrets, and this investigation won’t be easy. There are many things we don’t know yet. So, what are we waiting for? Let’s head to the police station and question Libuv until we find the answers. It’s time to close this case for Season 1!<!--]--></p><p><!--[-->We’ve already talked a lot about Libuv, but there are still a few questions we need answers to. Specifically, we haven't looked at the <strong><!--[-->idle<!--]--></strong>, <strong><!--[-->prepare<!--]--></strong>, and <strong><!--[-->pending callback<!--]--></strong> phases  These are important, and today, we’re going to clear them up.<!--]--></p><p><!--[-->Ready, detectives? Let’s dive in and solve these mysteries. You can also check the official Node.js documentation here: <a><!--[--><!--[-->https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Pending callback<!--]--></a></h3><p><!--[-->As we know, all file and connection-related tasks are handled in the <strong><!--[-->poll phase<!--]--></strong>, right? But sometimes, there’s a possibility of a process getting stuck in the poll phase. This could happen for various reasons, like recursive calls, errors, or a large number of requests, which may cause delays. To avoid such situations, if there are any <strong><!--[-->pending callbacks<!--]--></strong>, they get executed in the <strong><!--[-->pending callback phase<!--]--></strong>.<!--]--></p><p><!--[-->This phase is not super important in everyday work, but academically, you should be aware of it. If you have the time, go ahead and read more about it. Essentially, it executes I/O callbacks that were deferred to the next iteration of the event loop.<!--]--></p><h3><a><!--[-->idle/prepare<!--]--></a></h3><p><!--[-->In this phase, checks take place within the event loop, and it is performed internally. As I mentioned earlier, this phase is more for academic understanding. If you're interested, go ahead and read the <a><!--[--><!--[-->official Node.js documentation on the event loop<!--]--><!--]--></a>. Keep in mind that the official docs might have different diagrams or images, but don’t get confused. Just focus on understanding the concept. You can also read more about libuv design here.<!--]--></p><p><!--[-->The <strong><!--[-->poll phase<!--]--></strong> is the most important phase of the event loop, and <strong><!--[-->idle/prepare<!--]--></strong> takes place right before it.<!--]--></p><p><!--[--><strong><!--[-->Homework:<!--]--></strong> Can you find out where in the code the event loop waits at the poll phase if there's nothing to run?<!--]--></p><h3><a><!--[-->What is a Tick?<!--]--></a></h3><p><!--[-->In Node.js, one complete cycle of the event loop is called a <strong><!--[-->tick<!--]--></strong>.<!--]--></p><h3><a><!--[-->Logic of Waiting in Poll Phase<!--]--></a></h3><p><!--[-->Before the event loop enters the <strong><!--[-->poll phase<!--]--></strong>, it calculates how long it needs to wait there. The logic behind this is not too complex, but it can be tricky to explain without going into code examples. It’s best to explore this topic by reading the actual code and checking out blogs or videos available online. Best of luck with that!<!--]--></p><p><!--[-->Sorry, explaining this in writing can be tough, but in the future, when you're relaxing in a garden, I’ll think of a simpler way to explain this. Stay tuned! For now, just remember that the event loop is the master in <strong><!--[-->libuv<!--]--></strong>.<!--]--></p><h3><a><!--[-->Mystery of Thread Pool<!--]--></a></h3><p><!--[-->We know that libuv handles different types of tasks, like DNS, cryptography, file access, OS-related tasks, and timers. These are complex tasks that are processed by libuv. For example, when libuv receives a file read request, it uses one of its threads from the thread pool to handle it. The request comes during the <strong><!--[-->poll phase<!--]--></strong>, and libuv sends it to the thread pool. The thread then transfers the file access to the OS and becomes available for new tasks. The same process happens for cryptography and other tasks.<!--]--></p><h3><a><!--[-->What is a Thread?<!--]--></a></h3><p><!--[-->A thread is like a container that runs code. If you want to block it to perform some work, you can do that. Remember, this thread is different from the <strong><!--[-->main thread<!--]--></strong>. When we talk about the main thread, we are referring to the V8 engine's main thread, which runs plain JavaScript. On the other hand, the threads we are discussing here are part of the <strong><!--[-->thread pool<!--]--></strong> in libuv.<!--]--></p><p><!--[-->Libuv uses multiple threads. For example, if one file system request comes in, it will use one thread, and if another request comes in, it will use another thread. Requests keep coming, and these threads handle them by blocking and processing them as needed.<!--]--></p><h3><a><!--[-->Size of Thread Pool (UV Thread Pool)<!--]--></a></h3><p><!--[-->By default, there are 4 threads in the UV thread pool. But what happens if we make 5 file system calls? It means the first 4 requests will block the 4 threads. Each thread will transfer its task to the OS, and once that task is handled, the thread becomes available again to take on the next request. The 5th request will wait until one of the threads is free and available in the UV thread pool.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->DNS Lookups / Crypto<!--]--></a></h3><p><!--[-->Suppose a request comes for a DNS lookup. A DNS lookup is a heavy task, so it blocks one of the threads in the thread pool. If you request a cryptography task, it also uses the thread pool. Additionally, if anything else comes up that requires C++ code execution, it will also block one of the threads in the pool.<!--]--></p><h3><a><!--[-->Is Node.js Single-Threaded?<!--]--></a></h3><p><!--[-->Come on! If you say Node.js is single-threaded, I’ll have to laugh, haha! Node.js can handle both asynchronous and synchronous code. While it runs JavaScript on a single main thread, it can use multiple threads for other tasks through libuv. So, it depends on what you're doing. You can't define Node.js simply as single or multi-threaded—it’s more flexible than that!<!--]--></p><h3><a><!--[-->Code Demo of Thread Pool<!--]--></a></h3><p><!--[-->If you run the code below, it will take some time but the output will appear at the same time because it uses 2 out of the 4 available threads in the thread pool, and everything runs in parallel. The same thing will happen when you use all 4 threads.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> fs</span><span>=</span><span> require</span><span>(</span><span>'</span><span>fs</span><span>'</span><span>)
</span></span><span><span>const</span><span> crypto</span><span>=</span><span> require</span><span>(</span><span>'</span><span>crypto</span><span>'</span><span>)
</span></span><span><span>crypto</span><span>.</span><span>pbkdf2</span><span>(</span><span>'</span><span>password</span><span>'</span><span>,</span><span> '</span><span>salt</span><span>'</span><span>,</span><span> 5000000</span><span>,</span><span> 50</span><span>,</span><span> "</span><span>sha512</span><span>"</span><span>,</span><span> function</span><span>(</span><span>err</span><span>,</span><span> key</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>1: CRYPTO PRIVATE KEY DONE</span><span>"</span><span>);
</span></span><span><span>}</span><span> )
</span></span><span><span>
</span></span><span><span>crypto</span><span>.</span><span>pbkdf2</span><span>(</span><span>'</span><span>password</span><span>'</span><span>,</span><span> '</span><span>salt</span><span>'</span><span>,</span><span> 5000000</span><span>,</span><span> 50</span><span>,</span><span> "</span><span>sha512</span><span>"</span><span>,</span><span> function</span><span>(</span><span>err</span><span>,</span><span> key</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>2: CRYPTO PRIVATE KEY DONE</span><span>"</span><span>);
</span></span><span><span>}</span><span> )
</span></span><span><span>
</span></span><span><span>//OUTPUT
</span></span><span><span>1</span><span>: </span><span>CRYPTO</span><span> PRIVATE</span><span> KEY</span><span> DONE
</span></span><span><span>2</span><span>: </span><span>CRYPTO</span><span> PRIVATE</span><span> KEY</span><span> DONE
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Let's See What Happens with 5 Crypto Calls<!--]--></a></h3><p><!--[-->If you make 5 cryptography calls, one request will be delayed because there are only 4 threads in the pool. The first 4 tasks will run on the available threads, and the 5th one will have to wait until a thread is free. The order of execution is not guaranteed, as the tasks finish based on when threads become available, and that depends on the complexity of each task.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> fs</span><span>=</span><span> require</span><span>(</span><span>'</span><span>fs</span><span>'</span><span>)
</span></span><span><span>const</span><span> crypto</span><span>=</span><span> require</span><span>(</span><span>'</span><span>crypto</span><span>'</span><span>)
</span></span><span><span>crypto</span><span>.</span><span>pbkdf2</span><span>(</span><span>'</span><span>password</span><span>'</span><span>,</span><span> '</span><span>salt</span><span>'</span><span>,</span><span> 5000000</span><span>,</span><span> 50</span><span>,</span><span> "</span><span>sha512</span><span>"</span><span>,</span><span> function</span><span>(</span><span>err</span><span>,</span><span> key</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>1: CRYPTO PRIVATE KEY DONE</span><span>"</span><span>);
</span></span><span><span>}</span><span> )
</span></span><span><span>
</span></span><span><span>crypto</span><span>.</span><span>pbkdf2</span><span>(</span><span>'</span><span>password</span><span>'</span><span>,</span><span> '</span><span>salt</span><span>'</span><span>,</span><span> 5000000</span><span>,</span><span> 50</span><span>,</span><span> "</span><span>sha512</span><span>"</span><span>,</span><span> function</span><span>(</span><span>err</span><span>,</span><span> key</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>2: CRYPTO PRIVATE KEY DONE</span><span>"</span><span>);
</span></span><span><span>}</span><span> )
</span></span><span><span>crypto</span><span>.</span><span>pbkdf2</span><span>(</span><span>'</span><span>password</span><span>'</span><span>,</span><span> '</span><span>salt</span><span>'</span><span>,</span><span> 5000000</span><span>,</span><span> 50</span><span>,</span><span> "</span><span>sha512</span><span>"</span><span>,</span><span> function</span><span>(</span><span>err</span><span>,</span><span> key</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>3: CRYPTO PRIVATE KEY DONE</span><span>"</span><span>);
</span></span><span><span>}</span><span> )
</span></span><span><span>
</span></span><span><span>crypto</span><span>.</span><span>pbkdf2</span><span>(</span><span>'</span><span>password</span><span>'</span><span>,</span><span> '</span><span>salt</span><span>'</span><span>,</span><span> 5000000</span><span>,</span><span> 50</span><span>,</span><span> "</span><span>sha512</span><span>"</span><span>,</span><span> function</span><span>(</span><span>err</span><span>,</span><span> key</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>4: CRYPTO PRIVATE KEY DONE</span><span>"</span><span>);
</span></span><span><span>}</span><span> )
</span></span><span><span>crypto</span><span>.</span><span>pbkdf2</span><span>(</span><span>'</span><span>password</span><span>'</span><span>,</span><span> '</span><span>salt</span><span>'</span><span>,</span><span> 5000000</span><span>,</span><span> 50</span><span>,</span><span> "</span><span>sha512</span><span>"</span><span>,</span><span> function</span><span>(</span><span>err</span><span>,</span><span> key</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>5: CRYPTO PRIVATE KEY DONE</span><span>"</span><span>);
</span></span><span><span>}</span><span> )
</span></span><span><span>
</span></span><span><span>//output
</span></span><span><span>2</span><span>: </span><span>CRYPTO</span><span> PRIVATE</span><span> KEY</span><span> DONE
</span></span><span><span>4</span><span>: </span><span>CRYPTO</span><span> PRIVATE</span><span> KEY</span><span> DONE
</span></span><span><span>3</span><span>: </span><span>CRYPTO</span><span> PRIVATE</span><span> KEY</span><span> DONE
</span></span><span><span>1</span><span>: </span><span>CRYPTO</span><span> PRIVATE</span><span> KEY</span><span> DONE
</span></span><span><span>5</span><span>: </span><span>CRYPTO</span><span> PRIVATE</span><span> KEY</span><span> DONE
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Can We Change the Thread Pool Size?<!--]--></a></h3><p><!--[-->The answer is <strong><!--[-->YES<!--]--></strong>! You can change the thread pool size by setting the <code><!--[-->UV_THREADPOOL_SIZE<!--]--></code> at the top of your file like this:<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>process</span><span>.</span><span>env</span><span>.</span><span>UV_THREADPOOL_SIZE</span><span>=</span><span>2
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Networking in Node.js (45)<!--]--></a></h3><p><!--[-->If a user sends an API request to your server, does that API request use the thread pool? The answer is <strong><!--[-->no<!--]--></strong>. API requests use <strong><!--[-->sockets<!--]--></strong>. For each incoming connection or API request, a new socket is created, not a thread. Unlike the "thread per connection" model, where each connection would require a new thread, Node.js uses a more efficient model.<!--]--></p><p><!--[-->Instead of creating a new thread for each request, Node.js uses scalable I/O event notification mechanisms like <strong><!--[-->epoll<!--]--></strong> (Linux) or <strong><!--[-->kqueue<!--]--></strong> (MacOS) to handle multiple requests at the same time without the need for hundreds of threads. This is what makes Node.js very efficient in handling high numbers of API requests.<!--]--></p><h3><a><!--[-->Scalable I/O Event Notification Mechanism (epoll/kqueue)<!--]--></a></h3><p><!--[--><strong><!--[-->epoll<!--]--></strong> (for Linux) and <strong><!--[-->kqueue<!--]--></strong> (for MacOS) are algorithms that handle multiple connections efficiently. When multiple connections are made, <strong><!--[-->epoll<!--]--></strong> keeps track of all of them. If there is any activity, like data to read or write on a connection, epoll will notify <strong><!--[-->libuv<!--]--></strong>. Libuv then triggers the appropriate callback, and V8 runs the callback.<!--]--></p><p><!--[-->This mechanism is scalable and efficient because it doesn’t create a new thread for every connection. Instead, <strong><!--[-->epoll<!--]--></strong> manages all the connections using file descriptors. This is what makes Node.js capable of handling a large number of requests without using too many system resources.<!--]--></p><p><!--[-->This is more on the academic side, related to operating systems, so it can take some time to fully understand. You can read more about it here and <a><!--[--><!--[-->here<!--]--><!--]--></a>.<!--]--></p><h3><a><!--[-->Learnings We Got Here<!--]--></a></h3><ul><!--[--><li><!--[-->Never block the <strong><!--[-->main thread<!--]--></strong> (V8's main thread).<!--]--></li><li><!--[-->Avoid using <strong><!--[-->synchronous<!--]--></strong> methods on the main thread.<!--]--></li><li><!--[-->Be cautious with <strong><!--[-->complex calculations<!--]--></strong>, like regex operations.<!--]--></li><li><!--[-->Don't do heavy <strong><!--[-->JSON operations<!--]--></strong> on the main thread.<!--]--></li><li><!--[--><strong><!--[-->Data structures<!--]--></strong> are important because the core of libuv and other systems relies on them to manage tasks efficiently.<!--]--></li><li><!--[-->A <strong><!--[-->min-heap algorithm<!--]--></strong> is used by timers in the queue.<!--]--></li><li><!--[-->Naming is very important. Clear, descriptive names help make the code easier to understand.<!--]--></li><!--]--></ul><p><!--[-->And that's all for this episode!<!--]--></p><p><!--[-->I'm Rahul Aher, and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by forking the repo. If you're interested in writing the next episode's notes, <a><!--[--><!--[-->fork the repo and contribute<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Take care, Good Bye :) <a><!--[--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[libuv & Event Loop]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-9/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-9/</guid>
            <pubDate>Sun, 13 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[As we know, Node.js has two main parts, like the duo Jai and Veeru: the V8 engine and libuv. Let’s take a closer look at libuv. Just like the V8 engine has its hidden parts, you can learn more about it by clicking here. Now, let’s focus on libuv. Whenever V8 (Jai) can’t handle something—like file access, network calls, or timers—it gives the task to libuv. Also, when these tasks run, we often use callback functions, which are executed after libuv finishes the job.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->As we know, Node.js has two main parts, like the duo Jai and Veeru: the V8 engine and <strong><!--[-->libuv<!--]--></strong>. Let’s take a closer look at <strong><!--[-->libuv<!--]--></strong>. Just like the V8 engine has its hidden parts, you can learn more about it by <a><!--[--><!--[-->clicking here.<!--]--><!--]--></a> Now, let’s focus on <strong><!--[-->libuv<!--]--></strong>. Whenever V8 (Jai) can’t handle something—like file access, network calls, or timers—it gives the task to <strong><!--[-->libuv<!--]--></strong>. Also, when these tasks run, we often use callback functions, which are executed after <strong><!--[-->libuv<!--]--></strong> finishes the job.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> fs</span><span> =</span><span> require</span><span>(</span><span>'</span><span>fs</span><span>'</span><span>);
</span></span><span><span>
</span></span><span><span>// Asynchronous file read operation using callback
</span></span><span><span>fs</span><span>.</span><span>readFile</span><span>(</span><span>'</span><span>text.txt</span><span>'</span><span>,</span><span> '</span><span>utf8</span><span>'</span><span>,</span><span> (</span><span>err</span><span>,</span><span> data</span><span>)</span><span> =&gt;</span><span> {
</span></span><span><span>    if</span><span> (</span><span>err</span><span>)</span><span> {
</span></span><span><span>        console</span><span>.</span><span>error</span><span>(</span><span>'</span><span>Error reading file:</span><span>'</span><span>,</span><span> err</span><span>);
</span></span><span><span>        return</span><span>;
</span></span><span><span>    }
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>File content:</span><span>'</span><span>,</span><span> data</span><span>);
</span></span><span><span>});
</span></span><span><span>
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>This will run before file reading because readFile is async</span><span>'</span><span>);
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Now, look at the example above where we have code that reads the content of <code><!--[-->text.txt<!--]--></code>. I want to emphasize that the V8 engine can't handle this because it doesn’t understand OS or file systems. The V8 engine is only responsible for running JavaScript code—nothing else. I hope that’s clear now.<!--]--></p><p><!--[-->So, just remember: things like file access, network calls, and timers are external tasks for V8. V8 is strictly for running JavaScript. That’s it.<!--]--></p><p><!--[-->In the example above, you’re reading a file, and if you look closely, there’s a callback function with <code><!--[-->err<!--]--></code> and <code><!--[-->data<!--]--></code> as arguments. This callback will only run once <strong><!--[-->libuv<!--]--></strong> completes reading the file. Then, <strong><!--[-->libuv<!--]--></strong> hands the callback function back to the V8 engine, and V8 runs it through the call stack like it would for any other function.<!--]--></p><p><!--[-->If you don’t know what a callback is, it’s like saying, "Call me back once the task is done." For example, "Call me back when the food is ready"—just kidding, don't get distracted!<!--]--></p><p><!--[-->But how does <strong><!--[-->libuv<!--]--></strong> ask the V8 engine to run this callback? That’s what we’re going to see. Because once the file is read, it’s not sent directly to V8—there’s a mechanism in place. This is where <strong><!--[-->libuv<!--]--></strong>’s other components, friends of Veeru (libuv), come into play, which Jai (V8) doesn’t know about.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Callback Quue<!--]--></a></h3><p><!--[-->In <strong><!--[-->libuv<!--]--></strong>, there’s something called the callback queue (Veeru's responsibility), where all the callback functions wait in line. It’s like when the food is ready, but the food court is full, so you can’t enter directly because others are already eating. You have to wait in line—that’s the callback queue. Got it?<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Now, what if someone skips the line and starts eating? That would create chaos, right? So, there has to be someone to manage the queue, maintain order, decide who’s first, who’s last, and ensure everything runs smoothly.<!--]--></p><p><!--[-->Guess who does that? Yes, it’s <strong><!--[-->Shree Shree Event Loop ji<!--]--></strong>, one of the important friends of <strong><!--[-->libuv<!--]--></strong>, who keeps everything in line and makes sure the callbacks are executed in the right order.<!--]--></p><h3><a><!--[-->Event loop<!--]--></a></h3><p><!--[-->The Event Loop’s job is to keep an eye on both the <strong><!--[-->call stack<!--]--></strong> and the <strong><!--[-->callback queue<!--]--></strong>. It ensures that no callback function can break the queue. Let’s leave the food court example for now, but imagine multiple callbacks waiting at the same time. What happens if two <code><!--[-->setTimeout<!--]--></code> functions finish at the same time?<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->There’s a proper mechanism and algorithm in place to handle this situation. But remember, only when the "food court" (the V8 engine’s main thread) is empty, will the next callback from the queue get a chance to run. That means the V8 engine’s call stack needs to be empty before any callback from the queue is processed. This is exactly what the Event Loop does.<!--]--></p><p><!--[-->Now, let’s dive deeper into how the <strong><!--[-->Event Loop<!--]--></strong> operates!<!--]--></p><h3><a><!--[-->Outside Cycle of Event loop<!--]--></a></h3><p><!--[-->The Event Loop operates in different <strong><!--[-->phases<!--]--></strong> during its cycle, each phase having a specific priority for handling tasks. Here's a simplified breakdown of the phases:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Timer Phase<!--]--></strong>: This phase handles all the timers like <code><!--[-->setTimeout<!--]--></code> and <code><!--[-->setInterval<!--]--></code>. When their time expires, the corresponding callbacks are queued for execution in this phase.<!--]--></li><li><!--[--><strong><!--[-->Poll Phase<!--]--></strong>: This is where most I/O-related callbacks (like internet requests, file system access, or crypto operations) are handled. It checks for completed I/O operations and pushes their callbacks for execution.<!--]--></li><li><!--[--><strong><!--[-->Check Phase<!--]--></strong>: This phase deals with <strong><!--[-->setImmediate<!--]--></strong> callbacks. We'll go deeper into this later, but it’s used for immediate execution of functions once the poll phase is complete.<!--]--></li><li><!--[--><strong><!--[-->Close Phase<!--]--></strong>: This phase manages tasks related to closing things down, like cleanup tasks or socket closures. We'll discuss more details on this later.<!--]--></li><!--]--></ol><p><!--[-->Each of these phases has its own role in making sure the Event Loop operates smoothly and efficiently!<!--]--></p><h3><a><!--[-->Inside Cycles of Event Loop<!--]--></a></h3><p><!--[-->There are a few things we’ll cover later, but just know this: before each phase of the event loop’s outer cycle, two special tasks always run. Think of it like this—every time one person enters the "food court" (the call stack) from the queue, there's a special guest area that needs to be checked first.<!--]--></p><p><!--[-->These "special guests" are <strong><!--[-->process.nextTick()<!--]--></strong> and <strong><!--[-->promise callbacks<!--]--></strong>. Before moving on to the next phase of the event loop, the system checks if any of these special callbacks are waiting.<!--]--></p><p><!--[-->So, before checking <code><!--[-->setTimeout<!--]--></code> in the Timer phase, it first looks if there are any <code><!--[-->nextTick<!--]--></code> or promise callbacks. Before entering the Poll phase, it checks again if any of these special tasks are waiting. These tasks always happen <strong><!--[-->before<!--]--></strong> the regular phases of the event loop. Got it?<!--]--></p><ol><!--[--><li><!--[-->process.nextTick()<!--]--></li><li><!--[-->promise callabck<!--]--></li><!--]--></ol><p><!--[--><img><!--]--></p><h3><a><!--[-->Callback in NodeJs<!--]--></a></h3><p><!--[-->Below, I am pasting a code snippet that will show you how callbacks look in Node.js. Most of the time, they go and wait in the callback queue, get checked by the Event Loop, and are executed by the V8 engine. All callbacks wait there in the callback queue. Now, with this example, you can simply check the inner loop first, then the Timer phase, then again the inner loop (<code><!--[-->nextTick<!--]--></code> and promise callbacks), then the Poll phase, and then again the inner loop, followed by the Check phase, the inner loop again, then the Close phase, and then back to the inner loop. This process continues, creating an infinite loop of checks.<!--]--></p><p><!--[-->And here, also remember that for <strong><!--[-->nextTick<!--]--></strong> and Promises, two queues are maintained. Just think of it like two types of guests waiting in different rooms, and it's different from the callback queue, and remembers readig file might take time so order can be changed of output.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>// 1. File System Operations
</span></span><span><span>fs</span><span>.</span><span>readFile</span><span>(</span><span>'</span><span>file.txt</span><span>'</span><span>,</span><span> '</span><span>utf8</span><span>'</span><span>,</span><span> cb</span><span>);</span><span>      // Reading a file asynchronously
</span></span><span><span>fs</span><span>.</span><span>writeFile</span><span>(</span><span>'</span><span>file.txt</span><span>'</span><span>,</span><span> '</span><span>data</span><span>'</span><span>,</span><span> cb</span><span>);</span><span>     // Writing to a file asynchronously
</span></span><span><span>fs</span><span>.</span><span>unlink</span><span>(</span><span>'</span><span>file.txt</span><span>'</span><span>,</span><span> cb</span><span>);</span><span>                // Deleting a file asynchronously
</span></span><span><span>
</span></span><span><span>// 2. DNS Operations  ( will check later)
</span></span><span><span>dns</span><span>.</span><span>lookup</span><span>(</span><span>'</span><span>example.com</span><span>'</span><span>,</span><span> cb</span><span>);</span><span>            // Resolving domain names
</span></span><span><span>dns</span><span>.</span><span>resolve</span><span>(</span><span>'</span><span>example.com</span><span>'</span><span>,</span><span> cb</span><span>);</span><span>           // Resolving DNS records
</span></span><span><span>
</span></span><span><span>// 3. Network Operations 
</span></span><span><span>const</span><span> server</span><span> =</span><span> http</span><span>.</span><span>createServer</span><span>(</span><span>cb</span><span>);</span><span>     // Creating a server (async)
</span></span><span><span>server</span><span>.</span><span>listen</span><span>(</span><span>3000</span><span>,</span><span> cb</span><span>);</span><span>                  // Listening to a port asynchronously
</span></span><span><span>
</span></span><span><span>// 4. Timers
</span></span><span><span>setTimeout</span><span>(</span><span>cb</span><span>,</span><span> 1000</span><span>);</span><span>                     // Timer with a delay of 1000ms
</span></span><span><span>setInterval</span><span>(</span><span>cb</span><span>,</span><span> 1000</span><span>);</span><span>                    // Repeated timer every 1000ms
</span></span><span><span>
</span></span><span><span>// 5. Child Process Operations ( will check later)
</span></span><span><span>const</span><span> {</span><span> exec</span><span> }</span><span> =</span><span> require</span><span>(</span><span>'</span><span>child_process</span><span>'</span><span>);
</span></span><span><span>exec</span><span>(</span><span>'</span><span>ls</span><span>'</span><span>,</span><span> cb</span><span>);</span><span>                           // Executing a shell command asynchronously
</span></span><span><span>
</span></span><span><span>// 6. I/O Operations
</span></span><span><span>process</span><span>.</span><span>nextTick</span><span>(</span><span>cb</span><span>);
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Time to test what you have read till now<!--]--></a></h3><p><!--[-->Below, I am pasting a snippet. Just execute it in the order you learned and write the output somewhere. Below the snippet, you'll get the answer after clicking on the link. Compare it with your expectations, and if it's wrong, ask ChatGPT what's incorrect and how it gets executed, or re-read this blog<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> fs</span><span> =</span><span> require</span><span>(</span><span>'</span><span>fs</span><span>'</span><span>);
</span></span><span><span>function</span><span> normalFunction</span><span>()</span><span> {
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>Normal function call executed.</span><span>'</span><span>);
</span></span><span><span>}
</span></span><span><span>setImmediate</span><span>(()</span><span> =&gt;</span><span> {
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>setImmediate callback executed.</span><span>'</span><span>);
</span></span><span><span>});
</span></span><span><span>fs</span><span>.</span><span>readFile</span><span>(</span><span>'</span><span>text.txt</span><span>'</span><span>,</span><span> '</span><span>utf8</span><span>'</span><span>,</span><span> (</span><span>err</span><span>,</span><span> data</span><span>)</span><span> =&gt;</span><span> {
</span></span><span><span>    if</span><span> (</span><span>err</span><span>)</span><span> throw</span><span> err</span><span>;
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>fs.readFile callback executed.</span><span>'</span><span>);
</span></span><span><span>});
</span></span><span><span>setTimeout</span><span>(()</span><span> =&gt;</span><span> {
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>setTimeout callback executed.</span><span>'</span><span>);
</span></span><span><span>},</span><span> 0</span><span>);
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>Normal console.log executed.</span><span>'</span><span>);
</span></span><span><span>normalFunction</span><span>();
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[--><a><!--[--><!--[-->Click here to check the order<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Wait Wait ! yes party is not over yet<!--]--></a></h3><p><!--[-->If there is nothing in the V8 engine’s call stack, and everything has run, including the <code><!--[-->nextTick<!--]--></code> queue, callback queues, and all phases except the Poll phase, and if a file is still being read with an I/O callback pending execution, then the Event Loop will not keep running. It will stop and wait at the Poll phase instead of continuously running. This is an important concept to understand in Node.js, which is different from the Event Loop in web browsers<!--]--></p><h3><a><!--[-->Improtant to know<!--]--></a></h3><p><!--[-->Now, as we mentioned, the Event Loop will stop at the Poll phase, checking the file and waiting to push the file read callback into the V8 engine. An important thing to note is that after the file read is complete, it will resume from the <strong><!--[-->Check Phase<!--]--></strong> (not the Timer Phase). So remember, it doesn’t restart from the beginning (Timer Phase), but continues from where it left off. Let me show you a screen to better understand this.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->After waiting at the Poll phase, the callback for the file read will begin registering. This means if there is any <code><!--[-->setImmediate<!--]--></code> and <code><!--[-->setTimeout<!--]--></code> in the callback queue, the <code><!--[-->setImmediate<!--]--></code> will run first because the next phase is the <strong><!--[-->Check Phase<!--]--></strong>, not the Timer Phase."<!--]--></p><p><!--[-->This makes it clear that the Event Loop continues from the Check Phase, giving priority to <code><!--[-->setImmediate<!--]--></code> before timers if event loop is waiting at loop phase.<!--]--></p><h3><a><!--[-->Trick of nextTick<!--]--></a></h3><p><!--[-->Remember, if there’s any <code><!--[-->process.nextTick()<!--]--></code> inside a callback, and that callback has another <code><!--[-->nextTick<!--]--></code>, the Event Loop will keep checking and executing all the <code><!--[-->nextTick<!--]--></code> tasks before moving to the next phase. It will only proceed when the <code><!--[-->nextTick<!--]--></code> queue is completely empty, and this is a very important thing to note.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>process</span><span>.</span><span>nextTick</span><span>(</span><span>function</span><span> ()</span><span> {
</span></span><span><span>  process</span><span>.</span><span>nextTick</span><span>(</span><span>function</span><span> ()</span><span> {
</span></span><span><span>    process</span><span>.</span><span>nextTick</span><span>(</span><span>function</span><span> ()</span><span> {
</span></span><span><span>      console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Im inner inner process.nextTick</span><span>"</span><span>);
</span></span><span><span>    });
</span></span><span><span>
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Im inner process.nextTick</span><span>"</span><span>);
</span></span><span><span>  });
</span></span><span><span>
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>nextTick callback executed.</span><span>"</span><span>);
</span></span><span><span>});
</span></span><span><span>
</span></span><span><span>//output
</span></span><span><span>//nextTick callback executed.
</span></span><span><span>//Im inner process.nextTick
</span></span><span><span>//Im inner inner process.nextTick
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->And thats all..<!--]--></p><h3><a><!--[-->Search These Keywords<!--]--></a></h3><ol><!--[--><li><!--[-->nextTick<!--]--></li><li><!--[-->setImmediate<!--]--></li><li><!--[-->inner loop vs outer loop<!--]--></li><li><!--[-->algo used in the event loop<!--]--></li><!--]--></ol><h3><a><!--[-->Questions<!--]--></a></h3><ol><!--[--><li><!--[-->Get multiple questions having statement of inner and out loops and try to solve<!--]--></li><!--]--></ol><h3><a><!--[-->Tips<!--]--></a></h3><ol><!--[--><li><!--[-->Practice output based questions<!--]--></li><!--]--></ol><p><!--[-->I'm Rahul Aher, and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by forking the repo. If you're interested in writing the next episode's notes, <a><!--[--><!--[-->fork the repo and contribute<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Take care, Good Bye :) <a><!--[--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Deep dive into v8 JS Engine]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-8/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-8/</guid>
            <pubDate>Sat, 12 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Now, let's focus on one of Node.js's best friends, the V8 Engine. It takes the code and runs it. Before doing anything, I just want you to read this carefully.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->Now, let's focus on one of Node.js's best friends, the V8 Engine. It takes the code and runs it. Before doing anything, I just want you to read this carefully.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Alright, let’s move on to the session now. When the V8 engine processes the code, it happens in a few steps:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Tokenizing/Lexing<!--]--></strong>: Your code is broken down into smaller tokens. You can explore this further by visiting <a><!--[--><!--[-->AST Explorer<!--]--><!--]--></a>. This is more on the academic side, so if you're interested in the details, you can check out the subject of Compiler Design (or just take a look at the screenshot provided). Also, read this article for more insight: <a><!--[--><!--[-->What are syntax and expressions in JavaScript<!--]--><!--]--></a>.<!--]--></li><!--]--></ol><p><!--[--><img><!--]--></p><p><!--[--><img><!--]--></p><p><!--[--><img><!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Interpreted Language vs. Compiled Language<!--]--></a></h3><p><!--[-->An interpreter reads and executes code line by line, while a compiler reads the entire code, compiles it, and then passes it to the engine for execution. JavaScript uses both a compiler and an interpreter to run the code, along with several optimizations like <strong><!--[-->JIT (Just-in-Time Compiler)<!--]--></strong>.<!--]--></p><p><!--[-->I highly recommend reading <strong><!--[--><a><!--[--><!--[-->Scope and Closures by Kyle Simpson<!--]--><!--]--></a><!--]--></strong> to dive deeper into these concepts. I am covering digital notes of these books seeding soon in the garden <a><!--[--><!--[-->here<!--]--><!--]--></a>. The compiler used by V8 is called <strong><!--[-->Turbofan<!--]--></strong>, and its job is to optimize the code so that it runs faster, especially if the same section of code is executed multiple times.<!--]--></p><p><!--[-->Also, remember that <strong><!--[-->Garbage Collection<!--]--></strong> happens in parallel to free up memory. Below, I’ve listed the names of some garbage collectors used in the V8 engine—make sure to look them up and read about them.<!--]--></p><h3><a><!--[-->How Byte code looks like ?<!--]--></a></h3><p><!--[--><img><!--]--></p><p><!--[--><a><!--[--><!--[-->https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Search These Keywords<!--]--></a></h3><ol><!--[--><li><!--[-->Turbofan<!--]--></li><li><!--[-->Ignition Interpreter<!--]--></li><li><!--[-->Bytecode<!--]--></li><li><!--[-->Optimized Code<!--]--></li><li><!--[-->JIT (Just-in-Time Compilation)<!--]--></li><li><!--[-->Deoptimization in Compilation<!--]--></li><li><!--[-->Inline Caching<!--]--></li><li><!--[-->Copy Elision<!--]--></li><li><!--[-->Orinoco Garbage Collector<!--]--></li><li><!--[-->Oilpan Garbage Collector<!--]--></li><li><!--[-->MCompact Garbage Collector<!--]--></li><li><!--[-->Scavenger Garbage Collector<!--]--></li><li><!--[-->Mark-and-Sweep Algorithm<!--]--></li><li><!--[--><a><!--[--><!--[-->V8 Crankshaft Compiler<!--]--><!--]--></a><!--]--></li><!--]--></ol><h3><a><!--[-->Questions<!--]--></a></h3><ol><!--[--><li><!--[-->How does the compiler optimize the code, and in what situations does it fail to optimize?<!--]--></li><li><!--[-->Research other algorithms similar to the <strong><!--[-->Mark-and-Sweep<!--]--></strong> algorithm. What do they do, and how do they differ?<!--]--></li><li><!--[-->Find out byte code in v8 engine github repo<!--]--></li><!--]--></ol><h3><a><!--[-->Useful Links<!--]--></a></h3><ol><!--[--><li><!--[--><a><!--[--><!--[-->AST Explorer<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->V8 Turbofan Documentation<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->https://github.com/thlorenz/v8-perf/blob/master/crankshaft/compiler.md<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->https://v8.dev/blog/launching-ignition-and-turbofan<!--]--><!--]--></a><!--]--></li><!--]--></ol><h3><a><!--[-->Tips<!--]--></a></h3><ol><!--[--><li><!--[-->JavaScript is both an interpreted and compiled language, benefiting from various optimizations.<!--]--></li><li><!--[-->Read blogs of v8 website<!--]--></li><!--]--></ol><p><!--[-->And thats all for this session, I'm <strong><!--[-->Ashutosh Anand Tiwari,<!--]--></strong> and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by clicking edit icon on top bar of this page<a><!--[--><!--[-->.<!--]--><!--]--></a> If you're interested in writing the next episode's notes, <a><!--[--><!--[-->visit this link<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>. Thank you…<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[sync, async, setTimeoutZero in Node.js]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-7/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-7/</guid>
            <pubDate>Fri, 11 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[In the last few sessions, we have seen how Node.js code runs. If something is synchronous, the V8 engine handles it, or in case of asynchronous tasks, libUV steps in. You can think of Node.js having two best friends, like Jai and Veeru. Whenever a problem (or code) comes in, they handle it accordingly.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->In the last few sessions, we have seen how Node.js code runs. If something is synchronous, the V8 engine handles it, or in case of asynchronous tasks, libUV steps in. You can think of Node.js having two best friends, like Jai and Veeru. Whenever a problem (or code) comes in, they handle it accordingly.<!--]--></p><p><!--[-->Now, it’s time to look at a small example to see how these two friends—V8 engine (Jai) and libUV (Veeru)—manage the code.<!--]--></p><p><!--[-->Create file.txt and write something in it, and then in any JS file for example app.js right whatever I have written below in code block<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> fs</span><span> =</span><span> require</span><span>(</span><span>"</span><span>fs</span><span>"</span><span>);
</span></span><span><span>const</span><span> https</span><span> =</span><span> require</span><span>(</span><span>"</span><span>https</span><span>"</span><span>);
</span></span><span><span>
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Kitne aadmi the ??</span><span>"</span><span>);
</span></span><span><span>
</span></span><span><span>const</span><span> num1</span><span> =</span><span> 2</span><span>;
</span></span><span><span>const</span><span> num2</span><span> =</span><span> 3</span><span>;
</span></span><span><span>
</span></span><span><span>https</span><span>.</span><span>get</span><span>(</span><span>"</span><span>https://dummyjson.com/todos/1</span><span>"</span><span>,</span><span> function</span><span> callback</span><span>(</span><span>response</span><span>)</span><span> {
</span></span><span><span>  // I am callback function which will run after the dummyJSON has been read from API server
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>hey I am here</span><span>"</span><span>);
</span></span><span><span>});
</span></span><span><span>
</span></span><span><span>setTimeout</span><span>(</span><span>function</span><span> callback</span><span>(){
</span></span><span><span>
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>I will after 5 seconds Sarkaar!</span><span>"</span><span>);
</span></span><span><span>},</span><span> 5000</span><span>);
</span></span><span><span>
</span></span><span><span>fs</span><span>.</span><span>readFile</span><span>(</span><span>'</span><span>./file.txt</span><span>'</span><span>,</span><span> '</span><span>utf-8</span><span>'</span><span>,</span><span> function</span><span> callback</span><span>(</span><span>err</span><span>,</span><span>response</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>This will get printed after file read </span><span>"</span><span>,</span><span>response</span><span>);
</span></span><span><span>})
</span></span><span><span>
</span></span><span><span>function</span><span> kitneAadmiThe</span><span>(</span><span>a</span><span>,</span><span> b</span><span>)</span><span> {
</span></span><span><span>  return</span><span> a</span><span> *</span><span> b</span><span>;
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>Sarkar kul aadmi the ...?</span><span>'</span><span>,</span><span> kitneAadmiThe</span><span>(</span><span>num1</span><span>,</span><span> num2</span><span>));
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Let's understand what's happening here. In this code, both asynchronous and synchronous operations are present, which means both "Jai" (the V8 engine) and "Veeru" (libUV) will come into play. Here's how:<!--]--></p><ol><!--[--><li><!--[-->The first two lines import the <code><!--[-->https<!--]--></code> and <code><!--[-->fs<!--]--></code> modules of Node.js. Got it?<!--]--></li><li><!--[-->Then, there's a console log: "Kitne aadmi the?". This is a synchronous operation, so Jai (the V8 engine) will handle it. It will print immediately.<!--]--></li><li><!--[-->Next, we have <code><!--[-->https.get()<!--]--></code>. Remember, this is asynchronous code, so Jai can't handle it. Veeru (libUV) steps in, and Node.js will ask libUV to fetch data from the API (<code><!--[-->/todos/1<!--]--></code>) without blocking the main thread. Once the data is ready, the callback function runs.<!--]--></li><li><!--[-->After that, there's <code><!--[-->setTimeout()<!--]--></code>. Again, this is asynchronous code, so Veeru (libUV) takes over. It waits for 5 seconds and runs the callback once the time is up, without blocking the main thread.<!--]--></li><li><!--[-->Now, we have <code><!--[-->fs.readFile()<!--]--></code>. Since reading files is also asynchronous, Veeru (libUV) handles it. The file is read, and once done, the callback runs, printing the file contents.<!--]--></li><li><!--[-->Finally, there's the <code><!--[-->kitneAadmiThe()<!--]--></code> function, which is synchronous. This is handled by the V8 engine (Jai) and runs immediately when called. The result is printed as "Sarkar kul aadmi the ...? 6".<!--]--></li><!--]--></ol><p><!--[-->To sum it up, the main thread runs all synchronous code, like <code><!--[-->console.log<!--]--></code> and <code><!--[-->kitneAadmiThe()<!--]--></code>, first. Then, Veeru (libUV) handles the asynchronous tasks like <code><!--[-->https.get()<!--]--></code>, <code><!--[-->setTimeout()<!--]--></code>, and <code><!--[-->fs.readFile()<!--]--></code> without blocking the execution. The callbacks of these async tasks will be processed once the main thread is clear.<!--]--></p><p><!--[-->Outout of above code<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>// Kitne aadmi the ??
</span></span><span><span>// Sarkar kul aadmi the ...? 6
</span></span><span><span>// This will get printed after file read  Production code, in clients ke saamne mat fatna 
</span></span><span><span>// hey I am here
</span></span><span><span>// I will after 5 seconds Sarkaar
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->readFileSync<!--]--></a></h3><p><!--[-->We saw that <code><!--[-->readFile<!--]--></code> is asynchronous, meaning it doesn't block the main thread. But what if you want the next line of code to run only after the file is read? In that case, you'll need to wait for the file to be read. To do this, instead of using <code><!--[-->readFile<!--]--></code> (which doesn't wait), you can use <code><!--[-->readFileSync<!--]--></code>, which is synchronous and blocks the main thread. It will pause and wait until the file is read before moving to the next line of code.<!--]--></p><p><!--[-->This way, the output will change, and you’ll notice the file is read first before the code continues. The order of execution will be different.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>// change above code by these lines
</span></span><span><span>fs</span><span>.</span><span>readFileSync</span><span>(</span><span>'</span><span>./file.txt</span><span>'</span><span>,</span><span> '</span><span>utf-8</span><span>'</span><span>)
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>This will get printed after file read</span><span>"</span><span>);
</span></span><span><span>
</span></span><span><span>// output
</span></span><span><span>
</span></span><span><span>//Kitne aadmi the ??
</span></span><span><span>//This will get printed after file read
</span></span><span><span>//Sarkar kul aadmi the ...? 6
</span></span><span><span>//hey I am here
</span></span><span><span>//I will after 5 seconds Sarkaar!
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[--><strong><!--[-->Note:<!--]--></strong> Whenever you see "sync," it means the code will block and wait until the task is finished before moving on to the next line. and its not recommended to use<!--]--></p><p><!--[-->Now I hope you have understood how sync and async works in NodeJs<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->setTimeout in Node.js<!--]--></a></h3><p><!--[-->Remember this: I often ask this question in interviews about the order of <code><!--[-->setTimeout<!--]--></code>, even if it has 0 milliseconds. Just keep in mind, no matter if it's set to 0 milliseconds or 10 seconds, it won’t run immediately. <code><!--[-->setTimeout<!--]--></code> will be handled by libUV and will only execute after the main thread has finished everything. It doesn’t block the main thread. I am putting one JS question here, because I think you know  JS which runs on web thats why you are here,  read below snippets and guess the output send me Yes  <a><!--[--><!--[-->here<!--]--><!--]--></a>  if you have guessed it correct .<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->And thats all for this session, I'm <strong><!--[-->Ashutosh Anand Tiwari,<!--]--></strong> and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by clicking edit icon on top bar of this page<a><!--[--><!--[-->.<!--]--><!--]--></a> If you're interested in writing the next episode's notes, <a><!--[--><!--[-->visit this link<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>. Thank you…<!--]--></p><h3><a><!--[-->New words to search<!--]--></a></h3><ol><!--[--><li><!--[-->utf-8<!--]--></li><li><!--[-->node: crypto<!--]--></li><!--]--></ol><h3><a><!--[-->UseFull Tips<!--]--></a></h3><ol><!--[--><li><!--[-->Go to node js website check list of node js modules<!--]--></li><!--]--></ol><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[E1: History of Node.js in Depth]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-1/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-1/</guid>
            <pubDate>Thu, 10 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Node.js is a JavaScript runtime built on Chrome's V8 engine. It allows JavaScript to run outside the browser and introduced event-driven, non-blocking I/O that changed server-side programming forever. These notes explore what Node.js is, why it was created, and how it evolved over time.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><h1><!--[-->📖 Notes – History of Node.js<!--]--></h1><h2><a><!--[-->What is Node.js?<!--]--></a></h2><p><!--[-->Node.js is not a programming language or a framework, but a <strong><!--[-->runtime environment<!--]--></strong> that allows JavaScript to be executed outside the browser. Normally, JavaScript was considered a client-side language that only ran in browsers to make web pages interactive. But with Node.js, the same JavaScript can also be used on the server.<!--]--></p><p><!--[-->It runs on <strong><!--[-->Google’s V8 JavaScript engine<!--]--></strong> (the same engine used by the Chrome browser). V8 compiles JavaScript directly into machine code, which makes execution extremely fast compared to older interpreters.<!--]--></p><p><!--[-->Node.js is designed to be <strong><!--[-->cross-platform<!--]--></strong>, which means I can run the same application on Windows, macOS, Linux, and other operating systems without rewriting code. It is also <strong><!--[-->open-source<!--]--></strong> and maintained by the <strong><!--[-->OpenJS Foundation<!--]--></strong>, which ensures community-driven growth.<!--]--></p><p><!--[-->The most important technical innovation in Node.js is its <strong><!--[-->event-driven, non-blocking I/O model<!--]--></strong>. Traditional web servers used to handle one request at a time per thread, which meant they could get stuck (blocked) while waiting for slow tasks like database queries or file reading. Node.js solved this problem by using a single-threaded event loop with asynchronous operations. This allows Node.js to handle thousands of requests simultaneously without consuming huge system resources.<!--]--></p><p><!--[-->In simple words, Node.js makes JavaScript suitable not only for creating websites but also for building <strong><!--[-->APIs, real-time chat applications, streaming platforms, desktop apps, and even IoT solutions<!--]--></strong>.<!--]--></p><p><!--[--><em><!--[--><strong><!--[-->My takeaway: Node.js is the reason why today we can say "JavaScript everywhere" — the same language for frontend and backend.<!--]--></strong><!--]--></em><!--]--></p><h2><a><!--[-->Key Features of Node.js<!--]--></a></h2><ul><!--[--><li><!--[--><strong><!--[-->Cross-Platform<!--]--></strong>: Works on all major operating systems without modification.<!--]--></li><li><!--[--><strong><!--[-->Open Source<!--]--></strong>: Free to use and developed by a large community under the OpenJS Foundation.<!--]--></li><li><!--[--><strong><!--[-->High Performance with V8<!--]--></strong>: Runs JavaScript code extremely fast by compiling it to machine code.<!--]--></li><li><!--[--><strong><!--[-->JavaScript Outside the Browser<!--]--></strong>: Allows full-stack development using only one language.<!--]--></li><li><!--[--><strong><!--[-->Asynchronous and Non-Blocking<!--]--></strong>: Handles multiple tasks at the same time without waiting for one to finish.<!--]--></li><li><!--[--><strong><!--[-->Event-Driven Architecture<!--]--></strong>: Uses an event loop to manage tasks efficiently, making it ideal for I/O-heavy applications like chat systems or streaming services.<!--]--></li><!--]--></ul><h2><a><!--[-->The History of Node.js<!--]--></a></h2><h3><a><!--[-->The Problem Before Node.js<!--]--></a></h3><p><!--[-->Before Node.js existed, building web servers that could handle many users at once was difficult. Traditional servers like Apache or IIS used a <strong><!--[-->thread-per-request model<!--]--></strong>. This meant that if 10,000 people connected at the same time, the server would try to open 10,000 threads. Managing so many threads required a lot of memory and CPU, and servers often became slow or even crashed under heavy load.<!--]--></p><p><!--[-->At the same time, JavaScript was locked inside browsers. Developers had to use multiple languages:<!--]--></p><ul><!--[--><li><!--[-->JavaScript for frontend,<!--]--></li><li><!--[-->PHP, Java, or Python for backend,<!--]--></li><li><!--[-->SQL for databases.<!--]--></li><!--]--></ul><p><!--[-->This made development more complex and required switching between multiple languages and technologies.<!--]--></p><p><!--[-->Ryan Dahl looked at this problem and thought: “What if I could use JavaScript on the server and make it efficient enough to handle thousands of users at once?” This question led to the creation of Node.js.<!--]--></p><h3><a><!--[-->2009 – The Birth of Node.js<!--]--></a></h3><p><!--[-->Node.js was created in <strong><!--[-->2009 by Ryan Dahl<!--]--></strong>. He wanted to build a system that was lightweight, fast, and capable of handling many concurrent users without crashing. To achieve this, he chose Google’s <strong><!--[-->V8 JavaScript engine<!--]--></strong> for its speed and combined it with <strong><!--[-->libuv<!--]--></strong>, a C++ library that handles asynchronous I/O operations.<!--]--></p><p><!--[-->This combination introduced the concept of <strong><!--[-->non-blocking I/O<!--]--></strong> in server environments, which was revolutionary at the time. Instead of waiting for a task (like a database call) to finish, Node.js could continue handling other requests in the meantime.<!--]--></p><p><!--[-->Developers quickly realized the power of this model. Suddenly, it was possible to build chat apps, real-time games, and APIs that could handle thousands of simultaneous users with much lower resource usage compared to traditional web servers.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->2010 – npm (Node Package Manager)<!--]--></a></h3><p><!--[-->In 2010, the <strong><!--[-->npm package manager<!--]--></strong> was introduced. This was another game-changer. Before npm, sharing and reusing code libraries in JavaScript was difficult. With npm, developers could publish their own packages and use packages created by others with just a simple command.<!--]--></p><p><!--[-->Today, npm has become the <strong><!--[-->largest software registry in the world<!--]--></strong>, hosting millions of packages. This ecosystem is one of the biggest reasons why Node.js grew so fast.<!--]--></p><h3><a><!--[-->2011 – Windows Support<!--]--></a></h3><p><!--[-->Initially, Node.js worked only on Linux and macOS. But in 2011, thanks to a partnership between <strong><!--[-->Joyent<!--]--></strong> (the company backing Node.js) and <strong><!--[-->Microsoft<!--]--></strong>, Node.js was ported to run on Windows. This made it accessible to an even larger developer base and accelerated its adoption in enterprise environments.<!--]--></p><h3><a><!--[-->2012 – npm Independence<!--]--></a></h3><p><!--[-->As npm grew, it became clear that it needed its own leadership. The responsibility of maintaining npm was handed over to <strong><!--[-->Isaac Z. Schlueter<!--]--></strong>, the creator of npm. Under his leadership, npm evolved into a full-fledged ecosystem, independent of Node.js itself but still tightly integrated.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->2014 – The io.js Fork<!--]--></a></h3><p><!--[-->In 2014, some members of the Node.js community became frustrated with the slow pace of development and the governance structure under Joyent. To move faster, <strong><!--[-->Fedor Indutny<!--]--></strong> created a fork of Node.js called <strong><!--[-->io.js<!--]--></strong>.<!--]--></p><p><!--[-->io.js quickly gained popularity because it had faster release cycles and was more open to contributions from the community. However, this also created confusion since developers had to choose between Node.js and io.js.<!--]--></p><h3><a><!--[-->2015 – Node.js Foundation<!--]--></a></h3><p><!--[-->To solve the division, the <strong><!--[-->Node.js Foundation<!--]--></strong> was formed in 2015. This provided neutral and transparent governance. One of the first major steps of the foundation was to merge <strong><!--[-->io.js<!--]--></strong> back into Node.js. This reunification helped the ecosystem stabilize and ensured that all improvements from io.js became part of Node.js.<!--]--></p><h3><a><!--[-->2019 – OpenJS Foundation<!--]--></a></h3><p><!--[-->In 2019, the <strong><!--[-->Node.js Foundation<!--]--></strong> merged with the <strong><!--[-->JS Foundation<!--]--></strong> (which managed many other JavaScript projects). Together they formed the <strong><!--[-->OpenJS Foundation<!--]--></strong>.<!--]--></p><p><!--[-->This foundation now provides long-term support, funding, and governance for Node.js and several other important JavaScript projects. It ensures that Node.js continues to evolve in a sustainable and community-driven way.<!--]--></p><p><!--[--><img><!--]--></p><h2><a><!--[-->Why Node.js Matters Today<!--]--></a></h2><p><!--[-->Node.js completely changed the way backend development works. It unified frontend and backend with one language, JavaScript, making life much easier for developers. Its event-driven model makes it perfect for building modern applications like chat apps, streaming services, online games, and scalable APIs.<!--]--></p><p><!--[-->Another major reason for its success is the npm ecosystem, which provides ready-made solutions for almost any problem. Instead of reinventing the wheel, developers can just install a package and focus on building features.<!--]--></p><p><!--[-->With backing from the OpenJS Foundation and contributions from thousands of developers worldwide, Node.js continues to be one of the most popular and powerful tools in modern software development.<!--]--></p><h2><a><!--[-->My Key Learnings<!--]--></a></h2><ul><!--[--><li><!--[-->Ryan Dahl's main goal was to fix the <strong><!--[-->blocking I/O problem<!--]--></strong> and allow <strong><!--[-->JavaScript on the server<!--]--></strong>.<!--]--></li><li><!--[-->The launch of <strong><!--[-->npm in 2010<!--]--></strong> gave Node.js an ecosystem that made it explode in popularity.<!--]--></li><li><!--[-->The <strong><!--[-->io.js fork in 2014<!--]--></strong> highlighted the importance of open governance in open-source projects.<!--]--></li><li><!--[-->The formation of the <strong><!--[-->Node.js Foundation in 2015<!--]--></strong> reunited the community.<!--]--></li><li><!--[-->The <strong><!--[-->OpenJS Foundation in 2019<!--]--></strong> ensured Node.js has a sustainable future.<!--]--></li><!--]--></ul><p><!--[-->If asked in an interview: <em><!--[-->"Why was Node.js created?"<!--]--></em><br>
The answer is: <em><!--[-->Node.js was created to allow JavaScript to run on the server and to handle thousands of concurrent connections efficiently using non-blocking I/O.<!--]--></em><!--]--></p><hr><h2><a><!--[-->🔗 Learning Resources<!--]--></a></h2><h3><a><!--[-->Official Documentation<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[--><a><!--[--><!--[-->Node.js Official Documentation<!--]--><!--]--></a><!--]--></strong> - Complete official documentation covering all APIs and features<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->Node.js Guides<!--]--><!--]--></a><!--]--></strong> - Comprehensive learning guides for beginners to advanced<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->npm Documentation<!--]--><!--]--></a><!--]--></strong> - Everything about package management<!--]--></li><!--]--></ul><h3><a><!--[-->Video Content<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[--><a><!--[--><!--[-->Node.js Crash Course by Traversy Media<!--]--><!--]--></a><!--]--></strong> - 1.5 hour comprehensive introduction<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->Ryan Dahl's Original Node.js Presentation<!--]--><!--]--></a><!--]--></strong> - Historic 2009 JSConf presentation where Node.js was introduced<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->The Story of Node.js by Ryan Dahl<!--]--><!--]--></a><!--]--></strong> - Later reflection on Node.js creation<!--]--></li><!--]--></ul><h3><a><!--[-->Articles &amp; Blog Posts<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[--><a><!--[--><!--[-->Understanding the Node.js Event Loop<!--]--><!--]--></a><!--]--></strong> - Deep dive into Node.js internals<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->History of Node.js Timeline<!--]--><!--]--></a><!--]--></strong> - Detailed timeline of Node.js evolution<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->Why Node.js?<!--]--><!--]--></a><!--]--></strong> - Comprehensive explanation of Node.js advantages<!--]--></li><!--]--></ul><h3><a><!--[-->Interactive Learning<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[--><a><!--[--><!--[-->NodeSchool<!--]--><!--]--></a><!--]--></strong> - Interactive tutorials for Node.js<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->Learn Node.js - Codecademy<!--]--><!--]--></a><!--]--></strong> - Structured course with hands-on exercises<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->Node.js Tutorial - W3Schools<!--]--><!--]--></a><!--]--></strong> - Step-by-step tutorial with examples<!--]--></li><!--]--></ul><h3><a><!--[-->Books<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->"Node.js Design Patterns" by Mario Casciaro<!--]--></strong> - Advanced patterns and best practices<!--]--></li><li><!--[--><strong><!--[-->"Learning Node.js Development" by Andrew Mead<!--]--></strong> - Comprehensive beginner to intermediate guide<!--]--></li><li><!--[--><strong><!--[-->"Node.js in Action" by Mike Cantelon<!--]--></strong> - Practical approach to Node.js development<!--]--></li><!--]--></ul><h3><a><!--[-->Tools &amp; Utilities<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[--><a><!--[--><!--[-->Node Version Manager (nvm)<!--]--><!--]--></a><!--]--></strong> - Manage multiple Node.js versions<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->Nodemon<!--]--><!--]--></a><!--]--></strong> - Auto-restart development server<!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->Node.js Profiler<!--]--><!--]--></a><!--]--></strong> - Performance analysis tools<!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[libuv & async IO in Node.js]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-6/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-6/</guid>
            <pubDate>Thu, 10 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[If you read Node.js's definition, it mentions an event-driven architecture and its ability to handle asynchronous I/O. These two concepts are crucial to understand, so take your time to read and grasp them thoroughly. We know JavaScript is a synchronous, single-threaded language, meaning the code runs in one direction like a one-way road, with one task executing at a time.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->If you read Node.js's definition, it mentions an event-driven architecture and its ability to handle asynchronous I/O. These two concepts are crucial to understand, so take your time to read and grasp them thoroughly. We know JavaScript is a synchronous, single-threaded language, meaning the code runs in one direction like a one-way road, with one task executing at a time. JavaScript code executes line by line, which is what makes it synchronous and single-threaded.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Synchronous vs Asynchronous Code<!--]--></a></h3><p><!--[-->Imagine a restaurant where you can get Coke, pizza, and noodles, which take 0 minutes, 10 minutes, and 5 minutes to prepare, respectively. Now, picture a line of 5 people (A, B, C, D, E) waiting to order. In a synchronous way, Person A orders Coke and gets it instantly. Person B orders noodles, taking 5 minutes. Person C, who wants pizza, has to wait 5 minutes before even placing the order, then waits another 10 minutes for the pizza. Meanwhile, Person D, who only wants a Coke, ends up waiting unnecessarily. This is how synchronous code works: one task at a time, causing delays.<!--]--></p><h3><a><!--[-->Asynchronous Way of Running Things<!--]--></a></h3><p><!--[-->In an asynchronous way, tasks that take time (like preparing pizza or noodles) are handled separately, allowing the restaurant to serve quick orders (like Coke) immediately. So, A gets Coke instantly, while B and C (who ordered pizza and noodles) are moved to a different queue to wait. Meanwhile, D, who also wants Coke, gets served right away. This prevents unnecessary waiting. The completion of B and C's orders depends on the preparation time. Asynchronous operations in Node.js prevent blocking, improving efficiency, especially for quick tasks. JS Engines loves synchronous code because it can run that code in milliseconds. we will see some examples soon.<!--]--></p><h3><a><!--[-->How synchronous code runs in the JS engine?<!--]--></a></h3><p><!--[-->The JS engine has components like the Call Stack, Garbage Collector, and Memory Heap. These aren't machines or hardware; they are just C++ code. When you run a code like <code><!--[-->var a = 10;<!--]--></code>, it executes in the Global Execution Context, which is created in a synchronous, single-threaded manner. When a function is called, a new execution context is created for that function, and the code runs. Let me give you an example to explain it further.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>var</span><span> a</span><span>=</span><span>102</span><span>;
</span></span><span><span>var</span><span> b</span><span>=</span><span>209</span><span>;
</span></span><span><span>
</span></span><span><span>function</span><span> multiply</span><span>(</span><span>x</span><span>,</span><span>y</span><span>){
</span></span><span><span>  const</span><span>  result</span><span>=</span><span> x</span><span>*</span><span>y
</span></span><span><span>  return</span><span> result</span><span>;
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span>var</span><span> c</span><span>=</span><span> multiply</span><span>(</span><span>a</span><span>,</span><span>b</span><span>)
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->When the JS engine executes code, it goes through several steps, such as parsing and tokenization. The compiler and scope work together during this phase. For example, when the compiler sees variables <code><!--[-->a<!--]--></code> and <code><!--[-->b<!--]--></code>, it checks with the scope if they exist. If not, they are declared and assigned values. This process occurs in the Global Execution Context within the Call Stack. When a function is called, a new execution context is created, runs, and then is popped off the stack. For more details, you can learn from blogs or videos by Akshay Saini on YouTube.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->How Asynchronous Code Runs in the JS Engine<!--]--></a></h3><p><!--[--><img><!--]--></p><p><!--[-->Let me tell you something: JavaScript isn't just limited to running code. As a scripting language, it has many tasks it's not inherently capable of handling, such as interacting with the outside world, accessing files, or databases. A great example is managing time with <code><!--[-->setTimeout<!--]--></code>—this isn't actually a feature of JavaScript itself. Really? Yes! The JS engine can't inherently wait; it's not designed for that. The JS engine's responsibility is simply to take JavaScript code and convert it, that's it—no time management or other logic involved.<!--]--></p><p><!--[-->That's where Node.js comes into play with its superpowers. Node.js can execute timers, read files from the OS, access databases, connect to servers, and make internet requests. When all these operations are ready, only the JavaScript code runs on the V8 engine. These superpowers are managed by and connected to the V8 engine through libuv. Yes, my friend, libuv! Whenever a request for file access, an internet call, or a timer comes in, it goes to libuv, which communicates with the OS and then gets back to the V8 engine. And work is done by Js v8 engine in the callstack.<!--]--></p><p><!--[-->In simple terms, this is how Node.js operates.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->What is libuv the Superhero<!--]--></a></h3><p><!--[-->libuv is a C library that provides Node.js with an event-driven, asynchronous I/O model. It helps manage tasks like file reading, writing, networking, and timers in a non-blocking way, making it possible for Node.js to handle many tasks simultaneously without slowing down. Essentially, Libuv is what enables Node.js to be fast and efficient, handling multiple operations at once without waiting for each to finish. Libuv acts as a middleware b/w JS engine and Operating System. Libuv has thread pool and event loop will discuss in later blogs. just know if anything comes async or engine can’t handle it ask libuv to do it. find the libuv exact link to check the code of it written in c for your reference. actually libuv does so many things.<!--]--></p><h3><a><!--[-->Node.js is Asynchronous<!--]--></a></h3><p><!--[-->If someone asks about Node.js behavior, tell them Node.js is overall asynchronous. However, V8, which is its JavaScript engine, operates synchronously. Node.js gains its asynchronous nature from superpowers like <code><!--[-->libuv<!--]--></code>, which enables non-blocking I/O operations. This is why Node.js is known for its non-blocking behavior, allowing I/O operations to be performed asynchronously. And don't forget to give a shoutout to the creator of Node.js, Ryan Dahl!<!--]--></p><p><!--[-->And that's all for this episode!<!--]--></p><p><!--[-->I'm Ashutosh Anand Tiwari, and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by <a><!--[--><!--[-->visiting this link.<!--]--><!--]--></a> If you're interested in writing the next episode's notes, <a><!--[--><!--[-->visit this link<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>.<!--]--></p><h3><a><!--[-->New words to search<!--]--></a></h3><ol><!--[--><li><!--[-->IO<!--]--></li><li><!--[-->Async and sync<!--]--></li><li><!--[-->Garbage collector<!--]--></li><li><!--[-->Libuv<!--]--></li><!--]--></ol><h3><a><!--[-->Questions / Queries to research<!--]--></a></h3><ol><!--[--><li><!--[-->Read the C code of libuv<!--]--></li><li><!--[-->How garbage collector works in JavaScript ?<!--]--></li><li><!--[-->Find the code of Garbage collector in Node Js github repo.<!--]--></li><!--]--></ol><h3><a><!--[-->Useful Tips<!--]--></a></h3><ol><!--[--><li><!--[-->Node Js is asynchronousd and Js engine in syncronous,<!--]--></li><!--]--></ol><h3><a><!--[-->Useful links<!--]--></a></h3><ol><!--[--><li><!--[--><a><!--[--><!--[-->https://github.com/nodejs/node/tree/main/deps/uv<!--]--><!--]--></a><!--]--></li><!--]--></ol><p><!--[--><img><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Diving into the NodpeJS Github repo]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-5/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-5/</guid>
            <pubDate>Wed, 09 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[As we know, each module in Node.js has its own scope. How does Node.js achieve this? In JavaScript, we follow the Principle of Least Privilege (PoLP), which is related to functions and scope. If you're unfamiliar, you can Google it. The idea is to only expose what is necessary to the global scope, keeping everything else private. To achieve PoLP, wrap your code in a function or immediately invoke it (IIFE).]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><h3><a><!--[-->The principle of leave privilege (PoLP)<!--]--></a></h3><p><!--[-->As we know, each module in Node.js has its own scope. How does Node.js achieve this? In JavaScript, we follow the Principle of Least Privilege (PoLP), which is related to functions and scope. If you're unfamiliar, you can Google it. The idea is to only expose what is necessary to the global scope, keeping everything else private. To achieve PoLP, wrap your code in a function or immediately invoke it (IIFE). This is how modules in Node.js work. You can learn more about PoLP from <a><!--[--><!--[-->this Stack Overflow post<!--]--><!--]--></a> or watch <a><!--[--><!--[-->this YouTube video<!--]--><!--]--></a>. Here's a tip: mention PoLP in your next interview to impress the interviewer. Want a mock interview with me? <a><!--[--><!--[-->Click here to schedule one now<!--]--><!--]--></a>.<!--]--></p><p><!--[--><a><!--[--><!--]--></a><!--]--></p><h3><a><!--[-->How modules and require work ?<!--]--></a></h3><p><!--[-->Now you understand that when you <code><!--[-->require<!--]--></code> something in Node.js, the entire code is wrapped in a function (essentially an IIFE). This is how PoLP works, making the code private and inaccessible to other modules unless explicitly exported. The <code><!--[-->module<!--]--></code> keyword in your file is available because Node.js passes it as an object to the IIFE while converting your module code. Below are two examples: one without PoLP and one with PoLP. Remember, PoLP is just about hiding code from the outside environment.<!--]--></p><p><!--[-->Without PoLP<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>var</span><span> x</span><span>=</span><span>10</span><span>;
</span></span><span><span> // do something with x
</span></span><span><span> console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>value is : </span><span>'</span><span>,</span><span> x</span><span>)
</span></span><span><span>//Suppose till this scope you need x 
</span></span><span><span>
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>)</span><span> // 10; but here also you are getting x access thats not good
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So to hide this we can wrap it in a function<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>function</span><span>()</span><span> {</span><span>  // &lt;--- Add this
</span></span><span><span>
</span></span><span><span> var</span><span> x</span><span>=</span><span>10</span><span>;
</span></span><span><span> // do something with x
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>value is : </span><span>'</span><span>,</span><span> x</span><span>)
</span></span><span><span> //Suppose till this scope you need x 
</span></span><span><span> 
</span></span><span><span> 
</span></span><span><span> 
</span></span><span><span> }()</span><span>          // &lt;----Add this ( thats it IIFE done)
</span></span><span><span> 
</span></span><span><span> console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>)</span><span>   // ERROR ( now you cant access because its hidden now,  private 
</span></span><span><span>  )
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Lets see how this works with modules in node js<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>function</span><span>()</span><span> {</span><span>  
</span></span><span><span>
</span></span><span><span> var</span><span> x</span><span>=</span><span>10</span><span>;
</span></span><span><span> // do something with x
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>value is : </span><span>'</span><span>,</span><span> x</span><span>)
</span></span><span><span> //Suppose till this scope you need x 
</span></span><span><span> 
</span></span><span><span> modules</span><span>.</span><span>export</span><span>=</span><span> {</span><span> x</span><span> }
</span></span><span><span> 
</span></span><span><span> }(</span><span>modules</span><span>)</span><span>          // node js passing modules in IIFE while calling it
</span></span><span><span> 
</span></span><span><span> console</span><span>.</span><span>log</span><span>(</span><span>x</span><span>)</span><span>   // ERROR ( now you cant access because its hidden now private now
</span></span><span><span>  )
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Behind the scenes, Node.js uses its capabilities, like wrapping code in an IIFE, and then the V8 engine executes the code. When you <code><!--[-->require('./sum.js')<!--]--></code> in another module, Node.js performs several steps to load and execute the module. There are five key steps involved in this process to ensure the module is properly loaded, compiled, and executed. Let's explore what these five steps are.<!--]--></p><h3><a><!--[-->5 Steps to Load and Execute a Module<!--]--></a></h3><ol><!--[--><li><!--[-->Require a Module
Identifies the source of the module, whether it's a local file, built-in module, or JSON file.<!--]--></li><li><!--[-->Load the Module
Accesses the module's content but does not execute it yet.<!--]--></li><li><!--[-->Wrap in IIFE
Wraps the module code in an Immediately Invoked Function Expression (IIFE), as previously discussed.<!--]--></li><li><!--[-->Evaluate the Code
Executes the code, allowing <code><!--[-->module.exports<!--]--></code> to return the exposed content.<!--]--></li><li><!--[-->Caching
Caches the module to avoid re-execution, improving performance by reusing the cached result in subsequent requires.<!--]--></li><!--]--></ol><p><!--[--><img><!--]--></p><p><!--[-->Let me introduce you with one of superpower of NodeJs, we will discuss it later.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Its time to open <a><!--[--><!--[-->Github repo of  Node JS<!--]--><!--]--></a>  and read about it. Here below you can see how NodeJS wraps the module code in IIFE , you can find this <a><!--[--><!--[-->code here in node Js repo<!--]--><!--]--></a><!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>let</span><span> wrap</span><span> =</span><span> function</span><span>(</span><span>script</span><span>)</span><span> {</span><span> // eslint-disable-line func-style
</span></span><span><span>  return</span><span> Module</span><span>.</span><span>wrapper</span><span>[</span><span>0</span><span>]</span><span> +</span><span> script</span><span> +</span><span> Module</span><span>.</span><span>wrapper</span><span>[</span><span>1</span><span>];
</span></span><span><span>};
</span></span><span><span>
</span></span><span><span>const</span><span> wrapper</span><span> =</span><span> [
</span></span><span><span>  '</span><span>(function (exports, require, module, __filename, __dirname) { </span><span>'</span><span>,
</span></span><span><span>  '</span><span>\n</span><span>});</span><span>'</span><span>,
</span></span><span><span>];
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Search These Keywords<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->IIFE<!--]--></strong> (Immediately Invoked Function Expression)<!--]--></li><li><!--[--><strong><!--[-->PoLP<!--]--></strong> (Principle of Least Privilege)<!--]--></li><li><!--[--><strong><!--[-->Caching in NodeJS<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->LibUV Library<!--]--></strong><!--]--></li><!--]--></ol><h3><a><!--[-->Questions<!--]--></a></h3><ol><!--[--><li><!--[-->How do you make a set of variables private?<!--]--></li><li><!--[-->What are the use cases for IIFEs?<!--]--></li><li><!--[-->Besides IIFEs, are there other methods to achieve the same functionality?<!--]--></li><li><!--[-->Find the code in the Node.js repository where modules are wrapped in IIFE.<!--]--></li><!--]--></ol><h3><a><!--[-->Useful Links<!--]--></a></h3><ol><!--[--><li><!--[--><a><!--[--><!--[-->NodeJS GitHub Repository (V8 Code)<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->LibUV Code - The Powerhouse of NodeJS<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Require Function in Node.js Repository<!--]--><!--]--></a><!--]--></li><!--]--></ol><h3><a><!--[-->Tips<!--]--></a></h3><ol><!--[--><li><!--[-->Open any GitHub repository and press the . (full stop) key on your keyboard to open it in a VS Code-like editor directly in your browser.<!--]--></li><li><!--[-->Alternatively, add 1s before the URL in the repository link to open it in a browser-based editor. For example, <a><!--[--><!--[-->https://github1s.com/<!--]--><!--]--></a>.<!--]--></li><!--]--></ol><p><!--[-->And that's all for this episode!<!--]--></p><p><!--[-->I'm Rahul Aher, and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by forking the repo. If you're interested in writing the next episode's notes, <a><!--[--><!--[-->fork the repo and contribute<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Take care, Good Bye :) <a><!--[--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Module.exports & require]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-4/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-4/</guid>
            <pubDate>Tue, 08 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[As you saw in the last episode, we wrote our first line of code in Node.js. Now, we could just keep adding whatever we want to app.js, and technically, it would work. But that's not the best way to do things because the file would get cluttered and hard to manage. Instead, we need multiple files.So, you'll use require to include different modules into your main file.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->As you saw in the last episode, we wrote our first line of code in Node.js. Now, we could just keep adding whatever we want to <code><!--[-->app.js<!--]--></code>, and technically, it would work. But that's not the best way to do things because the file would get cluttered and hard to manage. Instead, we need multiple files. Basically, there should be one main entry file that runs the code, and other files will be connected to it. So, you'll use <code><!--[-->require<!--]--></code> to include different modules into your main file.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->require<!--]--></a></h3><p><!--[-->So, when you use <code><!--[-->require<!--]--></code> to include a new module into another module, the code in the required module runs first, and then the rest of the code in your file executes. You can use the <code><!--[-->require<!--]--></code> keyword anywhere in your Node.js code.<!--]--></p><p><!--[--><strong><!--[-->Note:<!--]--></strong> You can’t directly access variables and functions from one module in another module just by using <code><!--[-->require<!--]--></code>. Even if the code runs, you can't directly access the code. For example, if a module <code><!--[-->sum.js<!--]--></code> has a function <code><!--[-->getSum()<!--]--></code>, and you import <code><!--[-->sum.js<!--]--></code>, you still can't access <code><!--[-->getSum()<!--]--></code> in your entry file. But why is that?<!--]--></p><p><!--[-->The reason is that Node.js modules are encapsulated, which means each module has its own scope. To access variables or functions from another module, you need to explicitly export them using <code><!--[-->module.exports<!--]--></code> or <code><!--[-->exports<!--]--></code>.<!--]--></p><p><!--[-->Modules protect their code by default. that one module be like:<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Arey aise kaise nahi btayega, So to know variable and functions of that module, you have to export and import in the file you  want to import.<!--]--></p><p><!--[-->sum module<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>I am sum module</span><span>'</span><span>);
</span></span><span><span>
</span></span><span><span> function</span><span> calculateSum</span><span>(</span><span>a</span><span>,</span><span>b</span><span>){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Sum is</span><span>"</span><span>,</span><span> a</span><span>+</span><span>b</span><span>);
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span>module</span><span>.</span><span>exports</span><span> =</span><span>calculateSum</span><span>  // the way you export  ( remember its export+s not export )
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->app..js ( entry file )<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> calculateSum</span><span>=</span><span> require</span><span>(</span><span>'</span><span>./sum.js</span><span>'</span><span>)</span><span>  // the way you import
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>I am entry files</span><span>"</span><span>);
</span></span><span><span>
</span></span><span><span>calculateSum</span><span>(</span><span>4</span><span>,</span><span>5</span><span>)</span><span>   // 9 is the output
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Now app.js be like<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->How to export multiple data from a module<!--]--></a></h3><p><!--[-->To export multiple things from a module in Node.js, you need to use an object to bundle them together and then import them as an object in another file. Here’s how you can do it with your <code><!--[-->multipleExport.js<!--]--></code> file:<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>var</span><span> name</span><span> =</span><span>'</span><span>Mohan</span><span>'
</span></span><span><span>
</span></span><span><span>function</span><span> sayHello</span><span>(</span><span>name</span><span>){
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>`</span><span>Hello </span><span>${</span><span>`</span><span>name</span><span>`</span><span>}</span><span>!</span><span>`</span><span>);
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span>module</span><span>.</span><span>exports</span><span>=</span><span> {</span><span>               // this is the way you export multiple things
</span></span><span><span>  sayHello</span><span>,
</span></span><span><span>  name</span><span>,
</span></span><span><span>}
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->and this is the way you import in app.js<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>// destructured : learn Destructuring
</span></span><span><span>const</span><span> {</span><span>sayHello</span><span>,</span><span> name</span><span>}</span><span> =</span><span> require</span><span>(</span><span>'</span><span>./multipleExport..js</span><span>'</span><span>)</span><span>   // this is the way you imported
</span></span><span><span>
</span></span><span><span>sayHello</span><span>(</span><span>'</span><span>Ashutosh</span><span>'</span><span>)</span><span>    // Hello Ashutosh
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Exported name is</span><span>"</span><span>,</span><span> name</span><span>);</span><span>   // Mohan
</span></span><span><span>
</span></span><span><span>// what will you get if you print modile
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>module</span><span>.</span><span>export</span><span>)</span><span> // {}  emoty object
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Common Js and ES Modules<!--]--></a></h3><p><!--[-->What we've learned so far with <strong><!--[-->require<!--]--></strong> and <strong><!--[-->module.exports<!--]--></strong> is called <strong><!--[-->CommonJS Modules<!--]--></strong> or <strong><!--[-->CJS<!--]--></strong>. This is the traditional module system used in Node.js. But there's another module system called <strong><!--[-->ES Modules<!--]--></strong> (or <strong><!--[-->ESM<!--]--></strong>, <strong><!--[--><code><!--[-->mjs<!--]--></code><!--]--></strong>), which is the standard for JavaScript modules in modern web development.<!--]--></p><p><!--[-->To use ES Modules in Node.js, you need to set your project to use modules. Create a <code><!--[-->package.json<!--]--></code> file and include <code><!--[-->"type": "module"<!--]--></code> in it. This tells Node.js to use the ES Module system for your project.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>// package.json
</span></span><span><span>{
</span></span><span><span>  "</span><span>type</span><span>"</span><span> :</span><span> "</span><span>module</span><span>"
</span></span><span><span>}
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->and now you can generally import and export as your front end projects<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>// in sum js
</span></span><span><span>export</span><span> function</span><span> calculateSum</span><span>(){....}
</span></span><span><span>
</span></span><span><span>// in app js
</span></span><span><span>import</span><span> {</span><span>calculateSum</span><span>) </span><span>from</span><span> './sum.js'</span><span>  or</span><span> './sum'
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Remember: By default, Node.js uses the CommonJS (CJS) module pattern, which is the older way of handling modules. According to the JavaScript foundation, the future will favor ES Modules (ESM), but currently, most of the industry still uses CJS. CJS is synchronous, meaning it requires all files before running the next line of code, whereas ES6 Modules can be asynchronous, offering better performance. CJS runs in a non-strict mode, while ESM runs in strict mode. ES6/ESM is the default in React and new libraries. Printing <code><!--[-->module.exports<!--]--></code> in CJS returns an empty object by default.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Node.js also comes with built-in modules that you can require and import directly into your code. These modules are pre-installed with Node.js and provide various functionalities like file handling, HTTP requests, and more.<!--]--></p><h3><a><!--[-->Definition of Module<!--]--></a></h3><p><!--[-->A module is essentially a collection of code that remains private unless explicitly exported. This means you can organize your code into different modules, keeping them isolated and secure, only sharing what's necessary by using the <code><!--[-->exports<!--]--></code> or <code><!--[-->module.exports<!--]--></code> keywords to make functions or variables accessible to other modules.<!--]--></p><hr><h3><a><!--[-->Keys to learn<!--]--></a></h3><ol><!--[--><li><!--[-->Object destructuring<!--]--></li><li><!--[-->Modules in JS<!--]--></li><li><!--[-->Strict mode<!--]--></li><li><!--[-->Difference between ES6 modules and CJS<!--]--></li><li><!--[-->In-built Modules<!--]--></li><!--]--></ol><h3><a><!--[-->Question to search<!--]--></a></h3><ol><!--[--><li><!--[-->Reasons why modules are protected by default ?<!--]--></li><li><!--[-->Whats the difference between require and import and export vs module.exports<!--]--></li><!--]--></ol><h3><a><!--[-->Key findings<!--]--></a></h3><ul><!--[--><li><!--[-->Modules are protected by default after requiring it will run bu can't be access until you export<!--]--></li><li><!--[-->These are protected to avoid conflicts from other modules<!--]--></li><li><!--[-->Common Js, EJS  / ESModule , ESM,  MJS ES6 Modules are two module patterns to access data within modules<!--]--></li><li><!--[-->In CJS code runs in non strict mode, but in ESM pattern code runs in strict mode<!--]--></li><!--]--></ul><p><!--[--><img><!--]--></p><p><!--[-->And thats all for this episode knowing modules and require<!--]--></p><p><!--[-->I'm Rahul Aher, and I'm writing digital notes on Node.js. If you enjoy these notes, please share them with your friends. If you find any errors or have improvements, feel free to contribute by forking the repo. If you're interested in writing the next episode's notes, <a><!--[--><!--[-->fork the repo and contribute<!--]--><!--]--></a>. Let's learn together! Also, please consider giving a star to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>. For any queries, <a><!--[--><!--[-->let's connect here<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Take care, Good Bye :) <a><!--[--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Let's write code]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-3/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-3/</guid>
            <pubDate>Mon, 07 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Systems Design is the process of defining the architecture, components, modules, interfaces, and data for a system to satisfy specified requirements. It involves translating user requirements into a detailed blueprint that guides the implementation phase. The goal is to create a well-organized and efficient structure that meets the intended purpose while considering factors like scalability, maintainability, and performance.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><h3><a><!--[-->Download Node.js<!--]--></a></h3><p><!--[-->Go to <a><!--[--><!--[-->Node.js<!--]--><!--]--></a> website and download the latest version,
If you are struggling in installing feel free to contact me , we can <a><!--[--><!--[-->schedule a 5min meeting<!--]--><!--]--></a> I will help you to download Node.js in to your system , Best way to download it , Go to Prebuilt installer and download a file and install it by executing by dowland file. There might be some issues specific to your system , do not panic google or gpt the error you are getting it will get solved , or I am here <a><!--[--><!--[-->Lets connect<!--]--><!--]--></a> :)<!--]--></p><h3><a><!--[-->Verify your installation<!--]--></a></h3><p><!--[-->If you have already installed or just installed check version of node into your system, open you command line or terminal of vs code or your favorite editor, One more thing if you have downloaded node.js NPM will get installed automatically into your system. What is NPM, it is a node package manager, to manage repository and host it, NPM took care of node in initial days you remember right ?<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>node</span><span> -</span><span>v</span><span>                //v18.12.0
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[--><img><!--]--></p><h3><a><!--[-->Let’s write code !<!--]--></a></h3><p><!--[-->Lets know about repl : <strong><!--[-->read-eval-print-loop.<!--]--></strong><!--]--></p><p><!--[-->if you just write node into your terminal and enter yoyou get entered some environment thats called repl, means read evaluate print and repeat it. so after writing node, you can write any code , and thats the node js runtime environment, let me bring one example with you you can see I have written node and then repl environment started and you can write JS code and its handled by v8 engines + node js and using c++ to run these 2+ 2 and other statement, Read more about <a><!--[--><!--[-->what is expression statement and syntax in JavaScript<!--]--><!--]--></a>, Note one more thing this repl env you see in your terminal is similar to your browsers console. both are almost same, but in browser has engine + browsers apis, terminal has engine (v8) + Node js APIs. Yeah, you have written first node js snippet, now lets move where we learn how to write node js code in repository.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Open you Code Editor<!--]--></a></h3><p><!--[-->Here i am using vs code and its also recommended by Akshay Saini and most of the frontend developers use it. so lets continue with it, there is something new in the market, <a><!--[--><!--[-->neovim<!--]--><!--]--></a> a new editor , google it. ok now open you vs code create a folder and create a file `app.js` and start writing JavaScript in it. After writing you can open terminal, there is short cut ( CTRL + backtick this is character present around Esc key ~ ` and it will open vs code terminal, if terminal is open , just write , I am also giving screen shot of the terminal<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>node</span><span> app</span><span>.</span><span>js
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[--><img><!--]--></p><h3><a><!--[-->Global Object server vs client<!--]--></a></h3><p><!--[-->In browsers when you type window you get access of multiple things its by browsers where you get power of fetching URL or som much things , but in server there is no browser thats why node js does not give you `widnow` as global object, but it has similar global object and its name is `global`  and this global is by node js not by v8, smiler in browsers window object is from browsers not from v8 and we know `setTimeout` is not from v8, v8 is just engine which runs js coide thats it, other things are from either browsers or node js if JS is running on server, JS engines follows ECMAScript and there is no setTimeout in ECMAScript. its part of global or widnow object.<!--]--></p><p><!--[-->If you will try to access window in node js you will get an error, same you will write global in chrome’s console you will get error , here is the screenshot when you type window in node js<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->But if you will write global you will get something like yoyou get when you console window in browsers , I am pasting both screenshots you can visualize for you reference. the first screenshot below is from the terminal of vs code and 2nd one is from the browsers console what yoyou get from inspect mode.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->this keyword in node js &amp; globalThis<!--]--></a></h3><p><!--[-->Here its remember to worth, this keyword by default in node js does not point to global object, as in browsers self, this, frame and window points to the window object, in node js by default this will point to {} and empty object. there is `globalThis` in ES20, is present in every browser and node js env wherever JS runs, so no confusion. So for window globalThis will point to window object, and for node js env it will point to global object on node js. so now Name is similar now across all js platforms,<!--]--></p><h3><a><!--[-->Curious google these keywords.<!--]--></a></h3><p><!--[-->Here are the new words and question that we can explore and these are  introduced in this episode, and some request from the creator.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->neovim<!--]--><!--]--></a> Editor ( substitute of vs code by microsoft)<!--]--></li><li><!--[-->repl<!--]--></li><li><!--[-->what is self this frame and why its points to window object in the browsers why ?<!--]--></li><li><!--[-->Web workers<!--]--></li><li><!--[-->globalThis<!--]--></li><li><!--[-->Object and something reference ( Google it)<!--]--></li><li><!--[-->Google history of globalThis why it came ?<!--]--></li><li><!--[-->read the node js code , go to github repo<!--]--></li><!--]--></ul><p><!--[--><img><!--]--></p><p><!--[-->And thats all for this episode and writing first line of code in node js<!--]--></p><p><!--[-->My name is Rahul Aher, and I am writing digital notes on node js, if you like the notes please share with you friends if anything wrong in the notes feel free to contribute and fork the repo right now. if you want to write next epidote note please <a><!--[--><!--[-->fork the repo and contribute<!--]--><!--]--></a> to it lets write and learn together, and In last I am just requesting to give a star 🌟 to <a><!--[--><!--[-->this repo<!--]--><!--]--></a>,<!--]--></p><p><!--[-->Take care, Good Bye :)<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JavaScript on Server]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-2/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-to-advance-nodejs-1-2/</guid>
            <pubDate>Sun, 06 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Discover how JavaScript powers server-side development with Node.js, transforming the way web applications are built. Node.js is a fast, scalable runtime that enables asynchronous, event-driven programming, making it ideal for real-time applications like chat apps and streaming services. You'll also learn to build server-side applications from scratch, manage dependencies with npm, and use frameworks like Express.js.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->As we know now JS can also run outside of browsers on server.<!--]--></p><h3><a><!--[-->What is server ?<!--]--></a></h3><p><!--[-->JavaScript runs on a server, but what exactly is a server? A server is simply a remote computer. When you run your React app locally, you call it a "local server" because your system is serving the page. A server is just a machine that provides a service or serves a page. If the computer providing this service is in a different location, like another country, it's called a remote or cloud server. Hope that makes sense! Now, let's move on…<!--]--></p><h3><a><!--[-->Client Server Communication<!--]--></a></h3><p><!--[-->Now, we know a server is just a computer located far from us that can handle requests. Suppose you're reading this blog on <a><!--[--><!--[-->heyashu.in<!--]--><!--]--></a>. When you type this URL into your browser, your local computer sends a request. The internet processes this request and directs it to the server. Every domain is linked to an IP address through DNS because humans can't easily remember IP addresses like "54.161.234.33." DNS translates the domain name to the correct IP address, and the server serves your page. Domain name is what you buy from GoDady and Hostinger and other websites.<!--]--></p><p><!--[-->Running JavaScript on a server is a big advantage because it allows a single developer with JavaScript knowledge to manage both the frontend and backend. If you know JavaScript, you can become a full-stack engineer. Don't worry; you'll get there with this course or by reading the notes!<!--]--></p><p><!--[--><img><!--]--></p><p><!--[--><a><!--[--><!--[-->Image Credit<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Story about JS Engine and Node.js<!--]--></a></h3><p><!--[-->You know how JavaScript runs in browsers? Guess, guess! It’s the JavaScript engine! 🧠 Every browser has its own JS engine. It takes the JS code and converts it. But wait, isn’t the JS engine also software? Yep, it’s a program! And what language is it written in? Hmm, what comes after C? D? Nope, it’s C++! 🤓. Most JS engines, like the V8 engine in Chrome, are written in C++. Check out the <a><!--[--><!--[-->GitHub repo of V8 JS engine<!--]--><!--]--></a>. Over 70% of the code is in C++! 🚀
<img><!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Image Credit :  <a><!--[--><!--[-->Guithub repo of v8 JS engine<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Story of v8 the chrome’s Engine<!--]--></a></h3><p><!--[-->V8 is written in C++ and helps run JavaScript and WebAssembly. It executes JavaScript code, but it’s not the whole story! 🤔 You can learn more about WebAssembly by Googling it. V8 follows <a><!--[--><!--[-->ECMA standards<!--]--><!--]--></a> (they decide what features to add!). Every JS engine is written differently, converting JS code to machine code.<!--]--></p><p><!--[-->Imagine this: <strong><!--[-->Your JS code<!--]--></strong> ➡️ <strong><!--[-->V8 Engine (C++)<!--]--></strong> ➡️ <strong><!--[-->Machine Code<!--]--></strong>.<!--]--></p><p><!--[-->And guess what? V8 can be embedded in any C++ application. So, if your system runs C++, you can run JavaScript through V8! 🖥️ But wait, if V8 is the hero, what’s Node.js? 🤷‍♂️ Isn’t V8 enough? Well, V8 is just for JavaScript (ECMAScript) and is designed for the web. Node.js wraps around V8, giving it superpowers! Node.js adds the ability to handle HTTP requests, access databases, and more. It makes JavaScript capable of doing things beyond just running code.<!--]--></p><p><!--[-->And remember, Node.js is also written in... what comes after C? Yep, C++! Not D, haha! So, Node.js is built in C++, with V8 as a dependency, making it all powerful! 💥<!--]--></p><h3><a><!--[-->Node.Js Runtime<!--]--></a></h3><p><!--[-->V8 + Node.js together create the <strong><!--[-->Node.js runtime<!--]--></strong> environment. This runtime allows JavaScript to run outside the browser, like on a server.<!--]--></p><p><!--[--><strong><!--[-->NOTE<!--]--></strong>: Node.js isn't just C++ code. About 25% of its code is written in JavaScript, which you can see in the screenshot above. It also uses various JavaScript APIs and capabilities, combining both C++ and JavaScript to give developers the power to build versatile applications. 🚀<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Why Node Js and v8 is written  C++ ?<!--]--></a></h3><p><!--[-->As we know, computers understand only binary code—010101010! This is the language that directly talks to computer hardware. If you’re lost, just remember: binary (010101) is called a low-level or machine-level language. 🖥️<!--]--></p><p><!--[-->Then came middle-level languages, also called assembly languages, like `ADD A, B`. Now, let's talk about high-level languages—what comes after B? Tell, tell! Don’t say B++! 😂 No such language! After B, it’s C, then C++, and then Java, JavaScript, etc. These high-level languages are human-friendly.<!--]--></p><p><!--[-->V8 and other JS engines take JavaScript (high-level) and convert it into machine code. If you’re curious, Google assembly languages and get familiar with high, middle, and low-level languages. Enjoy learning!<!--]--></p><p><!--[--><img><!--]--></p><p><!--[--><a><!--[--><!--[-->Image credit<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Browsers and their engines<!--]--></a></h3><p><!--[-->Here is an overview of popular browsers and their corresponding JavaScript engines:<!--]--></p><p><!--[--><img><!--]--></p><p><!--[--><a><!--[--><!--[-->Image Credit<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Other use full words<!--]--></a></h3><p><!--[-->Remember and google these words to know more<!--]--></p><ul><!--[--><li><!--[-->Web Assembly<!--]--></li><li><!--[-->Crosss Platform<!--]--></li><li><!--[-->ECMAScript ( ES6)<!--]--></li><li><!--[-->Guthub repo of node js and v8 its dependency<!--]--></li><li><!--[-->Arm Processor  and x86<!--]--></li><li><!--[-->Microprocessor<!--]--></li><!--]--></ul><p><!--[-->And that's a wrap for this episode! 🎬 Now take a break, spread the word, and share this blog with your friends! Don’t forget to ⭐️ star <a><!--[--><!--[-->this repo<!--]--><!--]--></a> if you found it helpful. And if you spot anything wrong, feel free to fork the repo and contribute!<!--]--></p><p><!--[-->Let's meet in the next episode!<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Server Sent Events - A Real time communication]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-2-4/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-2-4/</guid>
            <pubDate>Sun, 09 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Delve into Server-Sent Events. Understand how servers push data to clients, enabling continuous updates in frontend applications without the need for repeated requests, optimizing data streaming.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->Let’s talk about a modern way of real-time communication on the web: <strong><!--[-->Server-Sent Events (SSE)<!--]--></strong>. It’s supported by most modern browsers. So, let’s understand what this is.<!--]--></p><p><!--[-->First, a connection is made from the client, which is basically an HTTP connection. This connection is long-lived. Whenever new data is available on the server, it is sent to the client at regular intervals.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->But there are a few key terms we need to understand:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Long-lived connection<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Unidirectional connection<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Single HTTP connection<!--]--></strong><!--]--></li><!--]--></ul><p><!--[-->For example, on platforms like <strong><!--[-->LinkedIn<!--]--></strong> or <strong><!--[-->Twitter (X)<!--]--></strong>, you see notifications like <em><!--[-->"New post available"<!--]--></em> without refreshing the page. Similarly, in monitoring dashboards or notification systems, the client doesn’t have to do anything—the server pushes the updates automatically.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->So now you might be thinking, <strong><!--[-->how does this work?<!--]--></strong> How does the data come through, and do we need any third-party libraries? 🤔<!--]--></p><p><!--[-->Let’s discuss these things. We receive data in the form of <strong><!--[-->event streams<!--]--></strong>.<!--]--></p><h3><a><!--[-->🚀 How to Achieve This?<!--]--></a></h3><p><!--[-->Generally, on the <strong><!--[-->server side<!--]--></strong>, we expose an <strong><!--[-->endpoint<!--]--></strong> where we send data as a stream with the content type <code><!--[-->text/event-stream<!--]--></code>.<!--]--></p><p><!--[-->On the <strong><!--[-->frontend<!--]--></strong>, we make an HTTP API call and use the <strong><!--[--><code><!--[-->EventSource<!--]--></code><!--]--></strong> API, which is natively supported by modern browsers. This allows us to listen for events sent by the server.<!--]--></p><p><!--[-->For now, on the server, we’ve mimicked the process by sending data as an event stream every 5 seconds.<!--]--></p><h3><a><!--[-->📂 GitHub Repository<!--]--></a></h3><p><!--[-->I’ve added a GitHub repo where you can clone the project, follow the commands, and see it in your browser. But if you really want to understand how it works—whether you run the code or not—I’ve provided the core code below.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>git</span><span> clone</span><span> https</span><span>:</span><span>//github.com/ashumsd7/web-communication-techniques.git
</span></span><span><span>cd</span><span> web</span><span>-</span><span>communication</span><span>-</span><span>techniques
</span></span><span><span>npm</span><span> i
</span></span><span><span>npm</span><span> run</span><span> server</span><span>-</span><span>side</span><span>-</span><span>events
</span></span><span><span>-------------------
</span></span><span><span>Open</span><span> browser</span><span> and</span><span> type
</span></span><span><span>http</span><span>:</span><span>//localhost:3000/ // Observe network tab
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->💻 Server Code<!--]--></a></h3><p><!--[-->Here’s the server’s core logic:<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/sse</span><span>'</span><span>,</span><span> (</span><span>req</span><span>,</span><span> res</span><span>)</span><span> =&gt;</span><span> {
</span></span><span><span> // data is going  to be long live 
</span></span><span><span>  // data is going to be as event stream and no cache 
</span></span><span><span> res</span><span>.</span><span>setHeader</span><span>(</span><span>'</span><span>Content-Type</span><span>'</span><span>,</span><span>'</span><span>text/event-stream</span><span>'</span><span>)
</span></span><span><span> res</span><span>.</span><span>setHeader</span><span>(</span><span>'</span><span>Connection</span><span>'</span><span>,</span><span> '</span><span>keep-alive</span><span>'</span><span>)
</span></span><span><span> res</span><span>.</span><span>setHeader</span><span>(</span><span>'</span><span>Cache-Control</span><span>'</span><span>,</span><span> '</span><span>no-cache</span><span>'</span><span>)
</span></span><span><span> // logic of data is going to be here : Database call 
</span></span><span><span> res</span><span>.</span><span>write</span><span>(</span><span>'</span><span>data: Hello, client! This is a test message.</span><span>\n\n</span><span>'</span><span>);
</span></span><span><span>
</span></span><span><span>// after 5 seconds it will send random number 
</span></span><span><span>const</span><span> intervalId</span><span> =</span><span> setInterval</span><span>(()</span><span> =&gt;</span><span> {
</span></span><span><span>  res</span><span>.</span><span>write</span><span>(</span><span>`</span><span>data: Random number: </span><span>${</span><span>Math</span><span>.</span><span>floor</span><span>(</span><span>Math</span><span>.</span><span>random</span><span>()</span><span> *</span><span> 100</span><span>)</span><span>}</span><span>\n\n</span><span>`</span><span>);
</span></span><span><span> },</span><span> 5000</span><span>);
</span></span><span><span>
</span></span><span><span> req</span><span>.</span><span>on</span><span>(</span><span>'</span><span>close</span><span>'</span><span>,</span><span> ()</span><span> =&gt;</span><span> {
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>Client disconnected</span><span>'</span><span>);
</span></span><span><span>  clearInterval</span><span>(</span><span>intervalId</span><span>);
</span></span><span><span>  res</span><span>.</span><span>end</span><span>();
</span></span><span><span> });
</span></span><span><span>
</span></span><span><span>});
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So if you see above, we have an <strong><!--[-->endpoint<!--]--></strong> that will be called by the client. We are setting headers to:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Keep the connection alive<!--]--></strong> for a long-lived connection.<!--]--></li><li><!--[-->Set the <strong><!--[-->Content-Type<!--]--></strong> as <code><!--[-->text/event-stream<!--]--></code>.<!--]--></li><li><!--[-->Disable caching with <strong><!--[-->no-cache<!--]--></strong>.<!--]--></li><!--]--></ul><p><!--[-->Then, we are <strong><!--[-->writing the stream<!--]--></strong>, and after 5 seconds, we write again. So, any client that is <strong><!--[-->listening<!--]--></strong> to this will receive the data.<!--]--></p><p><!--[-->In between, you can add database logic or any other operations. This is just <strong><!--[-->mimicking the functionality<!--]--></strong> of Server-Sent Events (SSE).<!--]--></p><p><!--[-->Now, let’s look at the <strong><!--[-->frontend code<!--]--></strong>.<!--]--></p><h3><a><!--[-->💻 Frontend Code<!--]--></a></h3><p><!--[-->Here’s a snapshot of the frontend code where we use <strong><!--[--><code><!--[-->EventSource<!--]--></code><!--]--></strong> and wait for the data.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span> const</span><span> eventSource</span><span> =</span><span> new</span><span> EventSource</span><span>(</span><span>'</span><span>/sse</span><span>'</span><span>);
</span></span><span><span>
</span></span><span><span>    // Listen for messages
</span></span><span><span>    eventSource</span><span>.</span><span>onmessage</span><span> =</span><span> function</span><span>(</span><span>event</span><span>)</span><span> {
</span></span><span><span>      console</span><span>.</span><span>log</span><span>(</span><span>'</span><span>Event received:</span><span>'</span><span>,</span><span> event</span><span>.</span><span>data</span><span>);
</span></span><span><span>     
</span></span><span><span>      
</span></span><span><span>    };
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So, it’s <strong><!--[-->super easy<!--]--></strong>! We are just <strong><!--[-->listening<!--]--></strong> to the event and logging it to the console.<!--]--></p><p><!--[-->Now, you can also <strong><!--[-->display it on the DOM<!--]--></strong> of your web page.<!--]--></p><h3><a><!--[-->🔍 Let's Inspect It<!--]--></a></h3><p><!--[-->After running the server, open <strong><!--[--><a><!--[--><!--[-->localhost:3000<!--]--><!--]--></a><!--]--></strong> in your web browser.<!--]--></p><p><!--[-->You will see the incoming data in the <strong><!--[-->console<!--]--></strong> and, if implemented, on the <strong><!--[-->webpage<!--]--></strong> as well.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->A <strong><!--[-->long-lived<!--]--></strong> and <strong><!--[-->no-cache<!--]--></strong> request is being made. Right after that, you can see a tab labeled <strong><!--[-->"Event Stream"<!--]--></strong>, just like we had the <strong><!--[-->"Messages"<!--]--></strong> tab in WebSocket.<!--]--></p><p><!--[-->If you want to explore more about WebSocket, check out this blog:<!--]--></p><p><!--[-->👉 <strong><!--[--><a><!--[--><!--[-->Learn WebSocket<!--]--><!--]--></a><!--]--></strong><!--]--></p><p><!--[-->Here’s a <strong><!--[-->screenshot<!--]--></strong> showing what it looks like when we switch to the <strong><!--[-->Event Stream<!--]--></strong> tab:<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Now, if you look at the <strong><!--[-->UI<!--]--></strong>, you’ll see that the data is getting <strong><!--[-->populated in real-time<!--]--></strong>! 🚀<!--]--></p><p><!--[-->This happens seamlessly as the server pushes new events to the client without any need for manual refreshes. Pretty cool, right?<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[--><strong><!--[-->Challenges<!--]--></strong><!--]--></a></h3><ol><!--[--><li><!--[-->Browser compatibility<!--]--></li><li><!--[-->Number of connections (6-8 per domain)<!--]--></li><li><!--[-->Reconnection logic<!--]--></li><li><!--[-->Background tab behavior<!--]--></li><li><!--[-->Resource utilization<!--]--></li><li><!--[-->Sticky connections<!--]--></li><li><!--[-->Proxies and firewalls<!--]--></li><li><!--[-->Testing and load balancing<!--]--></li><li><!--[-->Efficient broadcasting<!--]--></li><!--]--></ol><p><!--[-->So, that’s all for this one! More topics will be discussed in upcoming blogs, including <strong><!--[-->Webhooks<!--]--></strong>. Stay tuned!<!--]--></p><p><!--[-->So that's all for this article. Let's meet in the next one.  Take care, bye-bye!<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Web Socket]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-2-3/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-2-3/</guid>
            <pubDate>Sat, 08 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Discover the power of Web Sockets. Learn to establish persistent connections facilitating real-time, bidirectional communication between clients and servers, enhancing interactivity and responsiveness in frontend applications.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->Let’s learn about WebSockets. This is another way to communicate from the client to the server, just like short polling and long polling, but it is more commonly used. It supports full-duplex communication. Now you might wonder, what is full-duplex? Full-duplex means data can be transmitted in both directions simultaneously—both parties can send data to each other without any interruption. Here, the parties are the backend and the frontend, or the client and the server.<!--]--></p><p><!--[-->Unlike short polling and long polling, which rely on HTTP, WebSockets are a completely different technology. It works based on a single, live TCP connection, allowing continuous and bidirectional communication.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->The first handshake happens over an HTTP connection, which is then upgraded to WebSockets using the <strong><!--[-->101 Switching Protocols<!--]--></strong> method. After this, a new connection is established, and a long-lived TCP connection is maintained. This connection stays open until it is explicitly closed from either the backend or the frontend. During this time, bidirectional data flows continuously.<!--]--></p><p><!--[-->We will discuss all of this in detail, but first, let’s build something and see it in action.<!--]--></p><h3><a><!--[-->Code<!--]--></a></h3><p><!--[-->We’ve built a simple chat UI with an input box, a send button, and a section to display messages. However, there are two key problems we need to solve:<!--]--></p><ul><!--[--><li><!--[-->When we type a message, it should be sent to the server.<!--]--></li><li><!--[-->Anyone who has opened <a><!--[--><!--[-->localhost:3000<!--]--><!--]--></a> should receive the new message without reloading the page. This is the essence of a duplex connection. Messages should flow seamlessly between clients. If someone types a message, it should appear on my screen, and vice versa.<!--]--></li><!--]--></ul><p><!--[-->How will we make this possible?<!--]--></p><h3><a><!--[--></a><a><!--[--><!--[-->Socket.io<!--]--><!--]--></a> / WebSockets<!--]--></h3><p><!--[-->We are going to use <strong><!--[-->Socket.io<!--]--></strong>, a technology designed for bidirectional and low-latency communication across platforms. You can read the documentation by <a><!--[--><!--[-->clicking here<!--]--><!--]--></a>.<!--]--></p><p><!--[-->Remember, WebSocket is also available as an <a><!--[--><!--[-->NPM library<!--]--><!--]--></a>, but here we’ll implement this using <a><!--[--><!--[-->Socket.io<!--]--><!--]--></a>.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>git clone https://github.com/ashumsd7/web-communication-techniques.git
</span></span><span><span>cd web-communication-techniques
</span></span><span><span>npm i
</span></span><span><span>npm run web socket
</span></span><span><span>-------------------
</span></span><span><span>Open browser and type
</span></span><span><span>http://localhost:3000/ // Observe network tab
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->After installing all the dependencies, you can close the repo. Then, go to this URL: <strong><!--[--><a><!--[--><!--[-->localhost<!--]--><!--]--></a><!--]--></strong>, and your application will be running after executing the following command:<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>npm</span><span> run</span><span> web-sockets
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Server Code<!--]--></a></h3><p><!--[-->If you’ve already installed and run your application, you should be familiar with everything. But if not, here’s the backend code. The backend handles the WebSocket connection to send and receive messages.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const</span><span> server</span><span> =</span><span> http</span><span>.</span><span>createServer</span><span>(</span><span>app</span><span>);
</span></span><span><span>
</span></span><span><span>// Step 0 : import socket.io
</span></span><span><span>const</span><span> {</span><span> Server</span><span> }</span><span> =</span><span> require</span><span>(</span><span>"</span><span>socket.io</span><span>"</span><span>);
</span></span><span><span>// creating Instance of socket.io
</span></span><span><span>const</span><span> io</span><span> =</span><span> new</span><span> Server</span><span>(</span><span>server</span><span>);
</span></span><span><span>
</span></span><span><span>// Step1 : when connection is established
</span></span><span><span>io</span><span>.</span><span>on</span><span>(</span><span>"</span><span>connection</span><span>"</span><span>,</span><span> (</span><span>socket</span><span>)</span><span> =&gt;</span><span> {
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>🚀 Connection Established</span><span>"</span><span>);
</span></span><span><span>
</span></span><span><span>  // Step1a : when we receive a message : Listening for the event
</span></span><span><span>  socket</span><span>.</span><span>on</span><span>(</span><span>"</span><span>chat-message</span><span>"</span><span>,</span><span> (</span><span>message</span><span>)</span><span> =&gt;</span><span> {
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>🚀 Message Received</span><span>"</span><span>,</span><span> message</span><span>);
</span></span><span><span>    // Step1aa : emit the message to all connected clients : Broadcasting the message
</span></span><span><span>    io</span><span>.</span><span>emit</span><span>(</span><span>"</span><span>chat-message</span><span>"</span><span>,</span><span> message</span><span>);
</span></span><span><span>  });
</span></span><span><span>
</span></span><span><span>  // Step1b : when connection is disconnected
</span></span><span><span>  socket</span><span>.</span><span>on</span><span>(</span><span>"</span><span>disconnect</span><span>"</span><span>,</span><span> ()</span><span> =&gt;</span><span> {
</span></span><span><span>    console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>🚀 Disconnected</span><span>"</span><span>);
</span></span><span><span>  });
</span></span><span><span>});
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Step 0: Imports and Creating the Server<!--]--></a></h3><p><!--[-->The first step is all about importing the necessary modules and creating a server.<!--]--></p><h3><a><!--[-->Step 1: Establishing the Connection<!--]--></a></h3><p><!--[-->When the connection is established, you’ll see <strong><!--[-->"Connection Established"<!--]--></strong> in the console. Inside the callback function where you receive the <code><!--[-->socket<!--]--></code> as a parameter, you can listen for messages.<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Step 1a:<!--]--></strong> Use <code><!--[-->socket.on('chat-message')<!--]--></code> to listen for the <code><!--[-->'chat-message'<!--]--></code> event. This event name should be the same on the client side while sending the message. We’ll see that client-side code soon.<!--]--></li><li><!--[--><strong><!--[-->Step 1aa:<!--]--></strong> Once you receive the message, you can broadcast it to all connected clients using <code><!--[-->socket.emit()<!--]--></code>. This ensures that every client gets notified of the new message.<!--]--></li><li><!--[--><strong><!--[-->Step 1b:<!--]--></strong> Finally, handle the disconnection using <code><!--[-->socket.on('disconnect')<!--]--></code>. This will trigger when a connection gets disconnected.<!--]--></li><!--]--></ul><p><!--[-->Now, let’s see how it works on the frontend.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Now, let's dive into the code and understand the core logic of WebSockets.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>const socket = io();
</span></span><span><span>
</span></span><span><span>    console.log("🚀 Socket From frontend", socket);
</span></span><span><span>
</span></span><span><span>    function sendMessage() {
</span></span><span><span>      const message = messageInput.value.trim();
</span></span><span><span>      if (message) {
</span></span><span><span>        console.log('Sending message:', message);
</span></span><span><span>        // emiting message to the server
</span></span><span><span>        socket.emit("chat-message", message);
</span></span><span><span>        // Add message to messages div
</span></span><span><span>  
</span></span><span><span>      }
</span></span><span><span>    }
</span></span><span><span>
</span></span><span><span>    // listening for the message from the server :auto receive the message
</span></span><span><span>    socket.on("chat-message", (message) =&gt; {
</span></span><span><span>      console.log("🚀 Message Received From Server", message);
</span></span><span><span>      // Add message to messages div
</span></span><span><span>      const messageElement = document.createElement('div');
</span></span><span><span>      messageElement.className = 'message';
</span></span><span><span>      messageElement.textContent = message;
</span></span><span><span>      messagesDiv.appendChild(messageElement);
</span></span><span><span>      // Auto scroll to bottom
</span></span><span><span>      messagesDiv.scrollTop = messagesDiv.scrollHeight;
</span></span><span><span>
</span></span><span><span>      // Clear input
</span></span><span><span>      messageInput.value = '';
</span></span><span><span>    });
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So, if you look above, you will see that you have one active connection with the CDN in the HTML part. When you type and send a message in the <code><!--[-->sendMessage<!--]--></code> function, you emit a message to the server. You can see that the same event name, <code><!--[-->chat-message<!--]--></code>, is used here. Now, you can see one more <code><!--[-->.on<!--]--></code> event, as we've seen in the server code. This event gets fired automatically when the server emits it. In that <code><!--[-->.on<!--]--></code> message, we are just appending the received message to the HTML. Now, let's see the console to understand how it works.<!--]--></p><h3><a><!--[-->Inspection<!--]--></a></h3><p><!--[-->Let's check the browser's dev tools. When you first visit <a><!--[--><!--[-->localhost:3000<!--]--><!--]--></a>, in the screenshot below, you can see <code><!--[-->101 Switching Protocols<!--]--></code>, where the HTTPS connection gets upgraded to WebSocket. This connection is long-lived until either party disconnects.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->If you switch to the messages tab and then send a message from the UI, you will see the message count and the actual message in the screenshot below. Now, notice that this is a WebSocket connection, not an HTTPS connection anymore.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Now, the question arises: is this really worth it? You’re sending messages to everyone, so how does exclusivity work? Yes, this is not limited—WebSocket is vast. You can create rooms, send requests to only one user (one-to-one connection), group connections, and more. This was just an overview, so keep exploring and learning.<!--]--></p><p><!--[-->Remember: as the web has <code><!--[-->https<!--]--></code> and <code><!--[-->http<!--]--></code>, similarly with WebSockets, you have <code><!--[-->ws://<!--]--></code> and <code><!--[-->wss://<!--]--></code>.<!--]--></p><p><!--[-->There is also a concept of framing, where we send data in chunks.<!--]--></p><h3><a><!--[-->Use Cases<!--]--></a></h3><ul><!--[--><li><!--[-->Chat apps<!--]--></li><li><!--[-->Analytics<!--]--></li><li><!--[-->Financial trading<!--]--></li><li><!--[-->Online gaming<!--]--></li><li><!--[-->Collaborations<!--]--></li><!--]--></ul><h3><a><!--[-->Challenges<!--]--></a></h3><ul><!--[--><li><!--[-->It uses a lot of resources based on the number of users due to long-lived connections.<!--]--></li><li><!--[-->Connection limits.<!--]--></li><li><!--[-->Strict sessions (read about load balancers—Google it).<!--]--></li><li><!--[-->Authentication can be a challenge (example it).<!--]--></li><li><!--[-->Cache layers.<!--]--></li><li><!--[-->Scaling issues (not as good as long-polling and short-polling).<!--]--></li><li><!--[-->Testing and debugging.<!--]--></li><li><!--[-->Backward compatibility: what if the connection gets disturbed?<!--]--></li><li><!--[-->Resource cleanup.<!--]--></li><li><!--[--><!--]--></li><!--]--></ul><p><!--[-->Now, that's all for this blog. See you in the next one!<!--]--></p><p><!--[-->Also checkout :<!--]--></p><ul><!--[--><li><!--[--><strong><!--[--><a><!--[--><!--[-->How the web works<!--]--><!--]--></a><!--]--></strong><!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->Communication Protocols<!--]--><!--]--></a><!--]--></strong><!--]--></li><li><!--[--><strong><!--[--><a><!--[--><!--[-->HTTP Headers Methods Status Codes<!--]--><!--]--></a><!--]--></strong><!--]--></li><!--]--></ul><p><!--[-->So that's all for this article. Let's meet in the next one.  Take care, bye-bye!<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why GraphQL over Rest APIs]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-1-4/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-1-4/</guid>
            <pubDate>Tue, 04 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Many companies today use GraphQL. In this blog, we’ll explore what GraphQL is, its benefits, and why it’s so popular. Suppose your app needs information about continents, countries, and languages. If you’re using REST APIs, you’ll likely call multiple APIs to fetch this data and then organize it for your frontend. Be patient—it’s not an Instagram Reel, but for serious learners, it’ll be worth the read.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->Many companies today use <strong><!--[-->GraphQL<!--]--></strong>. In this blog, we’ll explore what GraphQL is, its benefits, and why it’s so popular. Be patient—it’s not an Instagram Reel, but for serious learners, it’ll be worth the read.<!--]--></p><p><!--[-->Here’s what we’ll cover:<!--]--></p><ol><!--[--><li><!--[-->What is GraphQL?<!--]--></li><li><!--[-->Why GraphQL? Its benefits<!--]--></li><li><!--[-->REST vs. GraphQL<!--]--></li><li><!--[-->Building blocks of GraphQL<!--]--></li><li><!--[-->Building a GraphQL app<!--]--></li><li><!--[-->Calling GraphQL from the client<!--]--></li><li><!--[-->Tools provided by the GraphQL community<!--]--></li><li><!--[-->Advanced features that make GraphQL powerful<!--]--></li><!--]--></ol><h3><a><!--[-->What is GraphQL?<!--]--></a></h3><p><!--[-->Suppose your app needs information about continents, countries, and languages. If you’re using REST APIs, you’ll likely call multiple APIs to fetch this data and then organize it for your frontend.<!--]--></p><p><!--[-->(Read: <a><!--[--><!--[-->Deep Dive into REST APIs<!--]--><!--]--></a>)<!--]--></p><p><!--[-->In GraphQL, however, you define <strong><!--[-->exactly<!--]--></strong> what data you need, and the <strong><!--[-->GraphQL server acts as a middle layer<!--]--></strong> to handle the request efficiently. This means the frontend gets only the data it asks for, reducing unnecessary load and improving performance.<!--]--></p><p><!--[-->Let’s see how!<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->More About GraphQL<!--]--></a></h3><p><!--[-->GraphQL stands for <strong><!--[-->Graph Query Language<!--]--></strong>.<!--]--></p><p><!--[-->Imagine a graph where continents have countries, and countries have languages. It’s like a hierarchy where everything is interconnected, forming a graph structure. If you observe closely, almost everything on the planet is connected in some way, just like a graph.<!--]--></p><p><!--[-->This is why GraphQL is so powerful—it mirrors the way data is naturally structured. It allows us to efficiently query and showcase only the specific data we need in a frontend web app.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->GraphQL empowers the client by giving it the <strong><!--[-->flexibility and capability<!--]--></strong> to request exactly what data is needed—no more, no less.<!--]--></p><p><!--[-->The biggest benefit of GraphQL is that it allows you to fetch only the required information. For example, in the screenshot below, the client requests only <code><!--[-->firstName<!--]--></code> and <code><!--[-->lastName<!--]--></code>, and that’s exactly what the response includes.<!--]--></p><p><!--[-->Even if additional information like <code><!--[-->userVillage<!--]--></code> or <code><!--[-->pincode<!--]--></code> is available on the server, it won’t be sent unless explicitly requested. This avoids unnecessary data transfer, keeping the frontend clean and optimized.<!--]--></p><p><!--[-->This level of control is one of the key advantages of GraphQL over REST APIs.<!--]--></p><p><!--[-->You can try it out yourself using tools like GraphQL playground or GraphiQL!<!--]--></p><p><!--[--><a><!--[--><!--[-->https://studio.apollographql.com/sandbox/explorer<!--]--><!--]--></a><!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Benefits of GraphQL<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->Avoids Overfetching:<!--]--></strong> Fetch only the data you need.<!--]--></li><li><!--[--><strong><!--[-->Avoids Underfetching:<!--]--></strong> Retrieve all required data in a single request.<!--]--></li><li><!--[--><strong><!--[-->Better Mobile Performance:<!--]--></strong> Mobile apps often need less data, and GraphQL ensures only the necessary information is sent.<!--]--></li><li><!--[--><strong><!--[-->Efficiency and Precision:<!--]--></strong> Optimized data fetching leads to efficient performance.<!--]--></li><li><!--[--><strong><!--[-->Declarative Data Fetching:<!--]--></strong> The frontend is in control of what data is needed.<!--]--></li><li><!--[--><strong><!--[-->Structured and Hierarchical Data:<!--]--></strong> GraphQL organizes data in a structured and logical way.<!--]--></li><li><!--[--><strong><!--[-->Strongly Typed Language:<!--]--></strong> GraphQL uses a schema that defines data types, reducing errors.<!--]--></li><li><!--[--><strong><!--[-->Fewer Mistakes:<!--]--></strong> With type checking, there’s less room for errors in requests and responses.<!--]--></li><li><!--[--><strong><!--[-->Introspection:<!--]--></strong> Unlike REST APIs, where you need to document endpoints, GraphQL comes with built-in introspection for easy exploration.<!--]--></li><li><!--[--><strong><!--[-->Real-Time Capabilities:<!--]--></strong> GraphQL supports subscriptions for real-time updates.<!--]--></li><!--]--></ol><h3><a><!--[-->REST vs. GraphQL Comparison<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Data Fetching<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Requires multiple endpoints.<!--]--></li><li><!--[-->GraphQL: Uses a single endpoint for all data.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Request Structure<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Fixed structure with HTTP methods.<!--]--></li><li><!--[-->GraphQL: Flexible, using queries and mutations.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Overfetching/Underfetching<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Common issue.<!--]--></li><li><!--[-->GraphQL: Solved with precise queries.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Response Size<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Fixed.<!--]--></li><li><!--[-->GraphQL: Flexible.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Versioning<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Explicit versioning required.<!--]--></li><li><!--[-->GraphQL: No versioning needed due to flexible schema.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Schema Definition<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Not well-defined.<!--]--></li><li><!--[-->GraphQL: Strongly defined schema.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Real-Time Capabilities<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Polling and WebSockets.<!--]--></li><li><!--[-->GraphQL: Built-in subscriptions.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Tools<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Postman.<!--]--></li><li><!--[-->GraphQL: GraphQL Playground.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Caching<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Relies on HTTP caching.<!--]--></li><li><!--[-->GraphQL: Fine-grained caching possible.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Client Control<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Server defines the response.<!--]--></li><li><!--[-->GraphQL: Client decides the response.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Adoption<!--]--></strong>:
<ul><!--[--><li><!--[-->REST API: Widely adopted.<!--]--></li><li><!--[-->GraphQL: Rapidly growing in popularity.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ul><h3><a><!--[-->More About GraphQL<!--]--></a></h3><p><!--[-->GraphQL has two key components:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Creator (Server):<!--]--></strong> Responsible for providing the data via GraphQL queries and mutations.<!--]--></li><li><!--[--><strong><!--[-->Consumer (Client):<!--]--></strong> Sends requests to the server and consumes the data.<!--]--></li><!--]--></ol><p><!--[-->You can use a simple HTTP fetch request to interact with GraphQL. However, to fully leverage its benefits, it’s recommended to use libraries like <strong><!--[-->Apollo Client<!--]--></strong> or <strong><!--[-->graphql-hooks<!--]--></strong>.<!--]--></p><p><!--[-->Explore tools and libraries here: <a><!--[--><!--[-->GraphQL Community Tools<!--]--><!--]--></a><!--]--></p><p><!--[-->On the server side, you can use GraphQL server libraries.<!--]--></p><h3><a><!--[-->GraphQL Building Blocks<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->Schema/Types:<!--]--></strong> Defines the structure of the data.<ul><!--[--><li><!--[--><strong><!--[-->Scalar Types:<!--]--></strong> Basic types like <code><!--[-->Int<!--]--></code>, <code><!--[-->String<!--]--></code>, <code><!--[-->Boolean<!--]--></code>, and <code><!--[-->ID<!--]--></code>.<!--]--></li><li><!--[--><strong><!--[-->Custom Types:<!--]--></strong> Define complex types like <code><!--[-->Country<!--]--></code>, <code><!--[-->Language<!--]--></code>, etc., based on your data.<!--]--></li><!--]--></ul><br>GraphQL is a strongly typed language, and its schema is also known as <strong><!--[-->SDL (Schema Definition Language)<!--]--></strong>.<!--]--></li><li><!--[--><strong><!--[-->Query/Mutations:<!--]--></strong><ul><!--[--><li><!--[--><strong><!--[-->Query:<!--]--></strong> Used to fetch data.<!--]--></li><li><!--[--><strong><!--[-->Mutation:<!--]--></strong> Used to update or modify data.<!--]--></li><!--]--></ul><br>Syntax for these will be covered in detail later.<!--]--></li><li><!--[--><strong><!--[-->Resolver:<!--]--></strong> Contains the logic to fetch data from the database or perform updates.<!--]--></li><!--]--></ol><h3><a><!--[-->Creating a GraphQL Server<!--]--></a></h3><p><!--[-->To create a server, you can use various libraries. For example, <strong><!--[-->Apollo Server<!--]--></strong> is a popular choice. Follow this guide to get started: <a><!--[--><!--[-->Apollo Server Documentation<!--]--><!--]--></a><!--]--></p><p><!--[-->Alternatively, you can try the following commands to set up a basic GraphQL server:<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>mkdir</span><span> graphql</span><span>-</span><span>server</span><span>-</span><span>example
</span></span><span><span>cd</span><span> graphql</span><span>-</span><span>server</span><span>-</span><span>example
</span></span><span><span>npm</span><span> init</span><span> --</span><span>yes</span><span> 
</span></span><span><span>npm</span><span> pkg</span><span> set</span><span> type</span><span>=</span><span>"</span><span>module</span><span>"
</span></span><span><span>npm</span><span> install</span><span> @</span><span>apollo</span><span>/</span><span>server</span><span> graphql
</span></span><span><span>
</span></span><span><span>// create a index.js file 
</span></span><span><span>// and wirte a script in package.json   "start": "node index.js"
</span></span><span><span>
</span></span><span><span>// then paste this in index.js
</span></span><span><span>
</span></span><span><span>// The ApolloServer constructor requires two parameters: your schema
</span></span><span><span>import</span><span> {</span><span> ApolloServer</span><span> }</span><span> from</span><span> "</span><span>@apollo/server</span><span>"</span><span>;
</span></span><span><span>import</span><span> {</span><span> startStandaloneServer</span><span> }</span><span> from</span><span> '</span><span>@apollo/server/standalone</span><span>'</span><span>;
</span></span><span><span>
</span></span><span><span>// A schema is a collection of type definitions (hence "typeDefs")
</span></span><span><span>// that together define the "shape" of queries that are executed against
</span></span><span><span>// your data.
</span></span><span><span>const</span><span> typeDefs</span><span> =</span><span> `</span><span>#graphql
</span></span><span><span>
</span></span><span><span># Comments in GraphQL strings (such as this one) start with the hash (#) symbol.
</span></span><span><span>
</span></span><span><span># This "Book" type defines the queryable fields for every book in our data source.
</span></span><span><span>type Book {
</span></span><span><span>  id: ID!
</span></span><span><span>  name: String!
</span></span><span><span>  author: String!
</span></span><span><span> 
</span></span><span><span>}
</span></span><span><span>  type Author{
</span></span><span><span>  id: ID!
</span></span><span><span>  name: String!
</span></span><span><span>  books: [Book]
</span></span><span><span>  }
</span></span><span><span>
</span></span><span><span># The "Query" type is special: it lists all of the available queries that
</span></span><span><span># clients can execute, along with the return type for each. In this
</span></span><span><span># case, the "books" query returns an array of zero or more Books (defined above).
</span></span><span><span>type Query {
</span></span><span><span>  authors: [Author]
</span></span><span><span>  books: [Book]
</span></span><span><span>}
</span></span><span><span>`</span><span>;
</span></span><span><span>
</span></span><span><span>const</span><span> books</span><span> =</span><span> [
</span></span><span><span>  {
</span></span><span><span>    id</span><span>:</span><span> 1</span><span>,
</span></span><span><span>    name</span><span>:</span><span> '</span><span>The Awakening</span><span>'</span><span>,
</span></span><span><span>    author</span><span>:</span><span> '</span><span>Kate Chopin</span><span>'</span><span>,
</span></span><span><span>  },
</span></span><span><span>  {
</span></span><span><span>    id</span><span>:</span><span> 2</span><span>,
</span></span><span><span>    name</span><span>:</span><span> '</span><span>City of Glass</span><span>'</span><span>,
</span></span><span><span>    author</span><span>:</span><span> '</span><span>Paul Auster</span><span>'</span><span>,
</span></span><span><span>  },
</span></span><span><span>];
</span></span><span><span>
</span></span><span><span>const</span><span> authors</span><span> =</span><span> [
</span></span><span><span>  {
</span></span><span><span>    id</span><span>:</span><span> 1</span><span>,
</span></span><span><span>    name</span><span>:</span><span> '</span><span>John Doe</span><span>'</span><span>,
</span></span><span><span>    books</span><span>:</span><span> [</span><span>1</span><span>,</span><span> 2</span><span>],
</span></span><span><span>  },
</span></span><span><span>];
</span></span><span><span>
</span></span><span><span>const</span><span> resolvers</span><span> =</span><span> {
</span></span><span><span>  Query</span><span>:</span><span> {
</span></span><span><span>    books</span><span>:</span><span> ()</span><span> =&gt;</span><span> books</span><span>,
</span></span><span><span>    authors</span><span>:</span><span> ()</span><span> =&gt;</span><span> authors</span><span>,
</span></span><span><span>  },
</span></span><span><span>};
</span></span><span><span>
</span></span><span><span>// definition and your set of resolvers.
</span></span><span><span>const</span><span> server</span><span> =</span><span> new</span><span> ApolloServer</span><span>({
</span></span><span><span>  typeDefs</span><span>,
</span></span><span><span>  resolvers</span><span>,
</span></span><span><span>});
</span></span><span><span>
</span></span><span><span>// Passing an ApolloServer instance to the `startStandaloneServer` function:
</span></span><span><span>//  1. creates an Express app
</span></span><span><span>//  2. installs your ApolloServer instance as middleware
</span></span><span><span>//  3. prepares your app to handle incoming requests
</span></span><span><span>const</span><span> {</span><span> url</span><span> }</span><span> =</span><span> await</span><span> startStandaloneServer</span><span>(</span><span>server</span><span>,</span><span> {
</span></span><span><span>  listen</span><span>:</span><span> {</span><span> port</span><span>:</span><span> 4000</span><span> },
</span></span><span><span>});
</span></span><span><span>
</span></span><span><span>console</span><span>.</span><span>log</span><span>(</span><span>`</span><span>🚀  Server ready at: </span><span>${</span><span>url</span><span>}</span><span>`</span><span>);
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Overall Flow of GraphQL<!--]--></a></h3><p><!--[-->In GraphQL, you work with:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Type Definitions (TypeDefs):<!--]--></strong> Where you define the types, queries, and mutations.<!--]--></li><li><!--[--><strong><!--[-->Resolvers:<!--]--></strong> For each query or mutation, you create a function with the same name as defined in your schema.<!--]--></li><!--]--></ol><p><!--[-->The <strong><!--[-->Apollo Server<!--]--></strong> acts as the bridge that connects these and ensures everything works together seamlessly.<!--]--></p><p><!--[-->When you run <code><!--[-->npm start<!--]--></code>, a GraphQL Playground opens where you can test your queries and fetch the data you need.<!--]--></p><p><!--[-->Here’s a screenshot for reference: (Insert your screenshot here)<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->If you inspect the network tab and click the play button to run a query, you'll see headers and payload, similar to REST APIs.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>fetch</span><span>(</span><span>"</span><span>http://localhost:4000/</span><span>"</span><span>,</span><span> {
</span></span><span><span>  "</span><span>headers</span><span>"</span><span>:</span><span> {
</span></span><span><span>    "</span><span>accept</span><span>"</span><span>:</span><span> "</span><span>*/*</span><span>"</span><span>,
</span></span><span><span>    "</span><span>accept-language</span><span>"</span><span>:</span><span> "</span><span>en-US,en;q=0.9,hi-IN;q=0.8,hi;q=0.7</span><span>"</span><span>,
</span></span><span><span>    "</span><span>content-type</span><span>"</span><span>:</span><span> "</span><span>application/json</span><span>"</span><span>,
</span></span><span><span>    "</span><span>sec-ch-ua</span><span>"</span><span>:</span><span> "</span><span>\"</span><span>Google Chrome</span><span>\"</span><span>;v=</span><span>\"</span><span>131</span><span>\"</span><span>, </span><span>\"</span><span>Chromium</span><span>\"</span><span>;v=</span><span>\"</span><span>131</span><span>\"</span><span>, </span><span>\"</span><span>Not_A Brand</span><span>\"</span><span>;v=</span><span>\"</span><span>24</span><span>\"</span><span>"</span><span>,
</span></span><span><span>    "</span><span>sec-ch-ua-mobile</span><span>"</span><span>:</span><span> "</span><span>?1</span><span>"</span><span>,
</span></span><span><span>    "</span><span>sec-ch-ua-platform</span><span>"</span><span>:</span><span> "</span><span>\"</span><span>Android</span><span>\"</span><span>"</span><span>,
</span></span><span><span>    "</span><span>sec-fetch-dest</span><span>"</span><span>:</span><span> "</span><span>empty</span><span>"</span><span>,
</span></span><span><span>    "</span><span>sec-fetch-mode</span><span>"</span><span>:</span><span> "</span><span>cors</span><span>"</span><span>,
</span></span><span><span>    "</span><span>sec-fetch-site</span><span>"</span><span>:</span><span> "</span><span>same-origin</span><span>"
</span></span><span><span>  },
</span></span><span><span>  "</span><span>referrer</span><span>"</span><span>:</span><span> "</span><span>http://localhost:4000/</span><span>"</span><span>,
</span></span><span><span>  "</span><span>referrerPolicy</span><span>"</span><span>:</span><span> "</span><span>strict-origin-when-cross-origin</span><span>"</span><span>,
</span></span><span><span>  "</span><span>body</span><span>"</span><span>:</span><span> "</span><span>{</span><span>\"</span><span>query</span><span>\"</span><span>:</span><span>\"</span><span>query ExampleQuery {</span><span>\\</span><span>n  books {</span><span>\\</span><span>n    id</span><span>\\</span><span>n    name</span><span>\\</span><span>n  }</span><span>\\</span><span>n}</span><span>\\</span><span>n</span><span>\"</span><span>,</span><span>\"</span><span>variables</span><span>\"</span><span>:{},</span><span>\"</span><span>operationName</span><span>\"</span><span>:</span><span>\"</span><span>ExampleQuery</span><span>\"</span><span>}</span><span>"</span><span>,
</span></span><span><span>  "</span><span>method</span><span>"</span><span>:</span><span> "</span><span>POST</span><span>"</span><span>,
</span></span><span><span>  "</span><span>mode</span><span>"</span><span>:</span><span> "</span><span>cors</span><span>"</span><span>,
</span></span><span><span>  "</span><span>credentials</span><span>"</span><span>:</span><span> "</span><span>include</span><span>"
</span></span><span><span>});
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So, like this, you can create relationships between different data sets. You need to learn GraphQL properly, but the goal of this note was to make you familiar with these topics and help you become interview-ready when someone asks you about the difference between REST APIs and GraphQL. Similarly, you can add mutations into resolvers and typeDefs to handle updates.<!--]--></p><p><!--[-->For the frontend, there are client libraries like Apollo Client that can make things more efficient. There’s a lot more to learn, but that’s all for now.<!--]--></p><p><!--[-->Hey your feedback si required for me , please give  <a><!--[--><!--[-->this repo<!--]--><!--]--></a> a star 🌟 if you liked the blog
if you want to contribute in it please feel free to fork , You can see github link on top right corner of top bar or  <a><!--[--><!--[-->click here<!--]--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HTTP Headers Methods Status Codes and Rest API Deep Dive]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-1-3/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-1-3/</guid>
            <pubDate>Mon, 03 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[If you are a junior developer, a senior developer, or just a complete newbie, this is going to be a great place to learn about REST APIs—what they are, why they are used, and how they work. This is going to be a long blog, so it’s for serious readers. If you prefer short TikTok-like videos for instant information, this might not be for you. Let’s get started!]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->If you are a junior developer, a senior developer, or just a complete newbie, this is going to be a great place to learn about REST APIs—what they are, why they are used, and how they work. This is going to be a long blog, so it’s for serious readers. If you prefer short TikTok-like videos for instant information, this might not be for you. Let’s get started!<!--]--></p><h3><a><!--[-->What We Will Learn in This Blog<!--]--></a></h3><ul><!--[--><li><!--[-->What is a REST API?<!--]--></li><li><!--[-->Why do we use it?<!--]--></li><li><!--[-->The building blocks:<ul><!--[--><li><!--[-->Understanding URLs<!--]--></li><li><!--[-->HTTP Methods<!--]--></li><li><!--[-->Headers<!--]--></li><li><!--[-->Responses<!--]--></li><li><!--[-->Status Codes<!--]--></li><!--]--></ul><!--]--></li><li><!--[-->Building an application<!--]--></li><li><!--[-->Postman usage<!--]--></li><li><!--[-->HTTP 1/2/3<!--]--></li><li><!--[-->Best practices<!--]--></li><li><!--[-->Advanced topics<!--]--></li><!--]--></ul><h3><a><!--[-->What is a REST API?<!--]--></a></h3><p><!--[-->First, let’s understand the frontend and backend in web development using the example of a kitchen.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Overview<!--]--></a></h3><p><!--[-->The frontend is like the dining area where people eat, and the backend is like the kitchen where everything is prepared. Both are in the same place in a basic setup. Now, imagine if you were handling 100 orders, everything might still run smoothly. But if online orders suddenly increase drastically, things can get messy. Management becomes a problem.<!--]--></p><p><!--[-->What’s the best solution? Move the kitchen to a separate place. Now, you can simply ask for what you need to serve. The kitchen prepares the food and sends it to the dining area. In this setup, there is a communicator (like a waiter) who takes the client's order and ensures the backend kitchen prepares it.<!--]--></p><ul><!--[--><li><!--[-->If the frontend and backend are in the same place, it’s called a <strong><!--[-->1-tier architecture<!--]--></strong>.<!--]--></li><li><!--[-->If the frontend (dining area) and backend (kitchen) are in different places, it’s called a <strong><!--[-->2-tier architecture<!--]--></strong>.<!--]--></li><!--]--></ul><p><!--[-->But what happens if the kitchen also has to manage raw materials and storage? It can still get clumsy when scaling. So, the best solution is to move the storage (the database, in web terms) to another place, separate from the kitchen.<!--]--></p><p><!--[-->Now, we have three separate blocks: the dining area (frontend), the kitchen (backend), and the storage (database). This is called a <strong><!--[-->3-tier architecture<!--]--></strong>.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->So, coming to the API part—communication between the client (frontend) and server (backend) happens through an intermediary, much like how a waiter communicates between customers and the kitchen. This intermediary is called an <strong><!--[-->API (Application Programming Interface)<!--]--></strong>. There are different types of APIs, and one of the most widely used is the <strong><!--[-->REST API<!--]--></strong>.<!--]--></p><p><!--[--><strong><!--[-->REST (Representational State Transfer)<!--]--></strong>: It refers to transferring the "state" of a resource in a representational format. Essentially, the data (state) is represented and transferred using APIs.<!--]--></p><h3><a><!--[-->My Rules and Protocols<!--]--></a></h3><p><!--[-->Think about how we present different dishes in a restaurant. Each dish is served in a specific way: momos can’t be served in a bowl meant for dal, and roti can’t be served in a burger box. Similarly, in web communication, there are predefined rules and standards.<!--]--></p><p><!--[-->In web terms, these rules are called <strong><!--[-->protocols<!--]--></strong>, and one such protocol is <strong><!--[-->HTTP (HyperText Transfer Protocol)<!--]--></strong>. It’s the standard set of rules for transferring data over a network.<!--]--></p><h3><a><!--[-->Benefits of REST APIs<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Ease of Use<!--]--></strong>: REST APIs are simple and straightforward to implement.<!--]--></li><li><!--[--><strong><!--[-->Stateless<!--]--></strong>: The server does not retain any previous information; it simply processes the current request and provides a response.<!--]--></li><li><!--[--><strong><!--[-->Scalability<!--]--></strong>: REST APIs can easily handle increasing loads and scale effectively.<!--]--></li><li><!--[--><strong><!--[-->Flexibility<!--]--></strong>: Supports different formats like JSON or XML, making it highly adaptable.<!--]--></li><li><!--[--><strong><!--[-->Uniform Interface<!--]--></strong>: Provides a consistent way to identify resources (via URLs) and interact with them.<!--]--></li><li><!--[--><strong><!--[-->Caching<!--]--></strong>: REST APIs support caching, improving performance and reducing server load.<!--]--></li><li><!--[--><strong><!--[-->Separation of Concerns<!--]--></strong>: Frontend and backend can use different technologies.<!--]--></li><li><!--[--><strong><!--[-->Interoperability<!--]--></strong>: Language-agnostic, allowing different programming languages to work together.<!--]--></li><li><!--[--><strong><!--[-->Ease of Testing<!--]--></strong>: REST APIs are simple to test using tools like Postman.<!--]--></li><li><!--[--><strong><!--[-->Security<!--]--></strong>: REST APIs provide built-in security features like HTTPS for secure communication.<!--]--></li><!--]--></ul><p><!--[--><a><!--[--><!--[-->Explore some dummy and free APIs here!<!--]--><!--]--></a>
Now, it’s time to dive into HTTP requests and explore their key components.<!--]--></p><p><!--[--><a><!--[--><!--[-->Image credits<!--]--><!--]--></a><!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->As we have already discussed, there are three main parts of an HTTP request: <strong><!--[-->URL<!--]--></strong>, <strong><!--[-->headers<!--]--></strong>, and <strong><!--[-->body<!--]--></strong>. We will go into the details of each later. For now, let’s focus on how an <strong><!--[-->HTTP response<!--]--></strong> looks.<!--]--></p><p><!--[-->If you look at the screenshot below, you will see:<!--]--></p><ul><!--[--><li><!--[-->The <strong><!--[-->protocol name<!--]--></strong> and the <strong><!--[-->status code<!--]--></strong>.<!--]--></li><li><!--[-->The <strong><!--[-->response headers<!--]--></strong>, which contain server information.<!--]--></li><li><!--[-->The main data, which could be in formats like HTML, JSON, or XML.<!--]--></li><!--]--></ul><p><!--[-->We will dive deeper into each of these later. For now, just keep in mind that these are the key components of an HTTP response.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Let’s Create a Server<!--]--></a></h3><p><!--[-->We will use <strong><!--[-->Express.js<!--]--></strong>, which is built on <strong><!--[-->Node.js<!--]--></strong>.<!--]--></p><ol><!--[--><li><!--[-->Open any folder of your choice.<!--]--></li><li><!--[-->Open <strong><!--[-->VS Code<!--]--></strong>, <strong><!--[-->Cursive<!--]--></strong>, or any of your favorite editors.<!--]--></li><!--]--></ol><div><span></span><!--[--><pre><!--[--><code><span><span>npm</span><span> init
</span></span><span><span>npm</span><span> i</span><span> express</span><span> -</span><span>save
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Next, go to your entry file, either <strong><!--[-->app.js<!--]--></strong> or <strong><!--[-->index.js<!--]--></strong>, and paste the following code:<!--]--></p><div><span></span><!--[--><pre><!--[--><code>import express from "express";

const app = express();

app.all('/',(req,res)=&gt;{
  console.log("Request",req);
  console.log("response",res);
  res.send("hello world");
})

const PORT = 5111;

app.listen(PORT ,listenServer)

function listenServer(){
  console.log("post request running on port "+PORT);
}
</code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->In your <strong><!--[-->package.json<!--]--></strong> file (which you got after running <code><!--[-->npm init<!--]--></code>), you need to do two things:<!--]--></p><ol><!--[--><li><!--[-->Add a script to run your project.<!--]--></li><li><!--[-->Specify the project type as <strong><!--[-->module<!--]--></strong> because you are using <strong><!--[-->ES6 syntax<!--]--></strong>. This tells your project to follow <strong><!--[-->ESM (ECMAScript Modules)<!--]--></strong> instead of <strong><!--[-->CJS (CommonJS)<!--]--></strong>.<!--]--></li><!--]--></ol><p><!--[-->It’s important to learn about these topics to understand how modules work in Node.js.<!--]--></p><div><span></span><!--[--><pre><!--[--><code>{
  "name": "my-first-server",
  "version": "1.0.0",
  "description": "this is simple express js server",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",
    "start": "node index.js"
  },
  "keywords": [
    "express"
  ],
  "author": "Ashu",
  "license": "ISC",
  "dependencies": {
    "express": "^4.21.2"
  }
}
</code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->After that, run <code><!--[-->npm start<!--]--></code> and open your browser. Type <code><!--[-->http://localhost:5111/<!--]--></code>, and you will see the response sent from your JavaScript code.<!--]--></p><p><!--[-->We will discuss these things in more detail later, but for now, pick each word and search online to deepen your understanding. Since this is not a backend-focused guide, I’m keeping it brief.<!--]--></p><p><!--[-->Now, let’s explore <strong><!--[-->URLs<!--]--></strong>!<!--]--></p><h3><a><!--[-->URL Parts<!--]--></a></h3><p><!--[--><img><!--]--></p><p><!--[-->Let’s dive deep into <strong><!--[-->URLs<!--]--></strong>, as they are the main component when you make a request. Based on different parts of the URL, various services are targeted on the running server.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Breaking Down the URL<!--]--></a></h3><p><!--[-->The <strong><!--[-->URL<!--]--></strong> consists of several components, each with a specific purpose:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Scheme<!--]--></strong>: This is the protocol, either <code><!--[-->http<!--]--></code> or <code><!--[-->https<!--]--></code>.<!--]--></li><li><!--[--><strong><!--[-->Host<!--]--></strong>: The host is divided into three main parts:<ul><!--[--><li><!--[--><strong><!--[-->Subdomain<!--]--></strong>: For example, <code><!--[-->www<!--]--></code>.<!--]--></li><li><!--[--><strong><!--[-->Domain<!--]--></strong>: The name you purchase for your website, like <code><!--[-->heyashu<!--]--></code>.<!--]--></li><li><!--[--><strong><!--[-->Top-Level Domain (TLD)<!--]--></strong>: The suffix, such as <code><!--[-->.in<!--]--></code>, <code><!--[-->.com<!--]--></code>, or <code><!--[-->.org<!--]--></code>.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Path<!--]--></strong>: After the host, the path comes. It indicates what resource or functionality to target. Think of it like the page structure in a frontend application. Similarly, on the backend, paths help target specific functions using subdirectories.<!--]--></li><li><!--[--><strong><!--[-->Query String<!--]--></strong>: After a <code><!--[-->?<!--]--></code>, the query string begins, continuing until the next <code><!--[-->#<!--]--></code>. A query string consists of key-value pairs separated by <code><!--[-->&amp;<!--]--></code>. For example:<div><span></span><!--[--><pre><!--[--><code><span><span>css
</span></span><span><span>CopyEdit
</span></span><span><span>?tag=networking&amp;order=newest
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><br>The backend uses this data (e.g., <code><!--[-->tag=networking<!--]--></code> and <code><!--[-->order=newest<!--]--></code>) to send the appropriate response to the frontend, helping distinguish what data to provide.<!--]--></li><li><!--[--><strong><!--[-->Fragment (#)<!--]--></strong>: This stores special information about a page on the frontend. For example, in the URL:<div><span></span><!--[--><pre><!--[--><code><span><span>bash
</span></span><span><span>CopyEdit
</span></span><span><span>https://javascript.info/array-methods#splice
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><br>The page scrolls directly to the section where the <code><!--[-->splice<!--]--></code> method is defined. The <code><!--[-->#splice<!--]--></code> is tied to an element with the <code><!--[-->id="splice"<!--]--></code> in the HTML. Note that the fragment is <strong><!--[-->only used on the client side<!--]--></strong> and is never sent to the server.<!--]--></li><!--]--></ol><h3><a><!--[-->Example<!--]--></a></h3><p><!--[-->If you’re building a backend app on <code><!--[-->http://localhost:5111<!--]--></code>, and you’re developing a <strong><!--[-->Todo App<!--]--></strong>, the URLs could look like this:<!--]--></p><ul><!--[--><li><!--[-->To get a list of todos:The <code><!--[-->/todos<!--]--></code> path clearly indicates it will provide the list of todos.<div><span></span><!--[--><pre><!--[--><code><span><span>bash
</span></span><span><span>CopyEdit
</span></span><span><span>http://localhost:5111/api/todos
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><!--]--></li><li><!--[-->Similarly, for users:<div><span></span><!--[--><pre><!--[--><code><span><span>bash
</span></span><span><span>CopyEdit
</span></span><span><span>http://localhost:5111/api/users
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><!--]--></li><!--]--></ul><h3><a><!--[-->CRUD Operations<!--]--></a></h3><p><!--[-->CRUD stands for the four basic operations you perform with data:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Create<!--]--></strong>: Add a new todo.<!--]--></li><li><!--[--><strong><!--[-->Read<!--]--></strong>: View todos.<!--]--></li><li><!--[--><strong><!--[-->Update<!--]--></strong>: Edit existing todos.<!--]--></li><li><!--[--><strong><!--[-->Delete<!--]--></strong>: Remove a todo.<!--]--></li><!--]--></ul><p><!--[-->You’ll often hear people talk about “performing CRUD operations.”<!--]--></p><h3><a><!--[-->HTTP Methods Overview<!--]--></a></h3><p><!--[--><img><!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->POST<!--]--></strong>: Used to add new data.<!--]--></li><li><!--[--><strong><!--[-->GET<!--]--></strong>: Used to retrieve data.<!--]--></li><li><!--[--><strong><!--[-->PUT/PATCH<!--]--></strong>:<ul><!--[--><li><!--[--><strong><!--[-->PUT<!--]--></strong>: Replaces the entire set of data.<!--]--></li><li><!--[--><strong><!--[-->PATCH<!--]--></strong>: Edits or replaces a part of the data.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->DELETE<!--]--></strong>: Used to delete data.<!--]--></li><!--]--></ul><p><!--[-->These methods are used by the server to distinguish what action the client wants to perform. The client sends a request, which includes headers and data, either in the body or the URL.<!--]--></p><p><!--[-->Other methods to be aware of:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->HEAD<!--]--></strong>: Similar to <strong><!--[-->GET<!--]--></strong>, but it only retrieves the headers, not the actual data. We’ll discuss this in more detail later.<!--]--></li><li><!--[--><strong><!--[-->OPTIONS<!--]--></strong>: Used for security purposes. The browser first sends an <strong><!--[-->OPTIONS<!--]--></strong> request before sending the actual request.<!--]--></li><li><!--[--><strong><!--[-->CONNECT<!--]--></strong>: Establishes a connection for faster communication in the future.<!--]--></li><li><!--[--><strong><!--[-->TRACE<!--]--></strong>: Used for diagnostics, to trace the path of requests for troubleshooting.<!--]--></li><!--]--></ul><h3><a><!--[-->Serialized Data<!--]--></a></h3><p><!--[-->Whenever you send or receive data between the server and client, it needs to be <strong><!--[-->serialized<!--]--></strong>. This means you always send <strong><!--[-->stringified data<!--]--></strong>. On both the client and server sides, you need to <strong><!--[-->parse<!--]--></strong> this data.<!--]--></p><h3><a><!--[-->Now, Let’s Build a Simple Todo App<!--]--></a></h3><p><!--[-->To demonstrate the use of these methods, we will build a simple <strong><!--[-->Todo Web API<!--]--></strong> with CRUD operations (Create, Read, Update, and Delete). We’ll create four endpoints:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Create Todo<!--]--></strong>: <code><!--[-->POST /todos<!--]--></code><!--]--></li><li><!--[--><strong><!--[-->Read Todos<!--]--></strong>: <code><!--[-->GET /todos<!--]--></code><!--]--></li><li><!--[--><strong><!--[-->Update Todo<!--]--></strong>: <code><!--[-->PUT /todos/:id<!--]--></code><!--]--></li><li><!--[--><strong><!--[-->Delete Todo<!--]--></strong>: <code><!--[-->DELETE /todos/:id<!--]--></code><!--]--></li><!--]--></ul><p><!--[-->I have updated your <code><!--[-->app.js<!--]--></code> to handle these requests. You can use the <strong><!--[-->Postman<!--]--></strong> extension in <strong><!--[-->VS Code<!--]--></strong> to send requests to the API. The browser can only retrieve data, but to send data (like for a <code><!--[-->POST<!--]--></code> request), you’ll need to use a tool like <strong><!--[-->Postman<!--]--></strong> or call the API directly with JavaScript.<!--]--></p><h3><a><!--[-->Example of an Updated <code><!--[-->index.js<!--]--></code><!--]--></a></h3><p><!--[-->You will need to install some additional packages, such as <strong><!--[-->body-parser<!--]--></strong> and <strong><!--[-->nodemon<!--]--></strong>. These packages help handle requests and automate server restarts during development. You can read more about these packages online.<!--]--></p><p><!--[-->For the <strong><!--[-->POST<!--]--></strong> requests, you can either use <strong><!--[-->Postman<!--]--></strong> or write JavaScript code to send data. I am pasting the updated <code><!--[-->app.js<!--]--></code> code and a screenshot of the Postman tool for you.<!--]--></p><p><!--[-->Let me know if you need any more details or the code snippet for the <code><!--[-->app.js<!--]--></code>!<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>import</span><span> express</span><span> from</span><span> "</span><span>express</span><span>"</span><span>;
</span></span><span><span>
</span></span><span><span>const</span><span> app</span><span> =</span><span> express</span><span>();
</span></span><span><span>
</span></span><span><span>import</span><span> bodyParser</span><span> from</span><span> "</span><span>body-parser</span><span>"</span><span>;
</span></span><span><span>app</span><span>.</span><span>use</span><span>(</span><span>bodyParser</span><span>.</span><span>json</span><span>());
</span></span><span><span>
</span></span><span><span>app</span><span>.</span><span>all</span><span>(</span><span>'</span><span>/</span><span>'</span><span>,(</span><span>req</span><span>,</span><span>res</span><span>)=&gt;{
</span></span><span><span>  // console.log("Request",req);
</span></span><span><span>  // console.log("response",res);
</span></span><span><span>  res</span><span>.</span><span>send</span><span>(</span><span>"</span><span>hello world</span><span>"</span><span>);
</span></span><span><span>})
</span></span><span><span>
</span></span><span><span>const</span><span> PORT</span><span> =</span><span> 5111</span><span>;
</span></span><span><span>
</span></span><span><span>app</span><span>.</span><span>listen</span><span>(</span><span>PORT</span><span> ,</span><span>listenServer</span><span>)
</span></span><span><span>
</span></span><span><span>function</span><span> listenServer</span><span>(){
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>post request running on port </span><span>"</span><span>+</span><span>PORT</span><span>);
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span>const</span><span> todos</span><span>=[
</span></span><span><span>  {</span><span>id</span><span>:</span><span>1</span><span>,</span><span>title</span><span>:</span><span>"</span><span>todo1</span><span>"</span><span>,</span><span>description</span><span>:</span><span>"</span><span>todo1 description</span><span>"</span><span>},
</span></span><span><span>  {</span><span>id</span><span>:</span><span>2</span><span>,</span><span>title</span><span>:</span><span>"</span><span>todo2</span><span>"</span><span>,</span><span>description</span><span>:</span><span>"</span><span>todo2 description</span><span>"</span><span>},
</span></span><span><span>  {</span><span>id</span><span>:</span><span>3</span><span>,</span><span>title</span><span>:</span><span>"</span><span>todo3</span><span>"</span><span>,</span><span>description</span><span>:</span><span>"</span><span>todo3 description</span><span>"</span><span>},</span><span> 
</span></span><span><span>]
</span></span><span><span>
</span></span><span><span>// READ
</span></span><span><span>app</span><span>.</span><span>get</span><span>(</span><span>'</span><span>/todos</span><span>'</span><span>,(</span><span>req</span><span>,</span><span>res</span><span>)=&gt;{
</span></span><span><span>return</span><span>  res</span><span>.</span><span>json</span><span>(</span><span>todos</span><span>);
</span></span><span><span>})
</span></span><span><span>// POST
</span></span><span><span>app</span><span>.</span><span>post</span><span>(</span><span>'</span><span>/todos</span><span>'</span><span>,(</span><span>req</span><span>,</span><span>res</span><span>)=&gt;{
</span></span><span><span>  const</span><span> newTodo</span><span>=</span><span>req</span><span>.</span><span>body</span><span>;
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>newTodo</span><span>"</span><span>,</span><span>newTodo</span><span>);
</span></span><span><span>  todos</span><span>.</span><span>push</span><span>(</span><span>newTodo</span><span>);
</span></span><span><span>  return</span><span> res</span><span>.</span><span>json</span><span>(</span><span>todos</span><span>);
</span></span><span><span>})
</span></span><span><span>// PUT
</span></span><span><span>app</span><span>.</span><span>put</span><span>(</span><span>'</span><span>/todos/:id</span><span>'</span><span>,(</span><span>req</span><span>,</span><span>res</span><span>)=&gt;{
</span></span><span><span>  const</span><span> id</span><span>=</span><span>req</span><span>.</span><span>params</span><span>.</span><span>id</span><span>;
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>id</span><span>"</span><span>,</span><span>id</span><span>);
</span></span><span><span>  const</span><span> todo</span><span>=</span><span>todos</span><span>.</span><span>findIndex</span><span>((</span><span>todo</span><span>)=&gt;</span><span>todo</span><span>.</span><span>id</span><span>==</span><span>id</span><span>);
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>todos</span><span>"</span><span>,</span><span>todo</span><span>);
</span></span><span><span>  if</span><span>(</span><span>todo</span><span>==-</span><span>1</span><span>){
</span></span><span><span>    return</span><span> res</span><span>.</span><span>status</span><span>(</span><span>404</span><span>).</span><span>json</span><span>({</span><span>message</span><span>:</span><span>"</span><span>todo not found</span><span>"</span><span>});
</span></span><span><span>  }
</span></span><span><span>  todos</span><span>[</span><span>todo</span><span>]=</span><span>req</span><span>.</span><span>body</span><span>;
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>todos updated</span><span>"</span><span>,</span><span>todos</span><span>);
</span></span><span><span>  return</span><span> res</span><span>.</span><span>json</span><span>(</span><span>todos</span><span>);
</span></span><span><span>})
</span></span><span><span>// DELETE
</span></span><span><span>app</span><span>.</span><span>delete</span><span>(</span><span>'</span><span>/todos/:id</span><span>'</span><span>,(</span><span>req</span><span>,</span><span>res</span><span>)=&gt;{
</span></span><span><span>  const</span><span> id</span><span>=</span><span>req</span><span>.</span><span>params</span><span>.</span><span>id</span><span>;
</span></span><span><span>  const</span><span> todo</span><span>=</span><span>todos</span><span>.</span><span>findIndex</span><span>((</span><span>todo</span><span>)=&gt;</span><span>todo</span><span>.</span><span>id</span><span>==</span><span>id</span><span>);
</span></span><span><span>  if</span><span>(</span><span>todo</span><span>==-</span><span>1</span><span>){
</span></span><span><span>    return</span><span> res</span><span>.</span><span>status</span><span>(</span><span>404</span><span>).</span><span>json</span><span>({</span><span>message</span><span>:</span><span>"</span><span>todo not found</span><span>"</span><span>});
</span></span><span><span>  }
</span></span><span><span>  todos</span><span>.</span><span>splice</span><span>(</span><span>todo</span><span>,</span><span>1</span><span>);
</span></span><span><span>  return</span><span> res</span><span>.</span><span>json</span><span>(</span><span>todos</span><span>);
</span></span><span><span>})
</span></span><span><span>// PATCH
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Postman Screenshot<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Headers<!--]--></a></h3><p><!--[--><img><!--]--></p><p><!--[-->When sending a request, headers are included, and they contain important information for the server. Let's go over some key headers:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Host<!--]--></strong>: Specifies the origin host to which the request is being sent, i.e., the target endpoint.<!--]--></li><li><!--[--><strong><!--[-->Origin<!--]--></strong>: Indicates the origin host where the request is coming from.<!--]--></li><li><!--[--><strong><!--[-->Referer<!--]--></strong>: Shows the page from which the request originated. For example, if you see that Flipkart was loaded from LinkedIn, the <strong><!--[-->Referer<!--]--></strong> header will indicate that.<!--]--></li><li><!--[--><strong><!--[-->User-Agent<!--]--></strong>: Contains client-related information, such as system details and browser version. This can be useful for server-side handling.<!--]--></li><li><!--[--><strong><!--[-->Accept<!--]--></strong>: Informs the server about the type of response the client expects, such as JSON, text, or XML.<!--]--></li><li><!--[--><strong><!--[-->Accept-Languages<!--]--></strong>: Specifies the preferred languages for the response.<!--]--></li><li><!--[--><strong><!--[-->Accept-Encoding<!--]--></strong>: Informs the server about the encoding algorithms supported by the client, such as gzip, deflate, Brotli, etc.<!--]--></li><li><!--[--><strong><!--[-->Connection<!--]--></strong>: Specifies whether the TCP connection should be kept alive or closed after the request.<!--]--></li><li><!--[--><strong><!--[-->Authorization<!--]--></strong>: Contains authentication tokens or credentials to validate the user.<!--]--></li><li><!--[--><strong><!--[-->Cookies<!--]--></strong>: Allows sending data (like session tokens) to the server for maintaining the user's state.<!--]--></li><li><!--[--><strong><!--[-->If-Modified-Since<!--]--></strong> and <strong><!--[-->Cache-Control<!--]--></strong>: These headers help optimize requests by checking if the resource has been modified and controlling caching behavior.<!--]--></li><!--]--></ol><p><!--[-->Here’s an example of a <strong><!--[-->request header<!--]--></strong> from Flipkart when searching for something:<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>POST</span><span> /</span><span>jserrors</span><span>/</span><span>1</span><span>/</span><span>NRJS</span><span>-</span><span>dd5f16cdf95712c6cba</span><span>?</span><span>a</span><span>=</span><span>1588759528</span><span>&amp;</span><span>sa</span><span>=</span><span>1</span><span>&amp;</span><span>v</span><span>=</span><span>1.236</span><span>.</span><span>0</span><span>&amp;</span><span>t</span><span>=</span><span>Unnamed</span><span>%</span><span>20</span><span>Transaction</span><span>&amp;</span><span>rst</span><span>=</span><span>15889</span><span>&amp;</span><span>ck</span><span>=</span><span>0</span><span>&amp;</span><span>s</span><span>=</span><span>c27fe32d75a666e7</span><span>&amp;</span><span>ref</span><span>=</span><span>https</span><span>:</span><span>//www.flipkart.com/search&amp;ri=%7B%22fk-cp-zion%22:%226.43.0%22%7D HTTP/1.1
</span></span><span><span>Accept</span><span>:</span><span> *</span><span>/*
</span></span><span><span>Accept-Encoding: gzip, deflate, br, zstd
</span></span><span><span>Accept-Language: en-US,en;q=0.9,hi-IN;q=0.8,hi;q=0.7
</span></span><span><span>Connection: keep-alive
</span></span><span><span>Content-Length: 2971
</span></span><span><span>DNT: 1
</span></span><span><span>Host: bam.nr-data.net
</span></span><span><span>Origin: https://www.flipkart.com
</span></span><span><span>Referer: https://www.flipkart.com/
</span></span><span><span>Sec-Fetch-Dest: empty
</span></span><span><span>Sec-Fetch-Mode: cors
</span></span><span><span>cookie: ''
</span></span><span><span>Sec-Fetch-Site: cross-site
</span></span><span><span>User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36
</span></span><span><span>content-type: text/plain
</span></span><span><span>sec-ch-ua: "Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"
</span></span><span><span>sec-ch-ua-mobile: ?1
</span></span><span><span>sec-ch-ua-platform: "Android"
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Response Headers<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->Date<!--]--></strong>: Specifies the date and time when the response was sent.<!--]--></li><li><!--[--><strong><!--[-->Server<!--]--></strong>: Provides information about the server, such as its version and name. However, revealing this information is generally not recommended for security reasons.<!--]--></li><li><!--[--><strong><!--[-->Content-Type<!--]--></strong>: Specifies the type of data the server is sending, e.g., JSON, HTML, or XML.<!--]--></li><li><!--[--><strong><!--[-->Content-Length<!--]--></strong>: Indicates the size of the response body, in bytes. It helps in calculating the download progress if you’re downloading content.<!--]--></li><li><!--[--><strong><!--[-->Set-Cookie<!--]--></strong>: Informs the client to store cookies for future requests. This allows the server to maintain the client's session state.<!--]--></li><li><!--[--><strong><!--[-->Content-Encoding<!--]--></strong>: Specifies the encoding used for the response content, such as gzip or Brotli.<!--]--></li><li><!--[--><strong><!--[-->Cache-Control, Last-Modified, ETag<!--]--></strong>: These headers help control caching and indicate when the resource was last modified. The <strong><!--[-->ETag<!--]--></strong> is often used for resource validation.<!--]--></li><li><!--[--><strong><!--[-->Expires<!--]--></strong>: Specifies the time when the data will expire, informing the client when it should consider the data as stale.<!--]--></li><!--]--></ol><p><!--[-->Here’s an example of a <strong><!--[-->response header<!--]--></strong> from Amazon:<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>HTTP</span><span>/</span><span>1.1</span><span> 200</span><span> OK
</span></span><span><span>Server</span><span>:</span><span> Server
</span></span><span><span>Date</span><span>:</span><span> Sun</span><span>,</span><span> 26</span><span> Jan</span><span> 2025</span><span> 15</span><span>:</span><span>31</span><span>:</span><span>39</span><span> GMT
</span></span><span><span>Content</span><span>-</span><span>Type</span><span>:</span><span> application</span><span>/</span><span>json
</span></span><span><span>Content</span><span>-</span><span>Length</span><span>:</span><span> 22
</span></span><span><span>Connection</span><span>:</span><span> keep</span><span>-</span><span>alive
</span></span><span><span>x</span><span>-</span><span>amz</span><span>-</span><span>rid</span><span>:</span><span> 7</span><span>T01A36XSQ5M3P528H47
</span></span><span><span>x</span><span>-</span><span>amzn</span><span>-</span><span>RequestId</span><span>:</span><span> b2698d0b</span><span>-</span><span>fe0b</span><span>-</span><span>436</span><span>e</span><span>-</span><span>9</span><span>f08</span><span>-</span><span>9</span><span>ec885d6ae25
</span></span><span><span>Access</span><span>-</span><span>Control</span><span>-</span><span>Allow</span><span>-</span><span>Origin</span><span>:</span><span> https</span><span>:</span><span>//www.amazon.in
</span></span><span><span>Content</span><span>-</span><span>Encoding</span><span>:</span><span> gzip
</span></span><span><span>Access</span><span>-</span><span>Control</span><span>-</span><span>Expose</span><span>-</span><span>Headers</span><span>:</span><span> x</span><span>-</span><span>amzn</span><span>-</span><span>RequestId</span><span>,</span><span>x</span><span>-</span><span>amzn</span><span>-</span><span>ErrorType</span><span>,</span><span>x</span><span>-</span><span>amzn</span><span>-</span><span>ErrorMessage</span><span>,</span><span>Date
</span></span><span><span>Access</span><span>-</span><span>Control</span><span>-</span><span>Allow</span><span>-</span><span>Credentials</span><span>:</span><span> true
</span></span><span><span>Vary</span><span>:</span><span> Origin</span><span>,</span><span>Content</span><span>-</span><span>Type</span><span>,</span><span>Accept</span><span>-</span><span>Encoding</span><span>,</span><span>User</span><span>-</span><span>Agent
</span></span><span><span>Strict</span><span>-</span><span>Transport</span><span>-</span><span>Security</span><span>:</span><span> max</span><span>-</span><span>age</span><span>=</span><span>47474747</span><span>;</span><span> includeSubDomains</span><span>;</span><span> preload
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->Status Codes<!--]--></a></h3><p><!--[-->Status codes indicate the status of the response when a request is made. They help the frontend handle the data appropriately and notify the user based on the outcome of the request. Each response contains a status code that provides information about whether the request was successful, encountered an error, or requires further action.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Status Code Ranges<!--]--></a></h3><p><!--[-->Status codes are categorized into five ranges to represent different types of responses:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->1XX: Informational<!--]--></strong><ul><!--[--><li><!--[--><strong><!--[-->100<!--]--></strong>: Continue – The client should continue with its request.<!--]--></li><li><!--[--><strong><!--[-->101<!--]--></strong>: Switching Protocols – The server is switching protocols.<!--]--></li><li><!--[-->These are rarely used but helpful to know.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->2XX: Success<!--]--></strong><ul><!--[--><li><!--[--><strong><!--[-->200<!--]--></strong>: OK – The request was successful and the response is as expected.<!--]--></li><li><!--[--><strong><!--[-->201<!--]--></strong>: Created – A new resource has been created.<!--]--></li><li><!--[--><strong><!--[-->202<!--]--></strong>: Accepted – The request has been accepted but not yet processed.<!--]--></li><li><!--[--><strong><!--[-->204<!--]--></strong>: No Content – No content to return, typically after a delete operation.<!--]--></li><li><!--[--><strong><!--[-->206<!--]--></strong>: Partial Content – The server is returning part of the requested resource (used in cases like file downloads).<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->3XX: Redirection<!--]--></strong><ul><!--[--><li><!--[--><strong><!--[-->301<!--]--></strong>: Moved Permanently – The resource has moved to a new location.<!--]--></li><li><!--[--><strong><!--[-->302<!--]--></strong>: Found (Temporary Redirect) – The resource has temporarily moved.<!--]--></li><li><!--[--><strong><!--[-->307<!--]--></strong>: Temporary Redirect – Similar to 302 but the client should not change the HTTP method used.<!--]--></li><li><!--[--><strong><!--[-->308<!--]--></strong>: Permanent Redirect – The resource has permanently moved and the method used should not change.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->4XX: Client Errors<!--]--></strong><ul><!--[--><li><!--[--><strong><!--[-->400<!--]--></strong>: Bad Request – The request was malformed or contains invalid syntax.<!--]--></li><li><!--[--><strong><!--[-->401<!--]--></strong>: Unauthorized – The client must authenticate to access the resource.<!--]--></li><li><!--[--><strong><!--[-->403<!--]--></strong>: Forbidden – The client does not have permission to access the resource.<!--]--></li><li><!--[--><strong><!--[-->404<!--]--></strong>: Not Found – The requested resource could not be found.<!--]--></li><li><!--[--><strong><!--[-->405<!--]--></strong>: Method Not Allowed – The HTTP method is not supported for the resource.<!--]--></li><li><!--[--><strong><!--[-->429<!--]--></strong>: Too Many Requests – The client has sent too many requests in a short period.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->5XX: Server Errors<!--]--></strong><ul><!--[--><li><!--[--><strong><!--[-->500<!--]--></strong>: Internal Server Error – The server encountered an unexpected condition.<!--]--></li><li><!--[--><strong><!--[-->502<!--]--></strong>: Bad Gateway – The server received an invalid response from an upstream server.<!--]--></li><li><!--[--><strong><!--[-->503<!--]--></strong>: Service Unavailable – The server is temporarily unable to handle the request.<!--]--></li><li><!--[--><strong><!--[-->504<!--]--></strong>: Gateway Timeout – The server did not receive a timely response from an upstream server.<!--]--></li><li><!--[--><strong><!--[-->507<!--]--></strong>: Insufficient Storage – The server cannot store the representation needed to complete the request (often used for file uploads).<!--]--></li><!--]--></ul><!--]--></li><!--]--></ol><p><!--[-->By understanding these status codes, you can properly handle responses, display the right error messages, and notify users when necessary. It ensures your frontend handles data and errors effectively, improving the overall user experience.<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Communication Protocols]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-1-2/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-1-2/</guid>
            <pubDate>Sun, 02 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[A communications protocol is a set of formal rules describing how to transmit or exchange data, especially across a network. A standardised communications protocol is one that has been codified as a standard. Examples of these include WiFi, the Internet Protocol, and the Hypertext Transfer Protocol (HTTP).]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><h3><a><!--[-->HTTP (Hypertext Transfer Protocol)<!--]--></a></h3><p><!--[-->Used in web browsers for transferring hypertext documents. It involves establishing a TCP connection followed by HTTP Request and HTTP Response messages. This protocol is fundamental to web browsing and allows clients to communicate with servers.<!--]--></p><h3><a><!--[-->TCP (Transmission Control Protocol)<!--]--></a></h3><p><!--[-->Uses a three-way handshake to establish connections. TCP guarantees that no data packets will be lost during transmission. It's commonly used for web browsing and email protocols, providing reliable data delivery between applications.<!--]--></p><h3><a><!--[-->UDP (User Datagram Protocol)<!--]--></a></h3><p><!--[-->A fast protocol that operates without establishing handshakes. It sends and receives data immediately, making it ideal for video conferencing where speed is more important than guaranteed delivery.<!--]--></p><h3><a><!--[-->HTTP/3 QUIC (Quick UDP Internet Connections)<!--]--></a></h3><p><!--[-->A modern protocol built on UDP, designed for Internet of Things (IoT) and Virtual Reality applications. It features header compression and improved network connection handling. HTTP/3 offers better performance while maintaining speed similar to UDP.<!--]--></p><h3><a><!--[-->HTTPS (Hypertext Transfer Protocol Secure)<!--]--></a></h3><p><!--[-->An extension of HTTP that includes Transport Layer Security (TLS). The server sends a public key to the client, and a session key is exchanged for encrypted communication. This is now the standard protocol for secure web browsing.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->WebSocket<!--]--></a></h3><p><!--[-->A protocol that starts with an HTTP connection and upgrades to a full-duplex connection. Commonly used for chat applications and real-time data transfer, allowing continuous two-way communication between client and server.<!--]--></p><h3><a><!--[-->SMTP (Simple Mail Transfer Protocol)<!--]--></a></h3><p><!--[-->Email protocol that uses intermediate SMTP servers to receive and transfer messages to their endpoints. This protocol manages the routing and delivery of email messages across networks.<!--]--></p><h3><a><!--[-->FTP (File Transfer Protocol)<!--]--></a></h3><p><!--[-->Designed for transferring large files between systems. It provides a dedicated protocol for moving data from one computer to another over a network.<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How the Web Works]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-1-1/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-1-1/</guid>
            <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Network is a core part of software, as the frontend needs data and the backend sends it. All of this happens through the network. How is data transferred over the internet? How does it reach the client, and what protocols are required? These are essential concepts for software development. We need to understand what happens when we type 'google.com,'' what DNS is, and its role in the process.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->Network is a core part of software, as the frontend needs data and the backend sends it. All of this happens through the network. How is data transferred over the internet? How does it reach the client, and what protocols are required? These are essential concepts for software development.<!--]--></p><p><!--[-->We need to understand what happens when we type "<a><!--[--><!--[-->google.com<!--]--><!--]--></a>," what DNS is, and its role in the process.<!--]--></p><p><!--[-->We commonly use REST APIs, but we'll also explore how the web works, including GraphQL, gRPC protocols, and more. We'll dive into networking fundamentals, how the internet works, frontend-backend interactions, REST concepts, HTTP methods, headers, CORS, and other key aspects.<!--]--></p><h3><a><!--[-->How the Web Works<!--]--></a></h3><p><!--[-->To understand this, we need to know the client-server model. A client is the entity requesting information, while a server is the entity providing it. Essentially, the client asks for something, and the server serves it. This is the basic definition of client-server architecture.<!--]--></p><p><!--[--><a><!--[--><!--[-->Read more about client-server<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->IP Address<!--]--></a></h3><p><!--[-->Each system on the internet has an IP address.<!--]--></p><p><!--[--><strong><!--[-->IP Address<!--]--></strong>: An IP address is like a home address for devices on the internet. It uniquely identifies devices (like computers or phones) so they can find and communicate with each other.<!--]--></p><p><!--[-->Examples:<!--]--></p><ul><!--[--><li><!--[-->IPv4: <code><!--[-->192.168.1.1<!--]--></code><!--]--></li><li><!--[-->IPv6: `2001:0db8:85a3...<!--]--></li><!--]--></ul><h3><a><!--[-->Domain Name<!--]--></a></h3><p><!--[-->A domain is a human-readable address linked to a unique IP address.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Domain Name Parts<!--]--></a></h3><p><!--[-->When you say <code><!--[-->https://www.google.com<!--]--></code>, there are specific parts, each with its own significance:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Root Level Domain<!--]--></strong>:<br>The last dot represents the root level domain.<!--]--></li><li><!--[--><strong><!--[-->Top-Level Domain (TLD)<!--]--></strong>:<br>Examples: <code><!--[-->.edu<!--]--></code>, <code><!--[-->.org<!--]--></code>, <code><!--[-->.gov<!--]--></code>, <code><!--[-->.com<!--]--></code>, <code><!--[-->.au<!--]--></code>.<!--]--></li><li><!--[--><strong><!--[-->Second-Level Domain<!--]--></strong>:<br>Examples:<ul><!--[--><li><!--[--><a><!--[--><!--[-->openoffice.org<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->expedia.gov<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->microsoft.com<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->congress.au<!--]--><!--]--></a><!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Third-Level Domain<!--]--></strong>:<br>Examples:<ul><!--[--><li><!--[--><code><!--[-->[www.example.com](http://www.example.com)<!--]--></code><!--]--></li><li><!--[--><code><!--[-->download.microsoft.com<!--]--></code><!--]--></li><li><!--[--><code><!--[-->sales.microsoft.com<!--]--></code><!--]--></li><!--]--></ul><!--]--></li><!--]--></ol><h3><a><!--[-->Data Centers<!--]--></a></h3><p><!--[-->A <strong><!--[-->data center<!--]--></strong> is a physical facility that stores computing equipment and digital data for companies. It's like a server, but without displays—only CPUs and hardware managing incoming requests.<!--]--></p><p><!--[--><strong><!--[-->Where are data centers located?<!--]--></strong><!--]--></p><p><!--[-->Data centers can exist in multiple physical locations worldwide, all interconnected through optical fibers. These fibers connect across oceans and land, forming a global network. (You can learn more about optical fibers later.)<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Similarly, everything is interconnected, and we get internet connectivity. Data centers provide the data we request via the internet through our browsers. In India, we use internet providers like Jio, VI, and Airtel. These are <strong><!--[-->ISPs (Internet Service Providers)<!--]--></strong>. When you relocate to a new city, you may get broadband services like "ABC Internet Broadband" offering speeds like 100 Mbps. These are also ISPs. Let’s explore more about ISPs and how they work.<!--]--></p><h3><a><!--[-->ISP (Internet Service Provider)<!--]--></a></h3><p><!--[-->An <strong><!--[-->ISP (Internet Service Provider)<!--]--></strong> is <strong><!--[-->a company that provides internet access to individuals and businesses.<!--]--></strong><!--]--></p><p><!--[-->ISPs connect users to the internet backbone, assign IP addresses, and route data requests to the correct servers. They manage the local infrastructure and provide bandwidth for internet use.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->So we have local ISPs connected to the internet, governed by the country’s regulatory organizations. There are local, regional, and global ISPs, and these follow specific rules and regulations.<!--]--></p><h3><a><!--[-->Summary So Far<!--]--></a></h3><p><!--[-->Whenever you type <a><!--[--><!--[-->google.com<!--]--><!--]--></a>, the request goes through the router to the ISP via the internet. Then it hits a DNS server, which provides the IP of the domain. Using that IP, the server is contacted, and it responds with HTML, CSS, and JS files.<!--]--></p><p><!--[-->Now, let’s dig deeper: what happens when you hit a URL like <code><!--[-->google.com<!--]--></code>?<!--]--></p><h3><a><!--[-->What Happens When You Hit a URL?<!--]--></a></h3><p><!--[-->When you type a URL, it doesn’t directly go to the router. First, the browser performs some internal operations:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Cache Check<!--]--></strong>: The browser checks if the requested resource is available in its cache.<!--]--></li><li><!--[--><strong><!--[-->Service Workers<!--]--></strong>: If a service worker is registered, it intercepts the request and decides how to handle it. (More on this later.)<!--]--></li><li><!--[--><strong><!--[-->Router Communication<!--]--></strong>: After these checks, the request is sent to the router. Some smart routers may cache resources to speed up responses.<!--]--></li><!--]--></ol><p><!--[-->The router then communicates with the ISP, which handles the rest of the process.<!--]--></p><p><!--[-->To observe how service workers and network requests work:<!--]--></p><ol><!--[--><li><!--[-->Open this site in your browser: <a><!--[--><!--[-->https://service-worker-stale-while-revalidate.glitch.me/<!--]--><!--]--></a>.<!--]--></li><li><!--[-->Open <strong><!--[-->Inspect Mode<!--]--></strong> in the browser and go to the <strong><!--[-->Network<!--]--></strong> tab.<!--]--></li><li><!--[-->Make a request and observe the timing for responses (e.g., <code><!--[-->200<!--]--></code> for success, <code><!--[-->304<!--]--></code> for cached responses).<!--]--></li><!--]--></ol><p><!--[-->We will discuss HTTP status codes (<code><!--[-->200<!--]--></code>, <code><!--[-->304<!--]--></code>, etc.) and other details later, or you can explore them online.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->So, when you're getting data from the server, in some cases, the server does not serve the request directly. Instead, a <strong><!--[-->service worker<!--]--></strong> plays a role in providing the data. Let’s look at this scenario.<!--]--></p><p><!--[-->I reloaded the page and clicked on a request with a status code <code><!--[-->200<!--]--></code>. I noticed the <strong><!--[-->service worker<!--]--></strong> responded faster. It's not just about speed; the service worker also provides <strong><!--[-->caching<!--]--></strong> and <strong><!--[-->offline support<!--]--></strong> in the browser.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Service Workers<!--]--></a></h3><p><!--[-->Service workers enhance the performance of requests made by the browser. Now we understand that before reaching the ISP, caching occurs, and service workers may play a role. Let’s now focus on the ISP layer.<!--]--></p><h3><a><!--[-->ISP Layer<!--]--></a></h3><p><!--[-->What we currently know is that ISPs deal with the internet, but that’s not entirely true.<!--]--></p><p><!--[-->When you request data via an IP, it often passes through multiple layers of ISPs:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Local ISPs<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Regional ISPs<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Global ISPs<!--]--></strong><!--]--></li><!--]--></ol><p><!--[-->Then, it reaches the server in the respective country.<!--]--></p><p><!--[-->However, this is not always the case. Big companies like Netflix and Google optimize their systems by deploying <strong><!--[-->data centers<!--]--></strong> in multiple countries. This minimizes cross-region requests and ensures faster access to data. For example, Netflix stores data at the <strong><!--[-->regional ISP level<!--]--></strong>, so users experience minimal latency.<!--]--></p><p><!--[-->To check details related to any domain, visit <a><!--[--><!--[-->https://www.whois.com/<!--]--><!--]--></a>.<!--]--></p><h3><a><!--[-->ISP to Servers<!--]--></a></h3><p><!--[-->Let’s discuss what happens when a request goes from the ISP to the server.<!--]--></p><h3><a><!--[-->Three-Way Handshake<!--]--></a></h3><p><!--[-->If you’ve studied computer networks, you might know this already. If not, let’s review:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->SYN (Synchronize)<!--]--></strong>: The client sends a synchronization request to the server.<!--]--></li><li><!--[--><strong><!--[-->ACK (Acknowledge)<!--]--></strong>: The server responds, acknowledging the request.<!--]--></li><!--]--></ol><h3><a><!--[-->Steps from ISP to Server<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->DNS Lookup<!--]--></strong>:<br>This step resolves the domain name to the correct IP address. You can learn more about DNS lookups separately. For now, think of it as finding the correct IP for the given domain name.<!--]--></li><li><!--[--><strong><!--[-->TCP Handshake<!--]--></strong>:<br>Before any data transfer, the client checks the availability of the server through a <strong><!--[-->TCP handshake<!--]--></strong> (SYN and ACK).<!--]--></li><li><!--[--><strong><!--[-->SSL Handshake<!--]--></strong> (for HTTPS):<br>If the URL uses HTTPS, an SSL handshake ensures encrypted communication between the client and server, enhancing security.<!--]--></li><li><!--[--><strong><!--[-->HTTP GET Request<!--]--></strong>:<br>After the handshake, the browser sends the HTTP GET request, and the server responds with the requested data.<!--]--></li><!--]--></ol><p><!--[-->This process ensures a secure and efficient connection between the client and the server.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->SSL: <strong><!--[-->Secure Sockets Layer<!--]--></strong><!--]--></a></h3><p><!--[-->An SSL handshake is <strong><!--[-->a series of communications between a client and a server that establishes a connection and verifies the security of both parties.<!--]--></strong><!--]--></p><p><!--[-->During this process:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Certificate Exchange<!--]--></strong>: Certificates are exchanged to ensure that the communication is secure and cannot be hijacked.<!--]--></li><li><!--[--><strong><!--[-->Encryption<!--]--></strong>: A secure, encrypted channel is established between the client and server.<!--]--></li><!--]--></ol><p><!--[-->Finally, you receive <strong><!--[-->HTML, CSS, JS<!--]--></strong>, and other resources like images, which are rendered in the browser.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Lets discuss how browser handles and renders<!--]--></a></h3><p><!--[--><img><!--]--></p><h3><a><!--[-->How the Browser Processes a Web Page<!--]--></a></h3><p><!--[-->When a page is requested, we receive <strong><!--[-->HTML, CSS, and JS<!--]--></strong>.<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->HTML<!--]--></strong>: Used to build the <strong><!--[-->DOM tree<!--]--></strong> (Document Object Model).<!--]--></li><li><!--[--><strong><!--[-->CSS<!--]--></strong>: Parsed to create the <strong><!--[-->CSSOM<!--]--></strong> (CSS Object Model).<ul><!--[--><li><!--[--><strong><!--[-->Note<!--]--></strong>: CSS is <strong><!--[-->render-blocking<!--]--></strong>, which means it can delay the rendering of the page until it is fully loaded and processed.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->JS<!--]--></strong>: JS is <strong><!--[-->parser-blocking<!--]--></strong>, meaning it pauses HTML parsing while the script is being executed.<!--]--></li><!--]--></ul><p><!--[-->For more detailed insights, you can refer to <a><!--[--><!--[-->this article<!--]--><!--]--></a>.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Document Object Model (DOM)<!--]--></a></h3><p><!--[-->The <strong><!--[-->Document Object Model (DOM)<!--]--></strong> is a programming interface that represents the structure of a web document as objects and nodes. This allows programs to interact with and manipulate web documents dynamically.<!--]--></p><h3><a><!--[-->CSS Object Model (CSSOM)<!--]--></a></h3><p><!--[-->After parsing CSS, the <strong><!--[-->CSS Object Model (CSSOM)<!--]--></strong> is created.<!--]--></p><p><!--[--><strong><!--[-->CSSOM<!--]--></strong> stands for <strong><!--[-->CSS Object Model<!--]--></strong>. It is a set of APIs that enables reading and modifying a document's CSS information. While the DOM is for HTML, the CSSOM serves the same purpose for CSS.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Execute JS<!--]--></a></h3><p><!--[-->Next comes the phase where <strong><!--[-->JS execution<!--]--></strong> takes place. The loading of the script happens, followed by <strong><!--[-->AST internalization<!--]--></strong>, <strong><!--[-->compilation<!--]--></strong>, and <strong><!--[-->bytecode conversion<!--]--></strong>. Finally, the code is executed. By now, <strong><!--[-->HTML<!--]--></strong>, <strong><!--[-->CSS<!--]--></strong>, and <strong><!--[-->JS<!--]--></strong> have been processed, and we are in the <strong><!--[-->Rendering Phase<!--]--></strong>.<!--]--></p><h3><a><!--[-->Rendering and Painting<!--]--></a></h3><p><!--[-->In the <strong><!--[-->Rendering Phase<!--]--></strong>, <strong><!--[-->layouting<!--]--></strong> happens. Layouting means merging the <strong><!--[-->DOM<!--]--></strong> and <strong><!--[-->CSSOM<!--]--></strong> into the <strong><!--[-->Render Tree<!--]--></strong>. It's like creating the layout of a home and organizing the materials needed to build a villa. This process uses computer graphics and C++ code to draw the content on the browser.<!--]--></p><h3><a><!--[-->How Scripts Load<!--]--></a></h3><p><!--[-->To learn more about how scripts load, check this <a><!--[--><!--[-->video<!--]--><!--]--></a>.<!--]--></p><h3><a><!--[-->Parsing Behavior<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->CSS<!--]--></strong>: <strong><!--[-->Blocks rendering<!--]--></strong> (renders only after parsing is complete).<!--]--></li><li><!--[--><strong><!--[-->JavaScript<!--]--></strong>: <strong><!--[-->Blocks parsing<!--]--></strong> until it finishes execution.<ul><!--[--><li><!--[--><strong><!--[-->defer<!--]--></strong>: Waits until the HTML parser is finished.<!--]--></li><li><!--[--><strong><!--[-->async<!--]--></strong>: Executes as soon as the script loads.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ul><h3><a><!--[-->DOMContentLoaded and window.load<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->DOMContentLoaded<!--]--></strong>: This event is triggered when all <strong><!--[-->synchronous<!--]--></strong> content is loaded. You can use this as a hook to interact with the page.<!--]--></li><li><!--[--><strong><!--[-->window.load<!--]--></strong>: This event is fired when <strong><!--[-->all<!--]--></strong> content, including images and other resources, has been fully loaded.<!--]--></li><!--]--></ul><p><!--[-->Finally, remember that the <strong><!--[-->DOM tree<!--]--></strong> and <strong><!--[-->CSSOM<!--]--></strong> get merged, and <strong><!--[-->rendering<!--]--></strong> and <strong><!--[-->layouting<!--]--></strong> occur to paint the content on the screen.<!--]--></p><p><!--[-->So that's all for this article. Let's meet in the next one.  Take care, bye-bye!<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is short polling? Learn with example]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-2-1/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-2-1/</guid>
            <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Dive into short polling methodologies. Explore the technique of frequent requests to servers at fixed intervals, enabling frontend applications to obtain recent data updates for dynamic content.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->Ah, I see! Let’s imagine this scenario: You’re super hungry, but the kitchen is closed. You can’t just go in and make something yourself, so you’ve ordered food, but you’re not sure when it’ll be ready. What do you do? You can’t wait forever, so you keep knocking on the kitchen door at regular intervals, hoping to see if your food is ready yet.<!--]--></p><p><!--[-->Every few seconds, you knock again, checking if it’s time to eat. It’s not constant—just a brief check, then you wait and knock again after a short while. This is exactly like short polling. You keep checking for an update (your food being ready) at small intervals, without establishing a long connection, just knocking (or requesting) repeatedly until you get the response.<!--]--></p><p><!--[-->In short polling, just like you keep knocking, the system repeatedly asks for data at regular intervals, waiting for a response each time.<!--]--></p><p><!--[-->So, here we are going to discuss short polling, including its interview perspective with examples and code. So, let's not wait anymore and start learning.<!--]--></p><p><!--[-->It is a methodology we generally use to connect the front end to the backend—a communication technique.<!--]--></p><p><!--[-->Generally, when we need data, the front end calls an API and uses it. If you need data again, you call the API, and it provides the data after each request.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->But what if you need this data quickly, like loading a cricket score, checking notifications from the backend, or seeing if the delivery boy has arrived? This is called the short polling technique, where you repeatedly call or check for results in real-time and need constant updates.<!--]--></p><p><!--[-->It is not a persistent connection but retrieves data after each call. We are not increasing or establishing a new connection over an existing one. Instead, we call the API each time, but the calling frequency is very high, happening again and again.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->So, to check real-time data, you can use short polling. But remember, calling an API repeatedly is not scalable. If the API has limited resources, you can use this method, but for large-scale applications, it is not recommended.<!--]--></p><h3><a><!--[-->Usage of Short Polling<!--]--></a></h3><ol><!--[--><li><!--[-->Real-time systems<!--]--></li><li><!--[-->Notification data<!--]--></li><li><!--[-->Cricinfo (cricket updates)<!--]--></li><li><!--[-->Analytics<!--]--></li><li><!--[-->Checking anything you need in real-time<!--]--></li><li><!--[-->Normal chat applications (not the best approach, but possible)<!--]--></li><!--]--></ol><h3><a><!--[-->Let's Code<!--]--></a></h3><p><!--[-->Now, it's time to code! Clone this repo if you want to see it live:<!--]--></p><p><!--[--><a><!--[--><!--[-->GitHub Repo<!--]--><!--]--></a><!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>git</span><span> clone</span><span> https</span><span>:</span><span>//github.com/ashumsd7/web-communication-techniques.git
</span></span><span><span>cd</span><span> web</span><span>-</span><span>communication</span><span>-</span><span>techniques
</span></span><span><span>npm</span><span> i
</span></span><span><span>npm</span><span> run</span><span> short</span><span>-</span><span>polling
</span></span><span><span>-------------------
</span></span><span><span>Open</span><span> browser</span><span> and</span><span> type
</span></span><span><span>http</span><span>:</span><span>//localhost:3000/ // Observe API Calls in network tab
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->When you visit <a><!--[--><!--[-->http://localhost:3000/<!--]--><!--]--></a>, you will see an API being called every 5 seconds. That is short polling in action.<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>    &lt;</span><span>script</span><span>&gt;
</span></span><span><span>        function fetchData() </span><span>{
</span></span><span><span>            fetch</span><span>(</span><span>'</span><span>http://localhost:3000/getData</span><span>'</span><span>)
</span></span><span><span>                .</span><span>then</span><span>(</span><span>response</span><span> =&gt;</span><span> response</span><span>.</span><span>text</span><span>())
</span></span><span><span>                .</span><span>then</span><span>(</span><span>data</span><span> =&gt;</span><span> {
</span></span><span><span>                    document</span><span>.</span><span>getElementById</span><span>(</span><span>'</span><span>currentTime</span><span>'</span><span>).</span><span>textContent</span><span> =</span><span> data</span><span>;
</span></span><span><span>                })
</span></span><span><span>                .</span><span>catch</span><span>(</span><span>error</span><span> =&gt;</span><span> {
</span></span><span><span>                    console</span><span>.</span><span>error</span><span>(</span><span>'</span><span>Error fetching data:</span><span>'</span><span>,</span><span> error</span><span>);
</span></span><span><span>                })</span><span>;
</span></span><span><span>        }
</span></span><span><span>
</span></span><span><span>        // Fetch data immediately and then every 2 seconds
</span></span><span><span>        fetchData();
</span></span><span><span>        // Do not forget to clear this interval 
</span></span><span><span>        setInterval(fetchData, 5000);
</span></span><span><span>    &lt;/</span><span>script</span><span>&gt;
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So, in the above example, you will see a function called <code><!--[-->fetchData<!--]--></code>, which is being called every 5 seconds. Each time it runs, it fetches data from <code><!--[-->/getData<!--]--></code> and updates the web page.<!--]--></p><p><!--[-->After closing the project, if you observe the API calls, you will notice that it is being called repeatedly at regular intervals. See the screenshot below for reference.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Zoom in on the page and observe the timing—it’s just 2, 4, 6, or 7 milliseconds, which is very low. The resources used are also minimal, just a few bytes.<!--]--></p><p><!--[-->So, short polling is only recommended when you need to load small amounts of data quickly on the web, and your requests are fast. For large-scale requirements, it is not recommended.<!--]--></p><h3><a><!--[-->Characteristics of Short Polling<!--]--></a></h3><ol><!--[--><li><!--[-->Short-lived connection<!--]--></li><li><!--[-->No persistent data<!--]--></li><li><!--[-->Low resource usage<!--]--></li><li><!--[-->Scalability issues<!--]--></li><!--]--></ol><p><!--[-->That’s all for this topic! See you in long polling.<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How the Web Works]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-2-2/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-2-2/</guid>
            <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Network is a core part of software, as the frontend needs data and the backend sends it. All of this happens through the network. How is data transferred over the internet? How does it reach the client, and what protocols are required? These are essential concepts for software development. We need to understand what happens when we type 'google.com,'' what DNS is, and its role in the process.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->As the name suggests, <strong><!--[-->Long Polling<!--]--></strong> means something is long, delayed, or not happening instantly.<!--]--></p><p><!--[-->First, if you haven't checked what <strong><!--[-->Short Polling<!--]--></strong> is, read this blog—it will take just 2 minutes to learn: <strong><!--[-->[<a><!--[--><!--[-->Read Here<!--]--><!--]--></a>]<!--]--></strong><!--]--></p><h3><a><!--[-->Quick Recap of Short Polling<!--]--></a></h3><p><!--[-->In <strong><!--[-->short polling<!--]--></strong>, the system checks for data at regular intervals, useful for chat notifications or small applications where data is light, and backend or database operations are minimal.<!--]--></p><h3><a><!--[-->What’s Different in Long Polling?<!--]--></a></h3><p><!--[-->Everything is the same, except for one key difference—you don’t get a response immediately after one request. Instead, the server <strong><!--[-->waits<!--]--></strong> until the requested data <strong><!--[-->changes<!--]--></strong> before responding.<!--]--></p><h3><a><!--[-->What if the data never changes?<!--]--></a></h3><p><!--[-->Good question! If no change happens within a set <strong><!--[-->timeout<!--]--></strong>, the server responds with whatever data is available, even if unchanged.<!--]--></p><p><!--[-->So, in <strong><!--[-->long polling<!--]--></strong>, the connection stays open until new data arrives or the timeout occurs. 🚀<!--]--></p><p><!--[-->4o<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Characteristics of Long Polling<!--]--></a></h3><ul><!--[--><li><!--[-->Single long-lived connection<!--]--></li><li><!--[-->Connection stays open until new data arrives or a timeout occurs<!--]--></li><li><!--[-->Reduces the number of API calls, lowering latency<!--]--></li><li><!--[-->Puts load on the server due to persistent connections, leading to scaling issues<!--]--></li><!--]--></ul><h3><a><!--[-->Use Cases<!--]--></a></h3><ul><!--[--><li><!--[-->Real-time collaboration<!--]--></li><li><!--[-->When data updates every few minutes or hours, not in seconds<!--]--></li><!--]--></ul><h3><a><!--[-->How It Works<!--]--></a></h3><p><!--[-->When the frontend (client) makes a request, it also sends an identifier (like the last updated data ID). The backend checks this against the current data.<!--]--></p><ul><!--[--><li><!--[-->If new data is available, the server responds immediately.<!--]--></li><li><!--[-->If no change is found, the connection stays open and waits.<!--]--></li><li><!--[-->When the server detects a change (from any request), it sends the updated data to all waiting clients.<!--]--></li><!--]--></ul><h3><a><!--[-->Let's Code!<!--]--></a></h3><p><!--[-->Now, it's time to code! Clone this repo if you want to see it live:<!--]--></p><p><!--[--><strong><!--[--><a><!--[--><!--[-->GitHub Repo<!--]--><!--]--></a><!--]--></strong> 🚀<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span>git</span><span> clone</span><span> https</span><span>:</span><span>//github.com/ashumsd7/web-communication-techniques.git
</span></span><span><span>cd</span><span> web</span><span>-</span><span>communication</span><span>-</span><span>techniques
</span></span><span><span>npm</span><span> i
</span></span><span><span>npm</span><span> run</span><span> long</span><span>-</span><span>polling
</span></span><span><span>-------------------
</span></span><span><span>Open</span><span> browser</span><span> and</span><span> type
</span></span><span><span>http</span><span>:</span><span>//localhost:3000/ // Observe API Calls in network tab
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[--><img><!--]--></p><h3><a><!--[-->Let's Understand the Code<!--]--></a></h3><h3><a><!--[-->1. Server<!--]--></a></h3><p><!--[-->If you look at the code below, we have an endpoint <code><!--[-->/getData<!--]--></code>. When someone hits <strong><!--[--><a><!--[--><!--[-->localhost:3000/getData<!--]--><!--]--></a><!--]--></strong>, the frontend calls this API with an <strong><!--[-->empty string<!--]--></strong> the first time.<!--]--></p><ul><!--[--><li><!--[-->The server <strong><!--[-->checks for changes<!--]--></strong> and responds with <code><!--[-->"2013 Congress Government"<!--]--></code>.<!--]--></li><li><!--[-->The frontend <strong><!--[-->receives this data<!--]--></strong>, prints it, and then <strong><!--[-->calls <code><!--[-->fetchData<!--]--></code> again<!--]--></strong>, sending <code><!--[-->"2013 Congress Government"<!--]--></code> as the last received data.<!--]--></li><li><!--[-->Now, if there's <strong><!--[-->no change<!--]--></strong>, the server <strong><!--[-->holds<!--]--></strong> all new requests in a waitlist.<!--]--></li><li><!--[-->Whenever new data arrives, the server <strong><!--[-->releases all waiting requests<!--]--></strong> and sends the updated data.<!--]--></li><!--]--></ul><div><span></span><!--[--><pre><!--[--><code><span><span>// Initial data value
</span></span><span><span>let data = "2013 Congress Government";
</span></span><span><span>
</span></span><span><span>// Array to store waiting client connections
</span></span><span><span>const waitingClientList = [];
</span></span><span><span>
</span></span><span><span>/**
</span></span><span><span> *</span><span> Long polling endpoint to get data
</span></span><span><span> *</span><span> Clients connect and wait for data changes
</span></span><span><span> */
</span></span><span><span>app.get("/getData", (req, res) =&gt; {
</span></span><span><span>  console.log("\n🔄 GET /getData");
</span></span><span><span>  console.log("📱 Client's last known data:", req.query.lastData);
</span></span><span><span>  console.log("💾 Current server data:", data);
</span></span><span><span>
</span></span><span><span>  // If data has changed since client's last request
</span></span><span><span>  if (data !== req.query.lastData) {
</span></span><span><span>    console.log("✨ Data changed - sending new data to client");
</span></span><span><span>    res.send(data);
</span></span><span><span>  } else {
</span></span><span><span>    // If no change, hold the connection
</span></span><span><span>    console.log("⏳ No data change - adding client to waiting list");
</span></span><span><span>    waitingClientList.push(res);
</span></span><span><span>    console.log("👥 Current waiting clients:", waitingClientList.length);
</span></span><span><span>  }
</span></span><span><span>});
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->Client when web page loads on <a><!--[--><!--[-->localhost:3000<!--]--><!--]--></a> first time<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span> &lt;</span><span>script</span><span>&gt;
</span></span><span><span>        let</span><span> lastData</span><span>=</span><span>""</span><span>;
</span></span><span><span>        function</span><span> fetchData</span><span>(</span><span>lastData</span><span>)</span><span> {
</span></span><span><span>            // first time u send the data with lastData as empty string
</span></span><span><span>            fetch</span><span>(</span><span>'</span><span>http://localhost:3000/getData?lastData=</span><span>'</span><span>+</span><span>lastData</span><span>)
</span></span><span><span>                .</span><span>then</span><span>(</span><span>response</span><span> =&gt;</span><span> response</span><span>.</span><span>text</span><span>())
</span></span><span><span>                .</span><span>then</span><span>(</span><span>data</span><span> =&gt;</span><span> {
</span></span><span><span>                    // serves sees the lastData is empty string and sends the data 
</span></span><span><span>                    // because the data is changed and u r putting the data in lastData and polling again
</span></span><span><span>                    document</span><span>.</span><span>getElementById</span><span>(</span><span>'</span><span>currentTime</span><span>'</span><span>).</span><span>textContent</span><span> =</span><span> data</span><span>;
</span></span><span><span>                    console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>Got the data from server  polling again with data</span><span>"</span><span>,</span><span>data</span><span>);
</span></span><span><span>                    lastData</span><span>=</span><span>data</span><span>;
</span></span><span><span>                    fetchData</span><span>(</span><span>data</span><span>);
</span></span><span><span>        
</span></span><span><span>                    // after getting the data polling again
</span></span><span><span>               
</span></span><span><span>                })
</span></span><span><span>                .</span><span>catch</span><span>(</span><span>error</span><span> =&gt;</span><span> {
</span></span><span><span>                    console</span><span>.</span><span>error</span><span>(</span><span>'</span><span>Error fetching data:</span><span>'</span><span>,</span><span> error</span><span>);
</span></span><span><span>                });
</span></span><span><span>        }
</span></span><span><span>
</span></span><span><span>        // Fetch data immediately and then every 2 seconds
</span></span><span><span>        fetchData</span><span>();
</span></span><span><span>      
</span></span><span><span>    &lt;/</span><span>script</span><span>&gt;
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><h3><a><!--[-->When data changes<!--]--></a></h3><h3><a><!--[-->When Data Changes<!--]--></a></h3><p><!--[-->Now, someone needs to update the data from anywhere. So, we have created an endpoint to update the data:<!--]--></p><p><!--[--><strong><!--[--><a><!--[--><!--[-->http://localhost:3000/updateData?newData=BJP_GOVT_2014<!--]--><!--]--></a><!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->When this request is made, the server <strong><!--[-->detects the data change<!--]--></strong>.<!--]--></li><li><!--[-->It then <strong><!--[-->notifies all waiting clients<!--]--></strong>.<!--]--></li><li><!--[-->Any client that previously had <code><!--[-->"2013 Congress Government"<!--]--></code> will now receive <code><!--[-->"BJP_GOVT_2014"<!--]--></code>.<!--]--></li><!--]--></ul><p><!--[-->This demonstrates how <strong><!--[-->long polling<!--]--></strong> works—holding requests and responding only when new data is available. 🚀<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->Server Update Data code<!--]--></p><div><span></span><!--[--><pre><!--[--><code><span><span> */
</span></span><span><span>app</span><span>.</span><span>get</span><span>(</span><span>"</span><span>/updateData</span><span>"</span><span>,</span><span> (</span><span>req</span><span>,</span><span> res</span><span>)</span><span> =&gt;</span><span> {
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>\n</span><span>🔄 GET /updateData</span><span>"</span><span>);
</span></span><span><span>  const</span><span> newData</span><span> =</span><span> req</span><span>.</span><span>query</span><span>.</span><span>newData</span><span>;
</span></span><span><span>  
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>📝 Old data:</span><span>"</span><span>,</span><span> data</span><span>);
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>✨ New data:</span><span>"</span><span>,</span><span> newData</span><span>);
</span></span><span><span>  
</span></span><span><span>  // Update the data
</span></span><span><span>  data</span><span> =</span><span> newData</span><span>;
</span></span><span><span>
</span></span><span><span>  // Notify all waiting clients
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>`</span><span>📢 Notifying </span><span>${</span><span>waitingClientList</span><span>.</span><span>length</span><span>}</span><span> waiting clients</span><span>`</span><span>);
</span></span><span><span>  waitingClientList</span><span>.</span><span>forEach</span><span>(</span><span>client</span><span> =&gt;</span><span> {
</span></span><span><span>    client</span><span>.</span><span>send</span><span>(</span><span>data</span><span>);
</span></span><span><span>  });
</span></span><span><span>
</span></span><span><span>  // Clear the waiting list
</span></span><span><span>  waitingClientList</span><span>.</span><span>length</span><span> =</span><span> 0</span><span>;
</span></span><span><span>  console</span><span>.</span><span>log</span><span>(</span><span>"</span><span>🧹 Waiting list cleared</span><span>"</span><span>);
</span></span><span><span>
</span></span><span><span>  res</span><span>.</span><span>send</span><span>(</span><span>"</span><span>Data updated successfully</span><span>"</span><span>);
</span></span><span><span>});
</span></span></code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So, that’s all about <strong><!--[-->Long Polling<!--]--></strong>! 🎯<!--]--></p><p><!--[-->It was a long blog, but I wanted to make sure you understand it well.<!--]--></p><p><!--[-->See you in the next topic! 👋 Bye-bye! 🚀<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introduction to Web hooks]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-2-5/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-2-5/</guid>
            <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Understand WebHooks' functionalities. Learn how they trigger instant notifications and events, allowing frontend systems to react promptly to external changes or specific actions, ensuring responsiveness and agility.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->This is another technique used for real-time communication, commonly used in applications without being noticed. We use multiple services, and one such service is <strong><!--[-->Webhooks<!--]--></strong>. In this blog, we’ll understand Webhooks using the example of payment processing—how a payment is initiated from the browser and the confirmation received.<!--]--></p><h3><a><!--[-->Polling vs Webhooks in Payment Processing<!--]--></a></h3><p><!--[-->Below is a screenshot comparing <strong><!--[-->Polling<!--]--></strong> and <strong><!--[-->Webhooks<!--]--></strong> for handling payments. Both methods are used for payment processing, but let’s first discuss <strong><!--[-->Polling<!--]--></strong>.<!--]--></p><h3><a><!--[-->Polling<!--]--></a></h3><p><!--[-->In the polling method, API requests are sent to a payment service to check if the payment is processed, completed, or failed. The challenge with polling is that it’s a repetitive process, constantly checking for payment status, leading to unnecessary API calls.<!--]--></p><p><!--[-->This results in wasted resources as the server checks repeatedly, even when there’s no update, causing blocking and waiting. It’s an inefficient way to handle requests.<!--]--></p><p><!--[-->For more on Polling, read here: <a><!--[--><!--[-->Practical Guide to Long Polling<!--]--><!--]--></a>.<!--]--></p><p><!--[--><strong><!--[-->Webhooks<!--]--></strong> offer a more efficient solution, notifying in real-time whenever the status changes. Stay tuned to learn more about how Webhooks solve this problem<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[-->Webhooks<!--]--></a></h3><p><!--[-->Webhooks are <strong><!--[-->a way for applications to communicate with each other in real-time by sending data over HTTP<!--]--></strong>. They are triggered by specific events, such as a payment transaction. In this example, we provide a callback to a third-party service, which calls you back once the job is done. It’s an event-driven mechanism where webhooks know when to call and what methods to invoke, depending on the status.<!--]--></p><p><!--[-->There is also a retry mechanism for verification and acknowledgment.<!--]--></p><h3><a><!--[-->Things to Remember<!--]--></a></h3><ul><!--[--><li><!--[-->Real-time communication<!--]--></li><li><!--[-->Event-driven<!--]--></li><li><!--[-->POST REST API<!--]--></li><li><!--[-->Payload, authorization, and secret key<!--]--></li><li><!--[-->Retry, verification, and acknowledgment<!--]--></li><!--]--></ul><h3><a><!--[-->Usage<!--]--></a></h3><ul><!--[--><li><!--[-->Notification systems<!--]--></li><li><!--[-->Data synchronization (performing other tasks once the main work is done)<!--]--></li><li><!--[-->Automation (For example, on GitHub, once you push to the main branch, a mail is generated for deployment. This is all possible because of webhooks, or we can say webhooks are used behind the scenes.)<!--]--></li><!--]--></ul><p><!--[--><img><!--]--></p><p><!--[-->If you visit the GitHub Webhook page, you will see a similar definition:<!--]--></p><p><!--[--><a><!--[--><!--[-->GitHub Webhooks Documentation<!--]--><!--]--></a><!--]--></p><p><!--[--><strong><!--[-->Webhooks provide a way for notifications to be delivered to an external web server whenever certain events occur on GitHub. You can add a webhook after watching some tutorials on Google.<!--]--></strong><!--]--></p><p><!--[-->If you want to create a webhook in Node.js or enable something on GitHub, you can try it. But for now, I’m stopping the writing. We’ll meet in another blog.<!--]--></p><p><!--[-->So that's all for this article. Let's meet in the next one.  Take care, bye-bye!<!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[01 Networking - How the Web Works: Understanding the Architecture of the Web]]></title>
            <link>https://rahulaher.netlify.app/articles/how-web-works/</link>
            <guid>https://rahulaher.netlify.app/articles/how-web-works/</guid>
            <pubDate>Fri, 10 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA['Networking - How Web Works?' provides an in-depth understanding of how the internet facilitates communication between users and servers. It begins with the basics of web browsers sending HTTP/HTTPS requests to servers and receiving responses. The role of DNS (Domain Name System) in translating domain names into IP addresses, which act as unique identifiers for devices on a network, is crucial.The topic delves into protocols like TCP/IP, which ensure reliable data transmission across networks, and explores concepts such as request-response cycles and status codes that define server interactions. ]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->How the Web Works: Understanding the Architecture of the Web<!--]--></a></h2><p><!--[-->The Client-Server relationship is the most common way for a webpage to be shared across multiple computers.
The client sends requests for the webpage, which is then loaded and displayed by the server.<!--]--></p><img><p><!--[-->For Example: When we go to any restaurant, Whatever food we want to order we tell it to waiter or waitress
of the restaurant, Then waiter goes to the chef &amp; tell him to prepare our food. When our food is ready the
waiter brings food to our table, Similar things happen in web. Here we are the "client" &amp; waiter act as a
"server". when we order something it means we are sending a HTTP request. when waiter brings us food it
can be related to "200 OK " message from the server.<!--]--></p><img><p><!--[-->Below are Important components which plays vital role in communication between client &amp; server<!--]--></p><h3><a><!--[-->Internet connection:<!--]--></a></h3><p><!--[-->Internet is a string of ones and zeroes that moves from one computer to another. When someone says 'the
internet', they're referring to a network of computers that connect people to each other, allowing them
to send and receive information without human intervention. Most users access the internet via broadband.<!--]--></p><h3><a><!--[-->TCP/IP:<!--]--></a></h3><p><!--[-->Transmission Control Protocol and Internet Protocol are the core messaging protocols for TCP/IP, the most
common networking protocol in use today. You've probably heard of it: It's the protocol that phone numbers,
domain names, email addresses, chat conversations, and all other bits of data -- from your computer to a
website to every other device on earth -- travel through on their way from Point A to Point B.<!--]--></p><h3><a><!--[-->DNS:<!--]--></a></h3><p><!--[-->We need to locate the website's IP address before we can access the website. This means we'll look up the
address of the shop in a directory (like an address book) and then type in the relevant web address together
with the 'port' (which tells browsers where to send HTTP requests). The browser will then look up that IP
address using DNS, find out which server you want to connect to and retrieve it.<!--]--></p><h3><a><!--[-->HTTP:<!--]--></a></h3><p><!--[-->Hypertext Transfer Protocol (HTTP) is the language that clients and servers use to communicate and exchange
data over a network.<!--]--></p><h3><a><!--[-->Component files:<!--]--></a></h3><p><!--[-->A website is made up of many different files. These files come in two main types: code (HTML, CSS, and
JavaScript) and assets (all the other stuff that makes up your website).<!--]--></p><h3><a><!--[-->So how web works?<!--]--></a></h3><p><!--[-->The browser goes to the DNS server, and finds the real address of the server that the website lives on
(you find the address of the shop). The browser sends an HTTP request message to the server, asking it
to send a copy of the website to the client (you go to the shop and order your goods). This message,
and all other data sent between the client and the server, is sent across your internet connection using
TCP/IP. If the server approves the client's request, it sends a "200 OK" message telling you that you
can look at that website! Here it is," and then starts sending file chunks or files as a series of small
packets or messages called data packets. The browser assembles these small messages into different web
pages which it displays to you.<!--]--></p><h2><a><!--[-->How does the internet work?<!--]--></a></h2><h4><a><!--[-->How did it all start?<!--]--></a></h4><ul><!--[--><li><!--[-->During the Cold War, the United States and the Soviet Union competed to be the best.<!--]--></li><li><!--[-->In 1957, the Soviet Union surprised everyone by launching Sputnik 1, the first man-made satellite.<!--]--></li><li><!--[-->To keep up, the U.S. created ARPA (Advanced Research Project Agency) to stay ahead in science.<!--]--></li><li><!--[-->ARPA made ARPANET, the first big computer network using packet switching.<!--]--></li><li><!--[-->ARPANET laid the foundation for the internet we use today, changing how we connect and work together.<!--]--></li><li><!--[-->The U.S. Advanced Research Projects Agency Network (ARPANET) was the first big computer network. It
started in 1969 and stopped in 1989. ARPANET was mainly for academics and research.<!--]--></li><!--]--></ul><img><h3><a><!--[-->WWW came into the picture:<!--]--></a></h3><p><!--[-->We wanted to easily share research papers, but couldn't because there was no automatic way to do it.<!--]--></p><p><!--[-->Then, Mr. Tim Berners-Lee created the World Wide Web (www). It lets us store and access documents online.
However, back then, we couldn't search for things on the website.<!--]--></p><p><!--[-->This is the world's first <strong><!--[-->website<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->The World Wide Web, also called the Web, is a place on the Internet where we find documents and other
stuff. Each thing has its special address called a URL, like <a><!--[--><!--[-->https://example.com/<!--]--><!--]--></a>. These things can link
to each other, and we can access them through the internet.<!--]--></li><!--]--></ul><p><!--[-->The Internet is the backbone of the Web, the technical infrastructure that makes the Web possible. At its
most basic, the Internet is a large network of computers which communicate all together.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[API Architecture - Design Best Practices for REST APIs]]></title>
            <link>https://rahulaher.netlify.app/articles/api-architecture/</link>
            <guid>https://rahulaher.netlify.app/articles/api-architecture/</guid>
            <pubDate>Sun, 26 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[REST which stands for Representational State Transfer is an architectural style that governs how APIs are designed and built. REST’s popularity and ease of implementation make it the most preferred API architectural style for modern-day software development as compared to other protocols such as SOAP (simple object access protocol). REST APIs or RESTful web services have become the backbone for efficient communication between client and server in modern-day software development. However, to build efficient and robust REST APIs, it is crucial to follow some standard best practices. In this blog, we’ll explore REST API best practices that can help you build scalable, maintainable, secure, and robust APIs.]]></description>
            <content:encoded><![CDATA[<p><!--[-->REST which stands for Representational State Transfer is an architectural style that governs how APIs are designed and built. REST’s popularity and ease of implementation make it the most preferred API architectural style for modern-day software development as compared to other protocols such as SOAP (simple object access protocol).<!--]--></p><p><!--[-->REST APIs or RESTful web services have become the backbone for efficient communication between client and server in modern-day software development. However, to build efficient and robust REST APIs, it is crucial to follow some standard best practices.<!--]--></p><p><!--[-->In this blog, we’ll explore REST API best practices that can help you build scalable, maintainable, secure, and robust APIs.<!--]--></p><h2><a><!--[-->API Architecture - Design Best Practices for REST APIs<!--]--></a></h2><p><!--[-->In general, web services have been in existence for just as long as the HTTP protocol has existed. But, since the advent of cloud computing, they have become the ubiquitous method of enabling client interaction with services and data.<!--]--></p><p><!--[-->As a developer, I have been lucky enough to work with some SOAP services that are still around @ work. But, I’ve largely played with REST, which is a resource-based architectural style for developing APIs and web services.<!--]--></p><p><!--[-->For a great chunk of my career, <strong><!--[-->I have been involved in projects either building, designing, and using APIs.<!--]--></strong><!--]--></p><p><!--[-->Most of the APIs I have seen “claimed” to be <strong><!--[-->“RESTful”<!--]--></strong> — <em><!--[-->meaning compliant with the principles and constraints of REST architecture<!--]--></em>.<!--]--></p><p><!--[-->Yet, there are a few handful I have worked with that give <strong><!--[-->REST a very, very bad rep.<!--]--></strong><!--]--></p><p><!--[-->Inaccurate usage of HTTP status codes, plain text responses, inconsistent schemas, verbs inserted in the endpoints… <strong><!--[-->I feel like I’ve seen it all<!--]--></strong> (or at least, a good chunk).<!--]--></p><p><!--[-->So, I decided to write up a piece describing what I personally think are some <strong><!--[-->best practices when it comes to designing REST APIs.<!--]--></strong><!--]--></p><p><!--[-->Just so we’re clear…<!--]--></p><p><!--[-->I do not claim to be the authority, or mean to infer that the following practices are 100% in sync with any “holy REST principles” (<em><!--[-->if there even is such a thing in existence<!--]--></em>). I have pieced these thoughts from my own experiences building, and working with different APIs throughout my career.<!--]--></p><p><!--[-->Also, I do not pretend to have mastered REST API design, either! I believe it is an <strong><!--[-->art/sport<!--]--></strong> — the more you practice, the better you get.<!--]--></p><p><!--[-->I will list out some code snippets as “examples of bad design”. If they look like something you would write, that’s fine! 🙂 The only thing that matters is that we learn together.<!--]--></p><p><!--[-->Here are some tips, advice, and guidance to designing great REST APIs that will make your consumers (and developers) happy.<!--]--></p><h2><a><!--[-->1. Learn the basics of HTTP<!--]--></a></h2><p><!--[-->If you aspire to build a well-designed <strong><!--[-->REST API<!--]--></strong>, you must know the basics of the <strong><!--[-->HTTP protocol<!--]--></strong>. I firmly believe <strong><!--[-->this will help you make good design choices.<!--]--></strong><!--]--></p><p><!--[-->I find the Overview of HTTP on the Mozilla Developer Network docs to be a pretty comprehensive reference for this topic.<!--]--></p><p><!--[-->Although, as far as REST API design is concerned, here is a TLDR of HTTP applied to RESTful Design:<!--]--></p><p><!--[-->HTTP has verbs (actions or methods): GET, POST, PUT, PATCH and DELETE are most common.
REST is resource-oriented and a resource is represented by an URI: /library/
An endpoint is the combination of a verb and an URI, example: GET: /books/
An endpoint can be interpreted as an action performed on a resource. Example: POST: /books/ may mean "Create a new book".
At a high-level, verbs map to CRUD operations: GET means Read, POST means Create, PUT and PATCH mean Update, and DELETE means Delete
A response’s status is specified by its status code: 1xx for information, 2xx for success, 3xx for redirection, 4xx for client errors and 5xx for server errors
Of course you can use other things the HTTP protocol offers for REST API design, but these are the basic things I believe you must keep in mind.<!--]--></p><h2><a><!--[-->2. Do not return plain text<!--]--></a></h2><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Eventual vs Strong Consistency in Distributed Databases]]></title>
            <link>https://rahulaher.netlify.app/articles/eventual-vs-strong-consistency-in-distributed-databases/</link>
            <guid>https://rahulaher.netlify.app/articles/eventual-vs-strong-consistency-in-distributed-databases/</guid>
            <pubDate>Sat, 25 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[While consistency is vital, it’s essential to understand that achieving strong consistency in distributed systems can come at the expense of increased latency and reduced availability. Strong consistency may require additional coordination mechanisms that slow down operations. Therefore, choosing the appropriate consistency model involves striking a balance between data correctness and system performance, based on the specific requirements of the application and use case. Different systems may opt for eventual consistency or other weaker consistency models if absolute real-time consistency is not necessary for their functionality.]]></description>
            <content:encoded><![CDATA[<p><!--[-->While consistency is vital, it’s essential to understand that achieving strong consistency in distributed systems can come at the expense of increased latency and reduced availability. Strong consistency may require additional coordination mechanisms that slow down operations. Therefore, choosing the appropriate consistency model involves striking a balance between data correctness and system performance, based on the specific requirements of the application and use case. Different systems may opt for eventual consistency or other weaker consistency models if absolute real-time consistency is not necessary for their functionality.<!--]--></p><p><!--[-->Explanation of this topic starts with an analogy, taking an example from real life to understand the concept better.<!--]--></p><p><!--[-->I have the habit of writing something I call <em><!--[-->Tech Notes<!--]--></em> on my laptop daily to summarize technical concepts that I learn. It helps me to recollect them in an easier way whenever I want to.<!--]--></p><p><!--[-->But sometimes I used to worry about my laptop being stolen or what if it crashes. In response to the fear of losing Tech Notes, I started backing them up on my external Hard Disk. To further reduce the possibility of losing them, I also purchased a subscription of Dropbox.<!--]--></p><img><p><!--[-->Master-Slave Model (Image courtesy: Dropbox, Apple, Seagate)<!--]--></p><p><!--[-->Every fortnight, I update my external Hard Disk with revised and newly written Tech Notes and Dropbox gets updated as soon as I connect my laptop to the internet.<!--]--></p><p><!--[-->Here, I am using Hard Disk and Dropbox as source of reading Tech Notes while laptop is being used for reading as well as writing them. (Master-Slave Model)<!--]--></p><blockquote><!--[--><p><!--[-->Redundancy introduces Reliability.<!--]--></p><!--]--></blockquote><p><!--[-->Now let’s get to the point.<!--]--></p><h2><a><!--[-->Case 1: Eventual Consistency<!--]--></a></h2><p><!--[-->Whenever we use multiple replicas of a database to store data and let’s say a write request comes to one of the replicas. In such a situation, Databases had to discover a strategy to make this write request at one replica reach other replicas so that they all could also write data of the request and become consistent.<!--]--></p><blockquote><!--[--><p><!--[-->Consistency here means that a read request for an entity made to any of the nodes of the database should return the same data.<!--]--></p><!--]--></blockquote><p><!--[-->Eventual consistency makes sure that data of each node of the database gets consistent eventually. Time taken by the nodes of the database to get consistent may or may not be defined.<!--]--></p><p><!--[-->Data getting consistent eventually means it will take time for updates to reach other replicas. So what?This implies that if someone reads from a replica which is not updated yet (since replicas are updated eventually) then it may return stale data.<!--]--></p><img><p><!--[-->My Hard Disk also keeps stale data for a period of 15 days as it gets updated fortnightly. Let’s assume John, my friend comes after few days of updation and asks for my Hard Disk.<!--]--></p><blockquote><!--[--><p><!--[--><strong><!--[--><em><!--[-->John<!--]--></em><!--]--></strong>: I want your hard disk to read your Tech Notes.<br><strong><!--[--><em><!--[-->I<!--]--></em><!--]--></strong>: Sure, why not. But it hasn’t been updated since last few days.<br><strong><!--[--><em><!--[-->John<!--]--></em><!--]--></strong>: I am fine with it.<br><!--]--></p><!--]--></blockquote><p><!--[-->Now Hard Disk was supplied to John immediately (low latency) at the risk of having stale data in it. But I am sure about the fact that it will get updated when the next fortnight starts.<!--]--></p><blockquote><!--[--><p><!--[-->Eventual consistency offers low latency at the risk of returning stale data<!--]--></p><!--]--></blockquote><p><!--[-->While on the other hand, we have something known as Strong Consistency.<!--]--></p><h2><a><!--[-->Case 2: Strong Consistency<!--]--></a></h2><p><!--[-->It says data will get passed on to all the replicas as soon as a write request comes to one of the replicas of the database.But during the time these replicas are being updated with new data, response to any subsequent read/write requests by any of the replicas will get delayed as all replicas are busy in keeping each other consistent.<!--]--></p><p><!--[-->As soon as they become consistent, they start to take care of the requests that have come at their door.<!--]--></p><blockquote><!--[--><p><!--[-->Nothing is for free.<!--]--></p><!--]--></blockquote><img><p><!--[-->This time my friend Veronica comes and asks for my Tech Notes.<!--]--></p><blockquote><!--[--><p><!--[--><strong><!--[--><em><!--[-->Veronica<!--]--></em><!--]--></strong>: I want your latest Tech Notes.
<strong><!--[--><em><!--[-->I<!--]--></em><!--]--></strong>: Sure, why not. I will share a Dropbox link with you.But Veronica, access it after few minutes as I have written anew Tech Note on laptop which will get synced with myDropbox account in 2–3 minutes.<!--]--></p><!--]--></blockquote><p><!--[-->Now Veronica was able to access up-to-date Tech Notes but after few minutes of delay.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><h2><a><!--[-->Strong Consistency offers up-to-date data but at the cost of high latency.
While Eventual consistency offers low latency but may reply to read requests with stale data since all nodes of the database may not have the updated data.<!--]--></a></h2><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rate Limiting]]></title>
            <link>https://rahulaher.netlify.app/articles/rate-limiting/</link>
            <guid>https://rahulaher.netlify.app/articles/rate-limiting/</guid>
            <pubDate>Fri, 24 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Rate limiting runs within an application, rather than running on the web server itself. Typically, rate limiting is based on tracking the IP addresses that requests are coming from, and tracking how much time elapses between each request. The IP address is the main way an application identifies who or what is making the request. A rate limiting solution measures the amount of time between each request from each IP address, and also measures the number of requests within a specified timeframe. If there are too many requests from a single IP within the given timeframe, the rate limiting solution will not fulfill the IP address's requests for a certain amount of time.]]></description>
            <content:encoded><![CDATA[<p><!--[-->Rate limiting runs within an application, rather than running on the web server itself. Typically, rate limiting is based on tracking the IP addresses that requests are coming from, and tracking how much time elapses between each request. The IP address is the main way an application identifies who or what is making the request.<!--]--></p><p><!--[-->A rate limiting solution measures the amount of time between each request from each IP address, and also measures the number of requests within a specified timeframe. If there are too many requests from a single IP within the given timeframe, the rate limiting solution will not fulfill the IP address's requests for a certain amount of time.<!--]--></p><p><!--[-->Essentially, a rate-limited application will say, "Hey, slow down," to unique users that are making requests at a rapid rate. This is comparable to a police officer who pulls over a driver for exceeding the road's speed limit, or to a parent who tells their child not to eat so much candy in such a short span of time.<!--]--></p><h2><a><!--[-->What Is Rate Limiting?<!--]--></a></h2><p><!--[-->Rate limiting is a technique to limit network traffic to prevent users from exhausting system resources. Rate limiting makes it harder for malicious actors to overburden the system and cause attacks like <em><!--[-->Denial of Service (DoS)<!--]--></em>. This involves attackers flooding a target system with requests and consuming too much network capacity, storage, and memory.<!--]--></p><p><!--[-->APIs that use rate limiting can throttle or temporarily block any client that tries to make too many API calls. It might slow down a throttled user’s requests for a specified time or deny them altogether. Rate limiting ensures that legitimate requests can reach the system and access information without impacting the overall application’s performance.<!--]--></p><p><!--[-->This is part of a series of articles about <em><!--[-->website security<!--]--></em>.<!--]--></p><h2><a><!--[-->Why Is Rate Limiting Important?<!--]--></a></h2><p><!--[-->Rate limiting is a crucial part of a modern cybersecurity strategy. It addresses several attack techniques that affect the incoming request rate.<!--]--></p><h3><a><!--[-->Distributed Denial of Service (DDoS)<!--]--></a></h3><p><!--[-->A <em><!--[-->DDoS attack<!--]--></em> attempts to overwhelm the target system with traffic, making it unavailable to legitimate users. Rate limiting mitigates DDoS threats by preventing any given traffic source from sending too many requests.<!--]--></p><p><!--[-->However, DDoS attacks have unique challenges because they distribute requests among many different sources, sometimes millions of IP addresses. Distributing the attack allows each source to avoid exceeding the rate limit. The security solution should identify the requests from different locations as part of a single attack, treating them as a single source.<!--]--></p><h3><a><!--[-->Credential Stuffing<!--]--></a></h3><p><!--[-->When attackers compromise databases containing user credentials, they can use these credentials to carry out further attacks. Usually, a bot stuffs stolen user credentials into a login form until a credential set works, allowing the bot to access the account.<!--]--></p><p><!--[-->Bots are often highly successful because they can submit hundreds or thousands of credentials into a login form. Rate limiting helps identify credit stuffing and block the bots before they take over the account.<!--]--></p><h3><a><!--[-->Brute Force<!--]--></a></h3><p><!--[-->A <em><!--[-->brute force attack<!--]--></em> is similar to a <em><!--[-->credential stuffing<!--]--></em> attack but without a list of real user credentials. In this case, the bot systematically submits randomly generated credentials until a credential set works.<!--]--></p><p><!--[-->A strongly secured <em><!--[-->web application<!--]--></em> sets password requirements that help mitigate brute force attacks, but large attacks can still consume many network resources. Rate limiting blocks these attacks to save system resources.<!--]--></p><h3><a><!--[-->Data Scraping and Theft<!--]--></a></h3><p><!--[-->Malicious actors often scrape target websites for information they can sell or use to undermine competitors. For example, an attacker might steal pricing information from an eCommerce company. A scraper bot can copy large amounts of data from target applications. Rate limiting detects and blocks <em><!--[-->data scraping<!--]--></em>.<!--]--></p><h3><a><!--[-->Inventory Denial<!--]--></a></h3><p><!--[-->An inventory denial or inventory hoarding attack involves sending bots to a target web application, where they start transactions without finishing them. It hoards the inventory, making it unavailable to legitimate users.<!--]--></p><h2><a><!--[-->How Does Rate Limiting Work?<!--]--></a></h2><p><!--[-->Rate limiting works within applications, not in the web server. Rate limiting typically involves tracking the IP addresses where requests originate and identifying the time lapsed between requests. IP addresses are the application’s main way to identify who has made each request.<!--]--></p><p><!--[-->Rate-limiting solutions work by measuring the elapsed time between every request from a given IP address and tracking the number of requests made in a set timeframe. If one IP address makes too many requests within the specified timeframe, the rate-limiting solution throttles the IP address and doesn’t fulfill its requests for the next timeframe.<!--]--></p><p><!--[-->Rate-limited applications can tell individual users to slow down if they make requests too frequently. It’s akin to police officers pulling over drivers that exceed the speed limit or parents telling their children not to eat too much sugar in a short period.<!--]--></p><h2><a><!--[-->Types of Rate Limits<!--]--></a></h2><p><!--[-->Administrators can define different parameters and methods and parameters when setting a rate limit. An organization’s chosen rate-limiting technique depends on the objective and the required level of restriction. Here are three main approaches to rate limiting that an organization might implement:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->User rate limits<!--]--></strong> —this is the most popular rate-limiting method. It identifies the number of requests a given user makes, usually by tracking the user’s IP address or API key. Users that exceed the specified rate limit will trigger the application to deny any further requests until the rate-limited timeframe resets. Alternatively, users can contact the developers to increase the rate limit.<!--]--></li><li><!--[--><strong><!--[-->Geographic rate limits<!--]--></strong> —developers can further secure applications in a given geographic region by setting a rate limit for each specific region for a specified timeframe. For example, developers might predict that users in a given region will be less active between midnight and 9:00 am and define a lower rate limit for this timeframe. This approach helps prevent suspicious traffic and further reduces the risk of an attack.<!--]--></li><li><!--[--><strong><!--[-->Server rate limits<!--]--></strong> —developers can set rate limits at the server level if they define a specific server to handle parts of an application. This approach provides more flexibility, allowing the developers to increase the rate limit on commonly used servers while decreasing the traffic limit on less active servers.<!--]--></li><!--]--></ul><h2><a><!--[-->What Are the Algorithms Used for Rate Limiting?<!--]--></a></h2><p><!--[-->There are several types of rate-limiting algorithms.<!--]--></p><h3><a><!--[-->Fixed-window Rate Limiting<!--]--></a></h3><p><!--[-->Fixed-window rate limiting algorithms restrict the number of requests allowed during a given timeframe (window). For instance, a server’s rate-limiting component might implement an algorithm that accepts up to 200 API requests per minute. There is a fixed timeframe starting from a specified time—the server will not serve more than 200 requests between 9:00 and 9:01, but the window will reset at 9:01, allowing another 200 requests until 9:02.<!--]--></p><p><!--[-->Developers can implement a fixed-window algorithm at the server or user level. Implementing the algorithm at the user level will restrict each user to 200 requests per minute. In contrast, a server-level algorithm will restrict the server, meaning that all users combined can make up to 200 requests per minute.<!--]--></p><h3><a><!--[-->Leaky Bucket Rate Limiting<!--]--></a></h3><p><!--[-->Leaky bucket rate limiting algorithms differ from fixed-window algorithms because they don’t rely on specified timeframes. They focus on the fixed length of request queues without considering the time. The server will service requests on a first-come, first-serve basis. New requests join the back of the queue. The server will drop a new request if it arrives when the queue is full.<!--]--></p><h3><a><!--[-->Sliding-window Rate Limiting<!--]--></a></h3><p><!--[-->Sliding-window rate limiting algorithms are similar to fixed-window algorithms except for the starting point of each time window. With sliding-window rate limiting, the timeframe only starts when a user makes a new request, not a predetermined time. For instance, if the first request arrives at 9:00:24 am (and the rate limit is 200 per minute), the server will allow up to 200 requests until 9:01:24.<!--]--></p><p><!--[-->Sliding-window algorithms help solve the issues affecting requests in fixed-window rate limiting. They also mitigate the starvation issue facing leaky bucket rate limiting by providing more flexibility.<!--]--></p><h3><a><!--[-->Rate Limiting with Imperva<!--]--></a></h3><p><!--[-->Imperva <em><!--[-->Advanced Bot Protection<!--]--></em> enforces rate limiting for websites, mobile apps and APIs, and can prevent business logic attacks from all access points. Gain seamless visibility and control over bot traffic to stop online fraud through account takeover or competitive price scraping.<!--]--></p><p><!--[-->Beyond bot protection, Imperva provides comprehensive protection for applications, APIs, and microservices:<!--]--></p><p><!--[--><em><!--[-->Web Application Firewall<!--]--></em> – Prevent attacks with world-class analysis of web traffic to your applications.<!--]--></p><p><!--[--><em><!--[-->Runtime Application Self-Protection (RASP)<!--]--></em> – Real-time attack detection and prevention from your application runtime environment goes wherever your applications go. Stop external attacks and injections and reduce your vulnerability backlog.<!--]--></p><p><!--[--><em><!--[-->API Security<!--]--></em> – Automated API protection ensures your API endpoints are protected as they are published, shielding your applications from exploitation.<!--]--></p><p><!--[--><em><!--[-->DDoS Protection<!--]--></em> – Block attack traffic at the edge to ensure business continuity with guaranteed uptime and no performance impact. Secure your on premises or cloud-based assets – whether you’re hosted in AWS, Microsoft Azure, or Google Public Cloud.<!--]--></p><p><!--[--><em><!--[-->Attack Analytics<!--]--></em> – Ensures complete visibility with machine learning and domain expertise across the application security stack to reveal patterns in the noise and detect application attacks, enabling you to isolate and prevent attack campaigns.<!--]--></p><p><!--[--><em><!--[-->Client-Side Protection<!--]--></em> – Gain visibility and control over third-party JavaScript code to reduce the risk of supply chain fraud, prevent data breaches, and client-side attacks.<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (GKCS)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Consistent Hashing Algorithm]]></title>
            <link>https://rahulaher.netlify.app/articles/consistent-hashing-algorithm/</link>
            <guid>https://rahulaher.netlify.app/articles/consistent-hashing-algorithm/</guid>
            <pubDate>Thu, 23 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Consistent hashing is a distributed hashing technique used in computer science and distributed systems to achieve load balancing and minimize the need for rehashing when the number of nodes in a system changes. It is particularly useful in distributed hash tables (DHTs), distributed caching systems, and other distributed storage systems. Consistent hashing is a technique used in computer systems to distribute keys (e.g., cache keys) uniformly across a cluster of nodes (e.g., cache servers). The goal is to minimize the number of keys that need to be moved when nodes are added or removed from the cluster, thus reducing the impact of these changes on the overall system.]]></description>
            <content:encoded><![CDATA[<p><!--[-->Consistent hashing is a distributed hashing technique used in computer science and distributed systems to achieve load balancing and minimize the need for rehashing when the number of nodes in a system changes. It is particularly useful in distributed hash tables (DHTs), distributed caching systems, and other distributed storage systems. Consistent hashing is a technique used in computer systems to distribute keys (e.g., cache keys) uniformly across a cluster of nodes (e.g., cache servers). The goal is to minimize the number of keys that need to be moved when nodes are added or removed from the cluster, thus reducing the impact of these changes on the overall system.<!--]--></p><p><!--[-->The target audience for this article falls into the following roles:<!--]--></p><ul><!--[--><li><!--[-->Tech workers<!--]--></li><li><!--[-->Students<!--]--></li><li><!--[-->Engineering managers<!--]--></li><!--]--></ul><p><!--[-->The prerequisite to reading this article is fundamental knowledge of system design components. This article does not cover an in-depth guide on individual system design components.<!--]--></p><p><!--[--><strong><!--[-->Disclaimer<!--]--></strong>: The system design questions are subjective. This article is written based on the research I have done on the topic and might differ from real-world implementations. Feel free to share your feedback and ask questions in the comments. Some of the linked resources are affiliates. As an Amazon Associate, I earn from qualifying purchases.<!--]--></p><p><!--[-->Consistent hashing is used in the system design of distributed systems such as the URL shortener, and Pastebin. I highly recommend reading the related articles to improve your system design skills.<!--]--></p><h2><a><!--[-->How does consistent hashing work?<!--]--></a></h2><p><!--[-->At a high level, consistent hashing performs the following operations:<!--]--></p><ol><!--[--><li><!--[-->The output of the hash function is placed on a virtual ring structure (known as the hash ring)<!--]--></li><li><!--[-->The hashed IP addresses of the nodes are used to assign a position for the nodes on the hash ring<!--]--></li><li><!--[-->The key of a data object is hashed using the same hash function to find the position of the key on the hash ring<!--]--></li><li><!--[-->The hash ring is traversed in the clockwise direction starting from the position of the key until a node is found<!--]--></li><li><!--[-->The data object is stored or retrieved from the node that was found<!--]--></li><!--]--></ol><h2><a><!--[-->Terminology<!--]--></a></h2><p><!--[-->The following terminology might be useful for you:<!--]--></p><ul><!--[--><li><!--[-->Node: a server that provides functionality to other services<!--]--></li><li><!--[-->Hash function: a mathematical function used to map data of arbitrary size to fixed-size values<!--]--></li><li><!--[-->Data partitioning: a technique of distributing data across multiple nodes to improve the performance and scalability of the system<!--]--></li><li><!--[-->Data replication: a technique of storing multiple copies of the same data on different nodes to improve the availability and durability of the system<!--]--></li><li><!--[-->Hotspot: A performance-degraded node in a distributed system due to a large share of data storage and a high volume of retrieval or storage requests<!--]--></li><li><!--[-->Gossip protocol: peer-to-peer communication technique used by nodes to periodically exchange state information<!--]--></li><!--]--></ul><h2><a><!--[-->Requirements<!--]--></a></h2><h3><a><!--[-->Functional Requirements<!--]--></a></h3><ul><!--[--><li><!--[-->Design an algorithm to horizontally scale the cache servers<!--]--></li><li><!--[-->The algorithm must minimize the occurrence of hotspots in the network<!--]--></li><li><!--[-->The algorithm must be able to handle internet-scale dynamic load<!--]--></li><li><!--[-->The algorithm must reuse existing network protocols such as TCP/IP<!--]--></li><!--]--></ul><h3><a><!--[-->Non-Functional Requirements<!--]--></a></h3><ul><!--[--><li><!--[-->Scalable<!--]--></li><li><!--[-->High availability<!--]--></li><li><!--[-->Low latency<!--]--></li><li><!--[-->Reliable<!--]--></li><!--]--></ul><h2><a><!--[-->Introduction<!--]--></a></h2><p><!--[-->A website can become extremely popular in a relatively short time frame. The increased load might swamp and degrade the performance of the website. The cache server is used to improve the latency and reduce the load on the system. The cache servers must scale to meet the dynamic demand as a fixed collection of cache servers will not be able to handle the dynamic load. In addition, the occurrence of multiple cache misses might swamp the origin server.<!--]--></p><h3><a><!--[-->Cache replication<!--]--></a></h3><img><p><!--[-->The replication of the cache improves the availability of the system. However, replication of the cache does not solve the dynamic load problem as only a limited data set can be cached. The tradeoffs of the cache replication approach are the following:<!--]--></p><p><!--[-->only a limited data set is cached
consistency between cache replicas is expensive to maintain
The spread is the number of cache servers holding the same key-value pair (data object). The load is the number of distinct data objects assigned to a cache server. The optimal configuration for the high performance of a cache server is to keep the spread and the load at a minimum.<!--]--></p><h3><a><!--[-->Dynamic hashing<!--]--></a></h3><img><p><!--[-->The data set must be partitioned (shard) among multiple cache servers (nodes) to horizontally scale. The replication and partitioning of nodes are orthogonal to each other. Multiple data partitions are stored on a single node for improved fault tolerance and increased throughput. The reasons for partitioning are the following:<!--]--></p><ul><!--[--><li><!--[-->A cache server is memory bound<!--]--></li><li><!--[-->Increased throughput<!--]--></li><!--]--></ul><h2><a><!--[-->Partitioning<!--]--></a></h2><p><!--[-->The data set is partitioned among multiple nodes to horizontally scale out. The different techniques for partitioning the cache servers are the following:<!--]--></p><ul><!--[--><li><!--[-->Random assignment<!--]--></li><li><!--[-->Single global cache<!--]--></li><li><!--[-->Key range partitioning<!--]--></li><li><!--[-->Static hash partitioning<!--]--></li><li><!--[-->Consistent hashing<!--]--></li><!--]--></ul><h3><a><!--[-->Random assignment<!--]--></a></h3><img><p><!--[-->The server distributes the data objects randomly across the cache servers. The random assignment of a large data set results in a relatively uniform distribution of data. However, the client cannot easily identify the node to retrieve the data due to random distribution. In conclusion, the random assignment solution will not scale to handle the dynamic load.<!--]--></p><h2><a><!--[-->Single global cache<!--]--></a></h2><img><p><!--[-->The server stores the whole data set on a single global cache server. The data objects are easily retrieved by the client at the expense of degraded performance and decreased availability of the system. In conclusion, the single global cache solution will not scale to handle the dynamic load.<!--]--></p><h2><a><!--[-->Key range partitioning<!--]--></a></h2><img><p><!--[-->The cache servers are partitioned using the key range of the data set. The client can easily retrieve the data from cache servers. The data set is not necessarily uniformly distributed among the cache servers as there might be more keys in a certain key range. In conclusion, the key range partitioning solution will not scale to handle the dynamic load.<!--]--></p><h2><a><!--[-->Static hash partitioning<!--]--></a></h2><img><p><!--[-->The identifiers (internet protocol address or domain name) of the nodes are placed on an array of length N. The modulo hash service computes the hash of the data key and executes a modulo N operation to locate the array index (node identifier) to store or retrieve a key. The time complexity to locate a node identifier (ID) in static hash partitioning is constant O(1).<!--]--></p><blockquote><!--[--><h3><a><!--[-->Static hash partitioning<!--]--></a></h3><p><!--[-->node ID = hash(key) mod N <br>
where N is the array’s length and the key is the key of the data object.<br><!--]--></p><!--]--></blockquote><p><!--[-->A collision occurs when multiple nodes are assigned to the same position on the array. The techniques to resolve a collision are open addressing and chaining. The occurrence of a collision degrades the time complexity of the cache nodes.<!--]--></p><h3><a><!--[-->Static hash partitioning; Node failure<!--]--></a></h3><img><p><!--[-->The static hash partitioning is not horizontally scalable. The removal of a node (due to a server crash) breaks the existing mappings between the keys and nodes. The keys must be rehashed to restore mapping between keys and nodes.<!--]--></p><h3><a><!--[-->Static hash partitioning; Node added<!--]--></a></h3><img><p><!--[-->New nodes must be provisioned to handle the increasing load. The addition of a node breaks the existing mappings between the keys and nodes. The following are the drawbacks of static hash partitioning:<!--]--></p><ul><!--[--><li><!--[-->Nodes will not horizontally scale to handle the dynamic load<!--]--></li><li><!--[-->The addition or removal of a node breaks the mapping between keys and nodes<!--]--></li><li><!--[-->Massive data movement when the number of nodes changes<!--]--></li><!--]--></ul><h3><a><!--[-->Static hash partitioning; Data movement due to node failure<!--]--></a></h3><img><p><!--[-->In conclusion, the data set must be rehashed or moved between nodes when the number of nodes changes. The majority of the requests in the meantime will result in cache misses. The requests are delegated to the origin server on cache misses. The heavy load on the origin server might swamp and degrade the service.<!--]--></p><h2><a><!--[-->Consistent hashing<!--]--></a></h2><img><p><!--[-->Consistent hashing is a distributed systems technique that operates by assigning the data objects and nodes a position on a virtual ring structure (hash ring). Consistent hashing minimizes the number of keys to be remapped when the total number of nodes changes.<!--]--></p><h3><a><!--[-->Hash function mapping<!--]--></a></h3><img><p><!--[-->The basic gist behind the consistent hashing algorithm is to hash both node identifiers and data keys using the same hash function. A uniform and independent hashing function such as message-digest 5 (MD5) is used to find the position of the nodes and keys (data objects) on the hash ring. The output range of the hash function must be of reasonable size to prevent collisions.<!--]--></p><h3><a><!--[-->Consistent hash ring<!--]--></a></h3><img><p><!--[-->The output space of the hash function is treated as a fixed circular space to form the hash ring. The largest hash value wraps around the smallest hash value. The hash ring is considered to have a finite number of positions.<!--]--></p><h3><a><!--[-->Consistent hashing; Positioning the nodes on the hash ring<!--]--></a></h3><img><p><!--[-->The following operations are executed to locate the position of a node on the hash ring4:<!--]--></p><ol><!--[--><li><!--[-->Hash the internet protocol (IP) address or domain name of the node using a hash function<!--]--></li><li><!--[-->The hash code is base converted<!--]--></li><li><!--[-->Modulo the hash code with the total number of available positions on the hash ring<!--]--></li><!--]--></ol><h3><a><!--[-->Consistent hashing; Node position<!--]--></a></h3><img><p><!--[-->Suppose the hash function produces an output space size of 10 bits (2¹⁰ = 1024), the hash ring formed is a virtual circle with a number range starting from 0 to 1023. The hashed value of the IP address of a node is used to assign a location for the node on the hash ring.<!--]--></p><h3><a><!--[-->Consistent hashing; Storing a data object (key)<!--]--></a></h3><img><p><!--[-->The key of the data object is hashed using the same hash function to locate the position of the key on the hash ring. The hash ring is traversed in the clockwise direction starting from the position of the key until a node is found. The data object is stored on the node that was found. In simple words, the first node with a position value greater than the position of the key stores the data object.<!--]--></p><h3><a><!--[-->Consistent hashing; Retrieving a data object (key)<!--]--></a></h3><img><p><!--[-->The key of the data object is hashed using the same hash function to locate the position of the key on the hash ring. The hash ring is traversed in the clockwise direction starting from the position of the key until a node is found. The data object is retrieved from the node that was found. In simple words, the first node with a position value greater than the position of the key must hold the data object.<!--]--></p><p><!--[-->Each node is responsible for the region on the ring between the node and its predecessor node on the hash ring. The origin server must be queried on a cache miss. In conclusion, the following operations are performed for consistent hashing7:<!--]--></p><ol><!--[--><li><!--[-->The output of the hash function such as MD5 is placed on the hash ring<!--]--></li><li><!--[-->The IP address of the nodes is hashed to find the position of the nodes on the hash ring<!--]--></li><li><!--[-->The key of the data object is hashed using the same hash function to locate the position of the key on the hash ring<!--]--></li><li><!--[-->Traverse the hash ring in the clockwise direction starting from the position of the key until the next node to identify the correct node to store or   retrieve the data object<!--]--></li><!--]--></ol><h3><a><!--[-->Consistent hashing; Deletion of a node<!--]--></a></h3><img><p><!--[-->The failure (crash) of a node results in the movement of data objects from the failed node to the immediate neighboring node in the clockwise direction. The remaining nodes on the hash ring are unaffected<!--]--></p><h3><a><!--[-->Consistent hashing; Addition of a node<!--]--></a></h3><img><p><!--[-->When a new node is provisioned and added to the hash ring, the keys (data objects) that fall within the range of the new node are moved out from the immediate neighboring node in the clockwise direction.<!--]--></p><blockquote><!--[--><h3><a><!--[-->Consistent hashing<!--]--></a></h3><p><!--[-->Average number of keys stored on a node = k/N <br>
where k is the total number of keys (data objects) and N is the number of nodes.<!--]--></p><!--]--></blockquote><p><!--[-->The deletion or addition of a node results in the movement of an average number of keys stored on a single node. Consistent hashing aid cloud computing by minimizing the movement of data when the total number of nodes changes due to dynamic load.<!--]--></p><h3><a><!--[-->Consistent hashing; Non-uniform positioning of nodes<!--]--></a></h3><img><p><!--[-->There is a chance that nodes are not uniformly distributed on the consistent hash ring. The nodes that receive a huge amount of traffic become hot spots resulting in cascading failure of the nodes.<!--]--></p><img><p><!--[-->The nodes are assigned to multiple positions on the hash ring by hashing the node IDs through distinct hash functions to ensure uniform distribution of keys among the nodes. The technique of assigning multiple positions to a node is known as a <strong><!--[--><em><!--[-->virtual node<!--]--></em><!--]--></strong>. The virtual nodes improve the load balancing of the system and prevent hot spots. The number of positions for a node is decided by the heterogeneity of the node. In other words, the nodes with a higher capacity are assigned more positions on the hash ring5.<!--]--></p><p><!--[-->The data objects can be replicated on adjacent nodes to minimize the data movement when a node crashes or when a node is added to the hash ring. In conclusion, <strong><!--[--><em><!--[-->consistent hashing<!--]--></em><!--]--></strong> resolves the problem of dynamic load.<!--]--></p><h2><a><!--[-->Consistent hashing implementation<!--]--></a></h2><h3><a><!--[-->Consistent hashing implementation; Binary search tree storing the node positions<!--]--></a></h3><img><p><!--[-->The self-balancing binary search tree <strong><!--[-->(BST)<!--]--></strong> data structure is used to store the positions of the nodes on the hash ring. The BST offers logarithmic O(log n) time complexity for search, insert, and delete operations. The keys of the BST contain the positions of the nodes on the hash ring.<!--]--></p><p><!--[-->The BST data structure is stored on a centralized highly available service. As an alternative, the BST data structure is stored on each node, and the state information between the nodes is synchronized through the <strong><!--[--><em><!--[-->gossip protocol<!--]--></em><!--]--></strong><!--]--></p><h3><a><!--[-->Consistent hashing implementation; Insertion of a data object (key)<!--]--></a></h3><img><p><!--[-->In the diagram, suppose the hash of an arbitrary key ‘xyz’ yields the hash code output 5. The successor BST node is 6 and the data object with the key ‘xyz’ is stored on the node that is at position 6. In general, the following operations are executed to insert a key (data object):<!--]--></p><ol><!--[--><li><!--[-->Hash the key of the data object<!--]--></li><li><!--[-->Search the BST in logarithmic time to find the BST node immediately greater than the hashed output<!--]--></li><li><!--[-->Store the data object in the successor node<!--]--></li><!--]--></ol><h3><a><!--[-->Consistent hashing implementation; Insertion of a node<!--]--></a></h3><img><p><!--[-->The insertion of a new node results in the movement of data objects that fall within the range of the new node from the successor node. Each node might store an internal or an external BST to track the keys allocated in the node. The following operations are executed to insert a node on the hash ring:<!--]--></p><ol><!--[--><li><!--[-->Insert the hash of the node ID in BST in logarithmic time<!--]--></li><li><!--[-->Identify the keys that fall within the subrange of the new node from the successor node on BST<!--]--></li><li><!--[-->Move the keys to the new node<!--]--></li><!--]--></ol><h3><a><!--[-->Consistent hashing implementation; Deletion of a node<!--]--></a></h3><img><p><!--[-->The deletion of a node results in the movement of data objects that fall within the range of the decommissioned node to the successor node. An additional external BST can be used to track the keys allocated in the node. The following operations are executed to delete a node on the hash ring:<!--]--></p><ol><!--[--><li><!--[-->Delete the hash of the decommissioned node ID in BST in logarithmic time<!--]--></li><li><!--[-->Identify the keys that fall within the range of the decommissioned node<!--]--></li><li><!--[-->Move the keys to the successor node<!--]--></li><!--]--></ol><h2><a><!--[-->What is the asymptotic complexity of consistent hashing?<!--]--></a></h2><p><!--[-->The asymptotic complexity of consistent hashing operations are the following:<!--]--></p><table><!--[--><thead><!--[--><tr><!--[--><th><!--[-->Operation<!--]--></th><th><!--[-->Time Complexity<!--]--></th><th><!--[-->Description<!--]--></th><!--]--></tr><!--]--></thead><tbody><!--[--><tr><!--[--><td><!--[-->Add a node<!--]--></td><td><!--[-->O(k/n + logn)<!--]--></td><td><!--[-->O(k/n) for redistribution of keys O(logn) for binary search tree traversal<!--]--></td><!--]--></tr><tr><!--[--><td><!--[-->Remove a node<!--]--></td><td><!--[-->O(k/n + logn)<!--]--></td><td><!--[-->O(k/n) for redistribution of keys O(logn) for binary search tree traversal<!--]--></td><!--]--></tr><tr><!--[--><td><!--[-->Add a key<!--]--></td><td><!--[-->O(logn)<!--]--></td><td><!--[-->O(logn) for binary search tree traversal<!--]--></td><!--]--></tr><tr><!--[--><td><!--[-->Remove a key<!--]--></td><td><!--[-->O(logn)<!--]--></td><td><!--[-->O(logn) for binary search tree traversal<!--]--></td><!--]--></tr><!--]--></tbody><!--]--></table><p><!--[-->where k = total number of keys, n = total number of nodes.<!--]--></p><h2><a><!--[-->How to handle concurrency in consistent hashing?<!--]--></a></h2><p><!--[-->The BST that stores the positions of the nodes is a mutable data structure that must be synchronized when multiple nodes are added or removed at the same time on the hash ring. The <em><!--[-->readers-writer lock<!--]--></em> is used to synchronize BST at the expense of a slight increase in latency.<!--]--></p><h2><a><!--[-->What hash functions are used in consistent hashing?<!--]--></a></h2><p><!--[-->An optimal hash function for consistent hashing must be fast and produce uniform output. The cryptographic hash functions such as <em><!--[-->MD5<!--]--></em>, and the secure hash algorithms <em><!--[-->SHA-1<!--]--></em> and <em><!--[-->SHA-256<!--]--></em> are not relatively fast. <em><!--[-->MurmurHash<!--]--></em> is a relatively cheaper hash function. The non-cryptographic hash functions like <em><!--[-->xxHash, MetroHash, or SipHash1–3<!--]--></em> are other potential candidates.<!--]--></p><h2><a><!--[-->What are the benefits of consistent hashing?<!--]--></a></h2><p><!--[-->The following are the advantages of consistent hashing3:<!--]--></p><ul><!--[--><li><!--[-->horizontally scalable<!--]--></li><li><!--[-->minimized data movement when the number of nodes changes<!--]--></li><li><!--[-->quick replication and partitioning of data<!--]--></li><!--]--></ul><p><!--[-->The following are the advantages of virtual nodes5:<!--]--></p><ul><!--[--><li><!--[-->load handled by a node is uniformly distributed across the remaining available nodes during downtime<!--]--></li><li><!--[-->the newly provisioned node accepts an equivalent amount of load from the available nodes<!--]--></li><li><!--[-->fair distribution of load among heterogenous nodes<!--]--></li><!--]--></ul><h2><a><!--[-->What are the drawbacks of consistent hashing?<!--]--></a></h2><p><!--[-->The following are the disadvantages of consistent hashing5:<!--]--></p><ul><!--[--><li><!--[-->cascading failure due to hot spots<!--]--></li><li><!--[-->non-uniform distribution of nodes and data<!--]--></li><li><!--[-->oblivious to the heterogeneity in the performance of nodes<!--]--></li><!--]--></ul><p><!--[-->The following are the disadvantages of virtual nodes 5, 6, 8:<!--]--></p><ul><!--[--><li><!--[-->when a specific data object becomes extremely popular, consistent hashing will still send all the requests for the popular data object to the same subset of nodes resulting in a degradation of the service<!--]--></li><li><!--[-->capacity planning is trickier with virtual nodes<!--]--></li><li><!--[-->memory costs and operational complexity increase due to the maintenance of BST<!--]--></li><li><!--[-->replication of data objects is challenging due to the additional logic to identify the distinct physical nodes<!--]--></li><li><!--[-->downtime of a virtual node affects multiple nodes on the ring<!--]--></li><!--]--></ul><h2><a><!--[-->What are the consistent hashing examples?<!--]--></a></h2><h3><a><!--[-->Consistent hashing example: Discord<!--]--></a></h3><img><p><!--[-->The discord server (discord space or chat room) is hosted on a set of nodes. The client of the discord chat application identifies the set of nodes that hosts a specific discord server using consistent hashing.<!--]--></p><h3><a><!--[-->Consistent hashing example: Amazon Dynamo<!--]--></a></h3><img><p><!--[-->The distributed NoSQL data stores such as Amazon DynamoDB, Apache Cassandra, and Riak use consistent hashing to dynamically partition the data set across the set of nodes. The data is partitioned for incremental scalability.<!--]--></p><h3><a><!--[-->Consistent hashing example: Vimeo<!--]--></a></h3><img><p><!--[-->The video storage and streaming service Vimeo uses consistent hashing for load balancing the traffic to stream videos.<!--]--></p><h3><a><!--[-->Consistent hashing example: Netflix<!--]--></a></h3><img><p><!--[-->The video streaming service Netflix uses consistent hashing to distribute the uploaded video content across the content delivery network (CDN).<!--]--></p><h2><a><!--[-->Consistent hashing algorithm real-world implementation<!--]--></a></h2><p><!--[-->The clients of Memcached (Ketama), and Amazon Dynamo support consistent hashing out of the box. The HAProxy includes the bounded-load consistent hashing algorithm for load balancing the traffic. As an alternative, the consistent hashing algorithm can be implemented, in the language of choice.<!--]--></p><h2><a><!--[-->Consistent hashing optimization<!--]--></a></h2><p><!--[-->Some of the popular variants of consistent hashing are the following:<!--]--></p><ul><!--[--><li><!--[-->Multi-probe consistent hashing<!--]--></li><li><!--[-->Consistent hashing with bounded loads<!--]--></li><!--]--></ul><blockquote><!--[--><h2><a><!--[-->Multi-probe consistent hashing<!--]--></a></h2><!--]--></blockquote><img><p><!--[-->The Multi-probe consistent hashing offers linear O(n) space complexity to store the positions of nodes on the hash ring. There are no virtual nodes but a node is assigned only a single position on the hash ring. The amortized time complexity for the addition and removal of nodes is constant O(1). However, the key (data object) lookups are relatively slower.<!--]--></p><p><!--[-->The basic gist of multi-probe consistent hashing is to hash the key (data object) multiple times using distinct hash functions on lookup and the closest node in the clockwise direction returns the data object.<!--]--></p><blockquote><!--[--><h2><a><!--[-->Consistent hashing with bounded loads<!--]--></a></h2><!--]--></blockquote><img><p><!--[-->The consistent hashing with bounded load puts an upper limit on the load received by a node on the hash ring, relative to the average load of the whole hash ring. The distribution of requests is the same as consistent hashing as long as the nodes are not overloaded.<!--]--></p><p><!--[-->When a specific data object becomes extremely popular, the node hosting the data object receives a significant amount of traffic resulting in the degradation of the service. If a node is overloaded, the incoming request is delegated to a fallback node. The list of fallback nodes will be the same for the same request hash. In simple words, the same node(s) will consistently be the “second choice” for a popular data object. The fallback nodes resolve the popular data object caching problem.<!--]--></p><p><!--[-->If a node is overloaded, the list of the fallback nodes will usually be different for different request hashes. In other words, the requests to an overloaded node are distributed among the available nodes instead of a single fallback node.<!--]--></p><h2><a><!--[-->Summary<!--]--></a></h2><p><!--[-->Consistent hashing is popular among distributed systems. The most common use cases of consistent hashing are data partitioning and load balancing.<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (GKCS)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ACID TRANSACTIONS]]></title>
            <link>https://rahulaher.netlify.app/articles/acid-transactions/</link>
            <guid>https://rahulaher.netlify.app/articles/acid-transactions/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[ACID transactions refer to a set of properties that are designed to ensure the reliability and consistency of database transactions. The term “ACID” stands for Atomicity, Consistency, Isolation, and Durability, which are the four key properties of an ACID transaction. Essentially, ACID transactions guarantee that database operations are executed correctly, and if there is any kind of failure, the database can recover to a previous state without losing any data or impacting the consistency of the data. In other words, ACID transactions provide a high level of assurance that database transactions will be processed reliably and that data will be stored accurately and consistently.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->Acid Transactions Defined<!--]--></a></h2><p><!--[-->ACID transactions refer to a set of properties that are designed to ensure the reliability and consistency of database transactions. The term “ACID” stands for Atomicity, Consistency, Isolation, and Durability, which are the four key properties of an ACID transaction. Essentially, ACID transactions guarantee that database operations are executed correctly, and if there is any kind of failure, the database can recover to a previous state without losing any data or impacting the consistency of the data. In other words, ACID transactions provide a high level of assurance that database transactions will be processed reliably and that data will be stored accurately and consistently.<!--]--></p><h2><a><!--[-->Understanding acid transactions<!--]--></a></h2><p><!--[-->An ACID transaction is a set of properties that ensure the reliability and consistency of a database transaction. Transactions are a series of operations that are completed as a single unit of work, using read and write operations to access data. Most databases provide transactional guarantees for operations that impact just one record. This section will explain the basic definitions of the characteristics involved in an ACID transaction.<!--]--></p><h3><a><!--[-->Atomicity<!--]--></a></h3><p><!--[-->Atomicity in ACID transactions guarantees that a transaction is treated as a single, indivisible unit of work. If any part of the transaction fails, the entire transaction must be rolled back, meaning that any changes made during the transaction are undone. This ensures that the database remains in a consistent state, regardless of any failures that may occur during the transaction.<!--]--></p><h3><a><!--[-->Consistency<!--]--></a></h3><p><!--[-->Consistency ensures that the database remains in a valid state before and after the transaction. In other words, the database schema must satisfy all constraints and rules, and any transaction that violates these constraints must be rolled back to maintain the consistency of the database. This ensures that the database maintains its integrity and the data remains accurate and reliable.<!--]--></p><h3><a><!--[-->Isolation<!--]--></a></h3><p><!--[-->This property ensures that each transaction operates independently of other transactions, which means that a transaction’s effects should only become visible to other transactions after it has been committed. This property prevents interference and conflicts between concurrent transactions, and helps maintain the integrity and consistency of the database. It’s important to note that different levels of isolation can be configured for transactions, depending on the specific requirements of the application and the database system being used.<!--]--></p><h3><a><!--[-->Durability<!--]--></a></h3><p><!--[-->This characteristic makes sure that, even in a system failure, the changes made to the database during a transaction are irreversible. Any changes made after a transaction is committed must persist, even if the system is destroyed or loses power.<!--]--></p><h2><a><!--[-->How do acid transactions work?<!--]--></a></h2><p><!--[-->ACID transactions maintain data integrity by adhering to a set of steps. The steps described are a common way that databases implement ACID transactions, but there could be variations or differences in implementation depending on the specific database system being used.<!--]--></p><ol><!--[--><li><!--[-->Begin Transaction: A BEGIN TRANSACTION statement declaration initiates a transaction and establishes a savepoint from which the transaction can be rolled back if necessary.<!--]--></li><li><!--[-->Execute operations: All operations within the transaction are executed one at a time. The database validates each operation to ensure it complies with the constraints and schema.<!--]--></li><li><!--[-->Commit or Rollback: Following the successful completion of all operations, the transaction is committed using the COMMIT statement. The transaction is rolled back to the savepoint established at the beginning of the transaction if any operation fails.<!--]--></li><!--]--></ol><h2><a><!--[-->Example of an acid transaction in action<!--]--></a></h2><p><!--[-->Consider a banking app where a user wishes to transfer funds from one account to another, where the operation’s transaction might look like this:<!--]--></p><ul><!--[--><li><!--[-->BEGIN TRANSACTION – An example of withdrawing money from the bank using a cheque, pay order, or through an ATM.<!--]--></li><li><!--[-->Deduct the transfer amount from the source account.<!--]--></li><li><!--[-->Add the transfer amount to the destination account.<!--]--></li><li><!--[-->COMMIT – Updating the record of the transaction carried out by the customer.<!--]--></li><!--]--></ul><p><!--[-->The transaction is rolled back, and the database is restored to its initial state if any of its operations fail, such as if the source account does not have enough funds.<!--]--></p><h2><a><!--[-->Acid transactions use cases<!--]--></a></h2><p><!--[-->ACID transactions are suitable for many use cases. Following are some examples:<!--]--></p><h3><a><!--[-->Banking<!--]--></a></h3><p><!--[-->Banks use ACID transactions to ensure that payments and other financial transactions are handled accurately and securely. For example, when a customer withdraws money from an ATM, an ACID transaction is executed to update their account balance and record the transaction. The transaction is atomic, meaning it succeeds or fails, and the account balance remains constant.<!--]--></p><blockquote><!--[--><p><!--[-->For an outline of the right Redis tools to handle transactions, and learn how Redis Enterprise can help you scale your customer experience check out our whitepaper Ensure Customer Satisfaction with Redis<!--]--></p><!--]--></blockquote><h3><a><!--[-->Healthcare systems<!--]--></a></h3><p><!--[-->Healthcare systems use ACID transactions to help guarantee that patient records are updated accurately and that private medical data is protected. Electronic health records (EHRs) contain personal information about patients that must be accurate and consistent. For instance, an ACID transaction occurs when a doctor updates a patient’s medication in the EHR to ensure the data is updated atomically, consistently, and durably.<!--]--></p><h3><a><!--[-->E-commerce applications<!--]--></a></h3><p><!--[-->E-commerce applications use ACID transactions to make sure that customer orders are processed correctly, and that inventory levels are updated correctly. For example, an ACID transaction is carried out when a customer purchases an item to update the inventory records and guarantee that the transaction is atomic, consistent, isolated, and durable.<!--]--></p><h2><a><!--[-->Advantages and disadvantages of using acid transactions<!--]--></a></h2><p><!--[-->Let’s compare the benefits and drawbacks of ACID transactions and identify their potential.  It’s worth noting that the disadvantages listed are not always inherent drawbacks of ACID transactions. They can vary depending on the specific implementation and the requirements of the application. For example, while overhead and scalability might be concerns in some scenarios, they may not be significant issues in others. Similarly, while deadlocks can be a problem in some cases, proper design and management of transactions can often mitigate or prevent them.<!--]--></p><table><!--[--><thead><!--[--><tr><!--[--><th><!--[-->Advantages<!--]--></th><th><!--[-->Disadvantages<!--]--></th><!--]--></tr><!--]--></thead><tbody><!--[--><tr><!--[--><td><!--[--><strong><!--[-->Data integrity<!--]--></strong> – Even if a transaction fails, ACID transactions guarantee that the database will remain in a consistent state. It contributes to data reliability and integrity.<!--]--></td><td><!--[--><strong><!--[-->Overhead<!--]--></strong> – The performance of databases is affected by the extra processing overhead required by ACID transactions.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Consistency<!--]--></strong> - The validity of the database is ensured both before and after an ACID transaction. It contributes to database consistency.<!--]--></td><td><!--[--><strong><!--[-->Deadlocks<!--]--></strong> – Multiple transactions waiting for each other to release resources can cause deadlocks. Deadlocks can be difficult to resolve and have an impact on database reading and retrieval performance.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Isolation<!--]--></strong> – ACID transactions ensure that each transaction is independent of the others. It also contributes to preserving data integrity by preventing interference between concurrent transactions.<!--]--></td><td><!--[--><strong><!--[-->Scalability<!--]--></strong> – ACID transactions can be difficult to implement in large-scale distributed systems that require performance and scalability.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Durability<!--]--></strong> – ACID transactions ensure that database changes made during a transaction are irreversible, even in a system failure. It contributes to data reliability.<!--]--></td><td><!--[--><strong><!--[-->Similar data update<!--]--></strong> - When several transactions are running concurrently, they might clash if they attempt to modify the same data at the same time. Thus,one transaction might need to wait for another transaction to finish before it can move forward, which would reduce system performance and increase latency.<!--]--></td><!--]--></tr><!--]--></tbody><!--]--></table><h2><a><!--[-->Alternatives to acid transactions<!--]--></a></h2><p><!--[-->ACID transactions provide several benefits for ensuring data reliability, consistency, isolation, and durability. However, they may not be the best fit for all applications. In such cases, there are various alternative transaction models and theorems available that can be considered instead of ACID. These include:<!--]--></p><h3><a><!--[-->BASE (Basically Available, Soft state, Eventually consistent)<!--]--></a></h3><p><!--[-->BASE isn’t necessarily a replacement for ACID transactions, but rather an alternative model for handling distributed systems that cannot guarantee immediate consistency.  BASE emphasizes availability and partition tolerance more than consistency. This model trades off near-term consistency for long-term stability. Although it assumes that all data will eventually become consistent, it cannot guarantee this. This approach is appropriate for high-volume distributed systems because it provides greater scalability and availability. It is often used in conjunction with NoSQL databases, which prioritize scalability and availability over strict consistency requirements.<!--]--></p><h3><a><!--[-->CAP (Consistency, Availability, Partition tolerance)<!--]--></a></h3><p><!--[-->The CAP theorem states that in a distributed system, it is impossible to guarantee all three of Consistency, Availability, and Partition tolerance. However, it does not suggest sacrificing consistency for availability and partition tolerance. In fact, the theorem poses a trade-off between consistency and partition tolerance. This means that in the event of a network partition, you must choose between consistency and partition tolerance. The CAP theorem is not truly an alternative transaction model but a theoretical framework for understanding the limitations of distributed systems. Transaction models, such as BASE, can be used in conjunction with the principles of CAP to design and implement distributed systems.<!--]--></p><h3><a><!--[-->NoSQL databases<!--]--></a></h3><p><!--[-->NoSQL databases do not impose rigid consistency standards and prioritize performance and scalability over immediate consistency. They are often used in applications that require high throughput, and where data consistency is not critical. While relational databases ensure desirable ACID properties, NoSQL databases are more effective at handling large and complex data sets. Additionally, BASE properties can perform even better for a wide range of applications, although ACID is not always guaranteed in this case.<!--]--></p><h2><a><!--[-->Acid transactions in distributed systems<!--]--></a></h2><p><!--[-->Distributed systems comprise numerous computers that interact with each other to deliver a single service. ACID transactions can be difficult to implement in a distributed system because they are made up of multiple nodes that are geographically dispersed and communicate over a network.<!--]--></p><h3><a><!--[-->Challenges of implementing acid transactions in distributed systems<!--]--></a></h3><p><!--[-->Distributed systems consist of multiple computers that collaborate to provide a single service. ACID transactions can be challenging to implement in distributed systems because they comprise multiple nodes that are geographically dispersed and communicate over a network.<!--]--></p><p><!--[-->Challenges of implementing ACID transactions in distributed systems include:<!--]--></p><p><!--[--><strong><!--[-->Network latency<!--]--></strong>: In distributed systems, network latency can impact the performance of ACID transactions. Longer transaction times and higher overhead can result from network communication delays.<!--]--></p><p><!--[--><strong><!--[-->Consistency<!--]--></strong>: Maintaining consistency across all nodes in a distributed system can be challenging. A distributed system’s nodes might store different versions of the same data, which could result in discrepancies.<!--]--></p><p><!--[--><strong><!--[-->Availability<!--]--></strong>: Keeping a distributed system available can be difficult. Nodes could fail, and it might be challenging to maintain the system’s responsiveness.<!--]--></p><p><!--[--><strong><!--[-->Scalability<!--]--></strong>: As the number of nodes in a distributed system increases, it becomes more difficult to maintain consistency and availability.<!--]--></p><h3><a><!--[-->Solutions for maintaining acid properties in distributed systems<!--]--></a></h3><p><!--[-->ACID transactions are difficult to maintain in distributed systems due to factors such as network latency, consistency, availability, and scalability. To address these challenges, several solutions have been developed, including:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Two-phase commit<!--]--></strong>: This protocol ensures that all nodes in a distributed system agree to commit a transaction before it is committed, ensuring data consistency and agreement on the transaction’s outcome.<!--]--></li><li><!--[--><strong><!--[-->Multi-Version Concurrency Control (MVCC)<!--]--></strong>: This technique manages data concurrency in a distributed system by allowing each transaction to access the appropriate data version, enabling multiple versions of the same data to coexist.<!--]--></li><li><!--[--><strong><!--[-->Replication<!--]--></strong>: In a distributed system, replication involves keeping multiple copies of the same data on various nodes, reducing network latency and increasing availability.<!--]--></li><li><!--[--><strong><!--[-->Sharding<!--]--></strong>: This process involves dividing data across multiple nodes in a distributed system, improving performance and scalability but increasing the complexity of maintaining data consistency.<!--]--></li><!--]--></ul><p><!--[-->ACID transactions are a fundamental concept in database management, providing benefits such as data integrity, consistency, isolation, and durability. They ensure that the database remains in a consistent state even if the server fails. However, they do have limitations and challenges, such as overhead, deadlocks, and scalability problems in distributed systems.<!--]--></p><p><!--[-->Although ACID transactions provide strong consistency and reliability, they may not always be the best option for every use case. Organizations must carefully evaluate their unique needs and requirements to determine whether ACID transactions or alternative transaction models, such as BASE or CAP, are a better fit for their systems.<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (SCALER)<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Blog Resource<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Certified Solutions Architect - Exam Guide]]></title>
            <link>https://rahulaher.netlify.app/articles/aws-solution-architect-1-1/</link>
            <guid>https://rahulaher.netlify.app/articles/aws-solution-architect-1-1/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Consistency and standards are important for building a unified design language and help the user know what to expect from our product and how to use it. However, this does not mean sacrificing the user experience. In this sense, the context and needs of our users are priorities when developing our solutions.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->AWS Certified Solutions Architect - Exam Guide<!--]--></a></h2><p><!--[-->Are you ready to take your cloud career to the next level? The <strong><!--[-->AWS Certified Solutions Architect - Associate<!--]--></strong> certification is one of the most sought-after credentials in the IT industry. It demonstrates your ability to design and deploy scalable, cost-effective, and secure applications on AWS. This guide will help you navigate through the exam preparation process and set you up for success.<!--]--></p><h2><a><!--[-->Why Choose the AWS Solutions Architect Certification?<!--]--></a></h2><p><!--[-->The <strong><!--[-->AWS Certified Solutions Architect<!--]--></strong> certification validates your skills in cloud architecture and AWS services. Here’s why it’s worth pursuing:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->High Demand:<!--]--></strong> Cloud computing is a booming industry, and AWS leads the market. Certified professionals are in high demand.<!--]--></li><li><!--[--><strong><!--[-->Career Growth:<!--]--></strong> This certification opens doors to high-paying roles such as Cloud Architect, Solutions Architect, and DevOps Engineer.<!--]--></li><li><!--[--><strong><!--[-->Hands-On Knowledge:<!--]--></strong> Gain practical experience with AWS services, best practices, and cost management.<!--]--></li><!--]--></ul><h2><a><!--[-->Who Should Take This Exam?<!--]--></a></h2><p><!--[-->This certification is ideal for:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Aspiring Cloud Architects<!--]--></strong>: Professionals who want to design robust and scalable solutions in the cloud.<!--]--></li><li><!--[--><strong><!--[-->System Administrators &amp; Developers<!--]--></strong>: IT professionals looking to enhance their knowledge of AWS services and architecture.<!--]--></li><li><!--[--><strong><!--[-->Experienced Architects<!--]--></strong>: Those seeking validation of their skills and expertise in AWS cloud solutions.<!--]--></li><!--]--></ul><h2><a><!--[-->Exam Overview<!--]--></a></h2><p><!--[-->The <strong><!--[-->AWS Certified Solutions Architect - Associate<!--]--></strong> exam tests your ability to:<!--]--></p><ul><!--[--><li><!--[-->Design resilient, high-performing architectures.<!--]--></li><li><!--[-->Implement cost-optimized and secure solutions.<!--]--></li><li><!--[-->Analyze and troubleshoot existing AWS systems.<!--]--></li><!--]--></ul><h3><a><!--[-->Exam Details:<!--]--></a></h3><table><!--[--><thead><!--[--><tr><!--[--><th><!--[--><strong><!--[-->Feature<!--]--></strong><!--]--></th><th><!--[--><strong><!--[-->Details<!--]--></strong><!--]--></th><!--]--></tr><!--]--></thead><tbody><!--[--><tr><!--[--><td><!--[--><strong><!--[-->Exam Code<!--]--></strong><!--]--></td><td><!--[-->SAA-C03<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Duration<!--]--></strong><!--]--></td><td><!--[-->130 Minutes<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Format<!--]--></strong><!--]--></td><td><!--[-->Multiple Choice &amp; Multiple Response Questions<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Cost<!--]--></strong><!--]--></td><td><!--[-->$150 USD<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Languages<!--]--></strong><!--]--></td><td><!--[-->English, Japanese, Korean, and Simplified Chinese<!--]--></td><!--]--></tr><!--]--></tbody><!--]--></table><h2><a><!--[-->Key Topics Covered<!--]--></a></h2><p><!--[-->The exam blueprint focuses on the following key areas:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Design Resilient Architectures<!--]--></strong><ul><!--[--><li><!--[-->Identify scalable storage solutions (e.g., S3, EBS).<!--]--></li><li><!--[-->Design multi-tier architecture solutions.<!--]--></li><li><!--[-->Choose the right load balancing and auto-scaling strategies.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Design High-Performing Architectures<!--]--></strong><ul><!--[--><li><!--[-->Optimize workloads with appropriate AWS services (e.g., EC2, RDS, DynamoDB).<!--]--></li><li><!--[-->Improve performance with caching strategies (e.g., CloudFront, ElastiCache).<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Design Secure Applications<!--]--></strong><ul><!--[--><li><!--[-->Implement IAM roles, policies, and multi-factor authentication.<!--]--></li><li><!--[-->Secure data with encryption (e.g., KMS, SSE).<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Cost-Optimized Architectures<!--]--></strong><ul><!--[--><li><!--[-->Choose cost-effective storage and compute solutions.<!--]--></li><li><!--[-->Use AWS Pricing Calculator to estimate costs.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ol><h2><a><!--[-->Preparation Tips<!--]--></a></h2><ol><!--[--><li><!--[--><strong><!--[-->Understand the Exam Guide<!--]--></strong><br>
AWS provides an official <a><!--[--><!--[-->Exam Guide<!--]--><!--]--></a> that outlines the key areas tested. Study it thoroughly.<!--]--></li><li><!--[--><strong><!--[-->Hands-On Practice<!--]--></strong><br>
Use AWS Free Tier to experiment with services like EC2, S3, and RDS. Real-world experience is invaluable.<!--]--></li><li><!--[--><strong><!--[-->Enroll in Training Courses<!--]--></strong><ul><!--[--><li><!--[-->AWS provides official courses for exam preparation.<!--]--></li><li><!--[-->Platforms like A Cloud Guru, Udemy, and Coursera offer excellent resources.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Practice Exams<!--]--></strong><br>
Take mock tests to familiarize yourself with the question format and time constraints. Try tools like Whizlabs or ExamTopics.<!--]--></li><li><!--[--><strong><!--[-->Join a Community<!--]--></strong><br>
Participate in AWS forums and communities to share knowledge and learn from others’ experiences.<!--]--></li><!--]--></ol><h2><a><!--[-->Resources for Preparation<!--]--></a></h2><p><!--[-->Here are some resources to help you prepare:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->AWS Training and Certification<!--]--></strong>: <a><!--[--><!--[-->AWS Official Training<!--]--><!--]--></a><!--]--></li><li><!--[--><strong><!--[-->Whitepapers<!--]--></strong>: <a><!--[--><!--[-->AWS Well-Architected Framework<!--]--><!--]--></a><!--]--></li><li><!--[--><strong><!--[-->Practice Tests<!--]--></strong>: <a><!--[--><!--[-->Whizlabs<!--]--><!--]--></a>, <a><!--[--><!--[-->Udemy Practice Exams<!--]--><!--]--></a><!--]--></li><li><!--[--><strong><!--[-->Books<!--]--></strong>: <em><!--[-->"AWS Certified Solutions Architect Official Study Guide"<!--]--></em><!--]--></li><!--]--></ul><h2><a><!--[-->Exam-Day Tips<!--]--></a></h2><ol><!--[--><li><!--[--><strong><!--[-->Manage Your Time<!--]--></strong>: Don’t spend too much time on a single question.<!--]--></li><li><!--[--><strong><!--[-->Read Carefully<!--]--></strong>: Pay close attention to keywords like <em><!--[-->cost-effective<!--]--></em>, <em><!--[-->high availability<!--]--></em>, and <em><!--[-->secure<!--]--></em>.<!--]--></li><li><!--[--><strong><!--[-->Eliminate Wrong Options<!--]--></strong>: Narrow down the choices using the process of elimination.<!--]--></li><li><!--[--><strong><!--[-->Stay Calm<!--]--></strong>: Take deep breaths and stay focused.<!--]--></li><!--]--></ol><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->The AWS Certified Solutions Architect exam is a valuable credential that can boost your career in cloud computing. With the right preparation strategy and resources, you can achieve this milestone and unlock exciting opportunities. Start your journey today!<!--]--></p><p><!--[-->Good luck with your certification!<!--]--></p><h3><a><!--[-->Questions or Feedback?<!--]--></a></h3><p><!--[-->Have any questions or want to share your experience? Drop a comment below, and let’s discuss!<!--]--></p><p><!--[-->Happy coding!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Building Blocks of AWS: Availability Zones and Regions]]></title>
            <link>https://rahulaher.netlify.app/articles/aws-solution-architect-2-1/</link>
            <guid>https://rahulaher.netlify.app/articles/aws-solution-architect-2-1/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Consistency and standards are important for building a unified design language and help the user know what to expect from our product and how to use it. However, this does not mean sacrificing the user experience. In this sense, the context and needs of our users are priorities when developing our solutions.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->The Building Blocks of AWS: Availability Zones and Regions<!--]--></a></h2><p><!--[-->Amazon Web Services (AWS) has revolutionized cloud computing with its robust infrastructure, enabling businesses to scale, innovate, and operate globally. At the core of AWS’s architecture are <strong><!--[-->Regions<!--]--></strong> and <strong><!--[-->Availability Zones (AZs)<!--]--></strong> — two foundational elements that ensure high availability, fault tolerance, and reliability.<!--]--></p><p><!--[-->This blog dives into the details of these building blocks and explains how they play a critical role in AWS’s global cloud infrastructure.<!--]--></p><h2><a><!--[-->What Are AWS Regions?<!--]--></a></h2><p><!--[-->An <strong><!--[-->AWS Region<!--]--></strong> is a physical location spread across the globe, consisting of multiple isolated data centers called Availability Zones. Each Region operates independently, providing businesses with the flexibility to deploy their workloads close to their users, comply with local data regulations, and improve performance.<!--]--></p><h3><a><!--[-->Key Features of Regions:<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->Geographic Separation<!--]--></strong><br>
AWS Regions are distributed worldwide, ensuring users can choose a region that aligns with their business needs.<!--]--></li><li><!--[--><strong><!--[-->Data Sovereignty<!--]--></strong><br>
Many organizations must comply with regional data privacy laws. AWS Regions enable businesses to keep their data within specific geographic boundaries.<!--]--></li><li><!--[--><strong><!--[-->Fault Isolation<!--]--></strong><br>
Each Region is isolated from others, ensuring a failure in one Region does not affect workloads in another.<!--]--></li><!--]--></ol><h3><a><!--[-->Example Regions:<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->US East (N. Virginia)<!--]--></strong>: Commonly used for cost-effective deployments.<!--]--></li><li><!--[--><strong><!--[-->Europe (Frankfurt)<!--]--></strong>: Ideal for EU businesses due to data regulations.<!--]--></li><li><!--[--><strong><!--[-->Asia Pacific (Mumbai)<!--]--></strong>: Optimized for users in South Asia.<!--]--></li><!--]--></ul><h2><a><!--[-->What Are Availability Zones (AZs)?<!--]--></a></h2><p><!--[-->An <strong><!--[-->Availability Zone<!--]--></strong> is one or more discrete data centers within a Region, equipped with independent power, networking, and cooling. While AZs are physically separate, they are connected through low-latency, high-bandwidth links, allowing for seamless intercommunication.<!--]--></p><h3><a><!--[-->Key Features of AZs:<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->Redundancy and Resilience<!--]--></strong><br>
Workloads can be distributed across multiple AZs to ensure fault tolerance and high availability.<!--]--></li><li><!--[--><strong><!--[-->High Throughput<!--]--></strong><br>
AZs within a Region are interconnected with ultra-low latency, making it possible to design high-performance applications.<!--]--></li><li><!--[--><strong><!--[-->Physical Isolation<!--]--></strong><br>
Each AZ is designed to operate independently. This ensures that issues like power outages or natural disasters affecting one AZ won’t impact others.<!--]--></li><!--]--></ol><h2><a><!--[-->How Regions and AZs Work Together<!--]--></a></h2><p><!--[-->AWS encourages businesses to architect their applications with both Regions and AZs in mind. Here’s how they complement each other:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Regions for Global Reach:<!--]--></strong><br>
Businesses can deploy workloads in different Regions to reach users in specific geographical locations and meet compliance requirements.<!--]--></li><li><!--[--><strong><!--[-->AZs for High Availability:<!--]--></strong><br>
By spreading applications across multiple AZs within a single Region, businesses can achieve high availability and fault tolerance.<!--]--></li><!--]--></ul><h2><a><!--[-->Benefits of Regions and AZs<!--]--></a></h2><ol><!--[--><li><!--[--><strong><!--[-->High Availability<!--]--></strong><br>
Deploying workloads across multiple AZs ensures that applications remain available even during failures in a single AZ.<!--]--></li><li><!--[--><strong><!--[-->Scalability<!--]--></strong><br>
Regions and AZs enable businesses to scale globally with minimal effort. AWS’s network ensures low latency and high throughput across Regions and AZs.<!--]--></li><li><!--[--><strong><!--[-->Disaster Recovery<!--]--></strong><br>
Using multiple Regions, businesses can implement robust disaster recovery strategies to protect their critical workloads.<!--]--></li><li><!--[--><strong><!--[-->Cost Optimization<!--]--></strong><br>
With AZs and Regions, you can choose the most cost-effective setup based on workload and user location.<!--]--></li><!--]--></ol><h2><a><!--[-->Real-World Use Cases<!--]--></a></h2><h3><a><!--[-->1. <strong><!--[-->Global Applications<!--]--></strong><!--]--></a></h3><p><!--[-->A global e-commerce platform deploys its backend systems in <strong><!--[-->multiple AWS Regions<!--]--></strong> to ensure low latency for users across continents.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->High Availability Systems<!--]--></strong><!--]--></a></h3><p><!--[-->A financial institution distributes its databases across <strong><!--[-->three AZs within a single Region<!--]--></strong> to ensure continuous service during outages.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Disaster Recovery<!--]--></strong><!--]--></a></h3><p><!--[-->A healthcare company stores critical backups in a <strong><!--[-->different AWS Region<!--]--></strong> for disaster recovery, complying with data regulations.<!--]--></p><h2><a><!--[-->How to Choose an AWS Region and AZ<!--]--></a></h2><h3><a><!--[-->Factors to Consider:<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->Latency<!--]--></strong>: Choose a Region close to your end users to minimize latency.<!--]--></li><li><!--[--><strong><!--[-->Compliance<!--]--></strong>: Ensure the Region meets local regulatory requirements.<!--]--></li><li><!--[--><strong><!--[-->Cost<!--]--></strong>: Regions differ in pricing; choose one that fits your budget.<!--]--></li><li><!--[--><strong><!--[-->Service Availability<!--]--></strong>: Not all services are available in every Region. Verify service availability before selecting a Region.<!--]--></li><!--]--></ol><h3><a><!--[-->Example Strategy:<!--]--></a></h3><ul><!--[--><li><!--[-->Use <strong><!--[-->US East (N. Virginia)<!--]--></strong> for cost-effective general-purpose workloads.<!--]--></li><li><!--[-->Use <strong><!--[-->Europe (Paris)<!--]--></strong> to comply with GDPR requirements.<!--]--></li><li><!--[-->Use <strong><!--[-->Asia Pacific (Tokyo)<!--]--></strong> for applications serving Japanese users.<!--]--></li><!--]--></ul><h2><a><!--[-->AWS Services That Use Regions and AZs<!--]--></a></h2><h3><a><!--[-->1. <strong><!--[-->Amazon EC2<!--]--></strong><!--]--></a></h3><p><!--[-->Instances can be launched in specific AZs within a Region, enabling fault-tolerant architecture.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Amazon S3<!--]--></strong><!--]--></a></h3><p><!--[-->Data stored in S3 is automatically replicated across AZs within the same Region for durability.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Amazon RDS<!--]--></strong><!--]--></a></h3><p><!--[-->Relational databases can be configured for multi-AZ deployments, ensuring high availability.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Amazon CloudFront<!--]--></strong><!--]--></a></h3><p><!--[-->While CloudFront operates globally, it caches content close to users, complementing Regions and AZs.<!--]--></p><h2><a><!--[-->Best Practices for Using AWS Regions and AZs<!--]--></a></h2><ol><!--[--><li><!--[--><strong><!--[-->Distribute Workloads<!--]--></strong><br>
Spread critical workloads across multiple AZs within a Region to enhance reliability.<!--]--></li><li><!--[--><strong><!--[-->Leverage Multi-Region Architectures<!--]--></strong><br>
Use multiple Regions for disaster recovery and to meet global compliance needs.<!--]--></li><li><!--[--><strong><!--[-->Monitor Costs<!--]--></strong><br>
Be mindful of data transfer costs between AZs and Regions, which can add up if not optimized.<!--]--></li><li><!--[--><strong><!--[-->Use Infrastructure as Code<!--]--></strong><br>
Tools like AWS CloudFormation or Terraform can help automate multi-AZ and multi-Region deployments.<!--]--></li><!--]--></ol><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->AWS Regions and Availability Zones are the backbone of the AWS global cloud infrastructure. They provide the scalability, fault tolerance, and performance required to power modern applications. By understanding how to leverage these building blocks effectively, you can design systems that meet the highest standards of reliability and performance.<!--]--></p><p><!--[-->Ready to build on AWS? Start architecting your solutions today!<!--]--></p><h3><a><!--[-->Questions or Feedback?<!--]--></a></h3><p><!--[-->Have insights or questions about AWS Regions and AZs? Drop a comment below or share your experiences!<!--]--></p><p><!--[-->Happy coding!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Who Owns What in the Cloud?]]></title>
            <link>https://rahulaher.netlify.app/articles/aws-solution-architect-2-2/</link>
            <guid>https://rahulaher.netlify.app/articles/aws-solution-architect-2-2/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Consistency and standards are important for building a unified design language and help the user know what to expect from our product and how to use it. However, this does not mean sacrificing the user experience. In this sense, the context and needs of our users are priorities when developing our solutions.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->Who Owns What in the Cloud? Understanding AWS Shared Responsibility Model<!--]--></a></h2><p><!--[-->As businesses embrace the cloud, one question often arises: <strong><!--[-->Who is responsible for what?<!--]--></strong> When using cloud services like AWS, the answer isn’t always straightforward. The <strong><!--[-->AWS Shared Responsibility Model<!--]--></strong> outlines the division of responsibilities between AWS and its customers, ensuring clarity about security, compliance, and management.<!--]--></p><p><!--[-->This blog unpacks the AWS Shared Responsibility Model and explains how it works, giving you the insights needed to secure your cloud-based workloads effectively.<!--]--></p><h2><a><!--[-->The AWS Shared Responsibility Model: An Overview<!--]--></a></h2><p><!--[-->In traditional IT environments, organizations manage and control everything: hardware, networking, data security, and more. However, in the cloud, responsibilities are shared between the <strong><!--[-->cloud service provider (AWS)<!--]--></strong> and the <strong><!--[-->customer<!--]--></strong>.<!--]--></p><p><!--[-->AWS describes its shared responsibility model as:<br>
**“Security OF the cloud” is AWS’s responsibility, while <strong><!--[-->“Security IN the cloud” is the customer’s responsibility.<!--]--></strong><!--]--></p><h3><a><!--[-->What Does This Mean?<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->AWS Responsibility:<!--]--></strong> AWS takes care of the physical infrastructure, networking, and foundational services required to run cloud resources.<!--]--></li><li><!--[--><strong><!--[-->Customer Responsibility:<!--]--></strong> Customers are responsible for managing their data, applications, operating systems, and security settings.<!--]--></li><!--]--></ul><h2><a><!--[-->Breaking Down the Shared Responsibilities<!--]--></a></h2><h3><a><!--[-->1. <strong><!--[-->AWS Responsibilities: Security OF the Cloud<!--]--></strong><!--]--></a></h3><p><!--[-->AWS ensures the security of its global infrastructure, which includes:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Physical Security<!--]--></strong><br>
AWS secures its data centers with 24/7 monitoring, access control, and redundancy to prevent physical breaches.<!--]--></li><li><!--[--><strong><!--[-->Hardware and Software Maintenance<!--]--></strong><br>
AWS maintains the servers, storage, networking, and virtualization layers.<!--]--></li><li><!--[--><strong><!--[-->Compliance<!--]--></strong><br>
AWS provides certifications like ISO 27001, SOC, and GDPR compliance, ensuring the infrastructure meets strict security standards.<!--]--></li><!--]--></ul><h3><a><!--[-->Examples of AWS Responsibilities:<!--]--></a></h3><ul><!--[--><li><!--[-->Fire suppression systems in data centers.<!--]--></li><li><!--[-->Network protection against Distributed Denial of Service (DDoS) attacks.<!--]--></li><li><!--[-->Maintaining up-to-date hardware and firmware.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Customer Responsibilities: Security IN the Cloud<!--]--></strong><!--]--></a></h3><p><!--[-->Customers must secure the workloads and data they deploy in the cloud. This includes:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Data Protection<!--]--></strong><br>
Encrypt sensitive data at rest and in transit using AWS services like <strong><!--[-->KMS<!--]--></strong> and <strong><!--[-->Certificate Manager<!--]--></strong>.<!--]--></li><li><!--[--><strong><!--[-->Access Management<!--]--></strong><br>
Use <strong><!--[-->AWS Identity and Access Management (IAM)<!--]--></strong> to control who can access resources and monitor user activity.<!--]--></li><li><!--[--><strong><!--[-->Application Security<!--]--></strong><br>
Ensure that your applications are free from vulnerabilities by implementing secure coding practices.<!--]--></li><li><!--[--><strong><!--[-->Operating Systems and Patches<!--]--></strong><br>
For services like Amazon EC2, customers must install updates and patches for their operating systems and software.<!--]--></li><!--]--></ul><h3><a><!--[-->Examples of Customer Responsibilities:<!--]--></a></h3><ul><!--[--><li><!--[-->Configuring a virtual private cloud (VPC) and managing access.<!--]--></li><li><!--[-->Setting up firewalls and security groups.<!--]--></li><li><!--[-->Creating and monitoring backups of application data.<!--]--></li><!--]--></ul><h2><a><!--[-->The Shared Responsibility Across AWS Services<!--]--></a></h2><p><!--[-->AWS services fall into different categories, and the division of responsibilities depends on the type of service:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Infrastructure-as-a-Service (IaaS)<!--]--></strong><!--]--></a></h3><p><!--[-->Examples: <strong><!--[-->Amazon EC2<!--]--></strong>, <strong><!--[-->Amazon S3<!--]--></strong>, <strong><!--[-->Amazon VPC<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->AWS: Secures the physical servers and networking.<!--]--></li><li><!--[-->Customer: Manages operating systems, data, IAM policies, and application security.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Platform-as-a-Service (PaaS)<!--]--></strong><!--]--></a></h3><p><!--[-->Examples: <strong><!--[-->AWS Lambda<!--]--></strong>, <strong><!--[-->Amazon RDS<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->AWS: Manages the infrastructure, operating system, and runtime.<!--]--></li><li><!--[-->Customer: Manages application logic, data, and permissions.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Software-as-a-Service (SaaS)<!--]--></strong><!--]--></a></h3><p><!--[-->Examples: <strong><!--[-->Amazon Workspaces<!--]--></strong>, <strong><!--[-->AWS Managed Services<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->AWS: Manages almost everything, including software and infrastructure.<!--]--></li><li><!--[-->Customer: Focuses on data access, permissions, and proper usage.<!--]--></li><!--]--></ul><h2><a><!--[-->Why the Shared Responsibility Model Matters<!--]--></a></h2><p><!--[-->The AWS Shared Responsibility Model ensures that both AWS and its customers are clear on their roles in securing workloads. Misunderstanding this model can lead to:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Data Breaches:<!--]--></strong> If customers neglect securing their data or IAM policies, they may expose sensitive information.<!--]--></li><li><!--[--><strong><!--[-->Compliance Failures:<!--]--></strong> Customers may assume AWS handles compliance entirely, but they are still responsible for securing customer data to meet legal standards.<!--]--></li><li><!--[--><strong><!--[-->Operational Downtime:<!--]--></strong> Poorly managed operating systems or applications can lead to system failures.<!--]--></li><!--]--></ol><p><!--[-->By understanding your role, you can design systems that meet your business needs while leveraging AWS’s secure infrastructure.<!--]--></p><h2><a><!--[-->Best Practices for Security in the Cloud<!--]--></a></h2><p><!--[-->To maximize the benefits of the shared responsibility model, follow these best practices:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Use IAM Policies Effectively<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Implement the principle of least privilege — give users the minimum access they need.<!--]--></li><li><!--[-->Regularly review and update IAM roles and permissions.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Encrypt Data<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Encrypt data at rest using AWS Key Management Service (KMS).<!--]--></li><li><!--[-->Enable HTTPS for data in transit using AWS Certificate Manager.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Enable Logging and Monitoring<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Use <strong><!--[-->AWS CloudTrail<!--]--></strong> to track user activity and API calls.<!--]--></li><li><!--[-->Monitor infrastructure with <strong><!--[-->Amazon CloudWatch<!--]--></strong> to detect unusual behavior.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Patch and Update Regularly<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Keep your operating systems, applications, and dependencies updated.<!--]--></li><li><!--[-->Automate updates with tools like <strong><!--[-->AWS Systems Manager<!--]--></strong>.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Perform Regular Security Audits<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Use <strong><!--[-->AWS Trusted Advisor<!--]--></strong> to identify security gaps.<!--]--></li><li><!--[-->Conduct vulnerability scans on your workloads and applications.<!--]--></li><!--]--></ul><h2><a><!--[-->Real-World Example: Who Owns What?<!--]--></a></h2><h3><a><!--[-->Scenario: Running an E-Commerce Application on AWS<!--]--></a></h3><ol><!--[--><li><!--[--><strong><!--[-->AWS Responsibilities:<!--]--></strong><ul><!--[--><li><!--[-->Ensures physical security of the servers where the application is hosted.<!--]--></li><li><!--[-->Provides a secure networking infrastructure.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Customer Responsibilities:<!--]--></strong><ul><!--[--><li><!--[-->Configures IAM roles to prevent unauthorized access.<!--]--></li><li><!--[-->Encrypts customer payment data stored in Amazon S3.<!--]--></li><li><!--[-->Updates the application code to fix vulnerabilities.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ol><h2><a><!--[-->Summary<!--]--></a></h2><p><!--[-->The AWS Shared Responsibility Model is a key framework for cloud security, making it clear where AWS’s responsibilities end and where the customer’s begin. By embracing this model, businesses can take full advantage of AWS’s secure infrastructure while safeguarding their workloads and data.<!--]--></p><p><!--[-->Remember: <strong><!--[-->AWS secures the cloud; you secure what you put in the cloud.<!--]--></strong><!--]--></p><p><!--[-->Understanding the shared responsibility model is the first step toward building secure, reliable, and compliant cloud solutions. So, the next time you deploy workloads in AWS, take a moment to review your responsibilities and ensure everything is configured for maximum security.<!--]--></p><h3><a><!--[-->Questions or Feedback?<!--]--></a></h3><p><!--[-->Have thoughts or experiences to share about the AWS Shared Responsibility Model? Let us know in the comments below!<!--]--></p><p><!--[-->Happy coding!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Compute, Storage, Databases, and Networking]]></title>
            <link>https://rahulaher.netlify.app/articles/aws-solution-architect-2-3/</link>
            <guid>https://rahulaher.netlify.app/articles/aws-solution-architect-2-3/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Consistency and standards are important for building a unified design language and help the user know what to expect from our product and how to use it. However, this does not mean sacrificing the user experience. In this sense, the context and needs of our users are priorities when developing our solutions.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->AWS Core Services: Compute, Storage, Databases, and Networking Explained<!--]--></a></h2><p><!--[-->Amazon Web Services (AWS) has revolutionized the cloud computing industry with its vast array of services. However, at the heart of AWS lie its <strong><!--[-->core building blocks<!--]--></strong>: <strong><!--[-->Compute, Storage, Databases, and Networking<!--]--></strong>. These services provide the foundation for building scalable, secure, and high-performance applications in the cloud.<!--]--></p><p><!--[-->In this blog, we’ll explore these fundamental AWS services, their key features, and how they empower businesses to build cutting-edge solutions.<!--]--></p><h2><a><!--[-->1. Compute: Powering Your Applications<!--]--></a></h2><p><!--[-->Compute services are at the heart of cloud computing, enabling you to run applications, execute workloads, and process data without worrying about managing physical servers. AWS offers a wide range of compute services tailored to different needs.<!--]--></p><h3><a><!--[-->Key Compute Services:<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Amazon EC2 (Elastic Compute Cloud):<!--]--></strong><ul><!--[--><li><!--[-->Provides resizable virtual servers (instances) in the cloud.<!--]--></li><li><!--[-->Supports a wide range of operating systems and instance types for flexibility.<!--]--></li><li><!--[-->Ideal for hosting web applications, running batch jobs, or performing high-performance computing.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->AWS Lambda:<!--]--></strong><ul><!--[--><li><!--[-->A serverless compute service that lets you run code without provisioning or managing servers.<!--]--></li><li><!--[-->Automatically scales based on the number of requests.<!--]--></li><li><!--[-->Perfect for event-driven applications like APIs, IoT backends, and automation scripts.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon ECS and EKS:<!--]--></strong><ul><!--[--><li><!--[--><strong><!--[-->ECS (Elastic Container Service):<!--]--></strong> A fully managed container orchestration service.<!--]--></li><li><!--[--><strong><!--[-->EKS (Elastic Kubernetes Service):<!--]--></strong> A managed service to run Kubernetes at scale.<!--]--></li><li><!--[-->Ideal for containerized applications requiring high portability and scalability.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->AWS Elastic Beanstalk:<!--]--></strong><ul><!--[--><li><!--[-->A Platform-as-a-Service (PaaS) offering that simplifies deploying and managing applications.<!--]--></li><li><!--[-->Automatically handles capacity provisioning, load balancing, and scaling.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ul><h3><a><!--[-->Use Cases for Compute:<!--]--></a></h3><ul><!--[--><li><!--[-->Hosting websites and applications.<!--]--></li><li><!--[-->Processing large datasets with high-performance computing.<!--]--></li><li><!--[-->Running containerized workloads in microservices architectures.<!--]--></li><!--]--></ul><h2><a><!--[-->2. Storage: Safeguarding Your Data<!--]--></a></h2><p><!--[-->AWS provides a variety of storage solutions designed for reliability, scalability, and cost-efficiency. Whether you’re storing static files, backups, or massive datasets, AWS storage services cater to all needs.<!--]--></p><h3><a><!--[-->Key Storage Services:<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Amazon S3 (Simple Storage Service):<!--]--></strong><ul><!--[--><li><!--[-->Object storage service designed for storing and retrieving any amount of data.<!--]--></li><li><!--[-->Highly durable with 99.999999999% (11 nines) durability.<!--]--></li><li><!--[-->Ideal for hosting static websites, storing backups, and serving media files.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon EBS (Elastic Block Store):<!--]--></strong><ul><!--[--><li><!--[-->Block storage volumes designed for use with EC2 instances.<!--]--></li><li><!--[-->Provides low-latency, high-performance storage for databases and applications.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon EFS (Elastic File System):<!--]--></strong><ul><!--[--><li><!--[-->A fully managed file storage service that provides shared access to multiple EC2 instances.<!--]--></li><li><!--[-->Ideal for applications requiring scalable and distributed file storage.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon Glacier &amp; S3 Glacier Deep Archive:<!--]--></strong><ul><!--[--><li><!--[-->Low-cost archival storage solutions for long-term data storage.<!--]--></li><li><!--[-->Perfect for backups, regulatory compliance, and infrequently accessed data.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ul><h3><a><!--[-->Use Cases for Storage:<!--]--></a></h3><ul><!--[--><li><!--[-->Storing application logs and media files.<!--]--></li><li><!--[-->Backing up databases and disaster recovery.<!--]--></li><li><!--[-->Long-term archival of critical business data.<!--]--></li><!--]--></ul><h2><a><!--[-->3. Databases: Organizing Your Data<!--]--></a></h2><p><!--[-->Databases are critical for managing structured and unstructured data, and AWS offers a wide variety of database solutions for different use cases. These services are designed for scalability, availability, and performance.<!--]--></p><h3><a><!--[-->Key Database Services:<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Amazon RDS (Relational Database Service):<!--]--></strong><ul><!--[--><li><!--[-->Fully managed service for relational databases like MySQL, PostgreSQL, SQL Server, and MariaDB.<!--]--></li><li><!--[-->Automates tasks like backups, patching, and scaling.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon DynamoDB:<!--]--></strong><ul><!--[--><li><!--[-->A fully managed NoSQL database designed for key-value and document-based workloads.<!--]--></li><li><!--[-->Offers low-latency performance for high-scale applications.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon Aurora:<!--]--></strong><ul><!--[--><li><!--[-->A high-performance, fully managed relational database engine.<!--]--></li><li><!--[-->Compatible with MySQL and PostgreSQL but up to five times faster.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon Redshift:<!--]--></strong><ul><!--[--><li><!--[-->A fully managed data warehouse solution for analyzing large datasets.<!--]--></li><li><!--[-->Supports SQL queries for data analytics and business intelligence.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon ElastiCache:<!--]--></strong><ul><!--[--><li><!--[-->In-memory data store that supports Redis and Memcached.<!--]--></li><li><!--[-->Ideal for caching, session management, and real-time analytics.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ul><h3><a><!--[-->Use Cases for Databases:<!--]--></a></h3><ul><!--[--><li><!--[-->Building e-commerce platforms with relational databases.<!--]--></li><li><!--[-->Developing real-time gaming leaderboards using DynamoDB.<!--]--></li><li><!--[-->Analyzing business metrics with data warehouses like Redshift.<!--]--></li><!--]--></ul><h2><a><!--[-->4. Networking: Connecting Everything Together<!--]--></a></h2><p><!--[-->Networking is the glue that holds your cloud architecture together. AWS offers robust networking solutions to securely connect resources, optimize performance, and deliver content globally.<!--]--></p><h3><a><!--[-->Key Networking Services:<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Amazon VPC (Virtual Private Cloud):<!--]--></strong><ul><!--[--><li><!--[-->Allows you to create isolated networks in the AWS cloud.<!--]--></li><li><!--[-->Provides control over IP address ranges, subnets, and routing.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Elastic Load Balancing (ELB):<!--]--></strong><ul><!--[--><li><!--[-->Automatically distributes incoming traffic across multiple targets.<!--]--></li><li><!--[-->Ensures high availability and fault tolerance for applications.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon Route 53:<!--]--></strong><ul><!--[--><li><!--[-->A scalable DNS and domain name registration service.<!--]--></li><li><!--[-->Supports traffic routing, health checks, and DNS failover.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->AWS Direct Connect:<!--]--></strong><ul><!--[--><li><!--[-->A dedicated network connection from your on-premises data center to AWS.<!--]--></li><li><!--[-->Ideal for reducing latency and improving security.<!--]--></li><!--]--></ul><!--]--></li><li><!--[--><strong><!--[-->Amazon CloudFront:<!--]--></strong><ul><!--[--><li><!--[-->A content delivery network (CDN) that speeds up the delivery of static and dynamic content.<!--]--></li><li><!--[-->Works seamlessly with S3, EC2, and Route 53 for global content distribution.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ul><h3><a><!--[-->Use Cases for Networking:<!--]--></a></h3><ul><!--[--><li><!--[-->Building secure networks for multi-tier web applications.<!--]--></li><li><!--[-->Distributing static content like images and videos globally.<!--]--></li><li><!--[-->Ensuring low-latency connections between on-premises data centers and AWS.<!--]--></li><!--]--></ul><h2><a><!--[-->Why These Core Services Matter<!--]--></a></h2><p><!--[-->AWS’s compute, storage, database, and networking services form the foundation of nearly every cloud solution. By understanding how these services work and how they integrate, businesses can:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Optimize Performance:<!--]--></strong> Select the right compute and database services for your application’s needs.<!--]--></li><li><!--[--><strong><!--[-->Reduce Costs:<!--]--></strong> Use cost-efficient storage options like S3 or Glacier.<!--]--></li><li><!--[--><strong><!--[-->Enhance Security:<!--]--></strong> Build secure networks using VPC, IAM, and encryption.<!--]--></li><li><!--[--><strong><!--[-->Scale Easily:<!--]--></strong> Leverage AWS’s elastic capabilities to handle traffic spikes or growing data volumes.<!--]--></li><!--]--></ul><h2><a><!--[-->Real-World Example: Building a Scalable Web Application<!--]--></a></h2><p><!--[-->Imagine you’re building an e-commerce application. Here’s how AWS core services come together:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Compute:<!--]--></strong><br>
Use Amazon EC2 to host the application backend, with AWS Lambda for serverless features like image processing.<!--]--></li><li><!--[--><strong><!--[-->Storage:<!--]--></strong><br>
Store product images in S3 and use S3 Glacier for backups.<!--]--></li><li><!--[--><strong><!--[-->Databases:<!--]--></strong><br>
Use Amazon RDS for transaction data and DynamoDB for session storage.<!--]--></li><li><!--[--><strong><!--[-->Networking:<!--]--></strong><br>
Use Amazon CloudFront to deliver images quickly, Route 53 for DNS, and Elastic Load Balancing to manage traffic across EC2 instances.<!--]--></li><!--]--></ol><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->AWS’s compute, storage, database, and networking services are the building blocks of modern cloud architectures. By leveraging these services effectively, businesses can build scalable, secure, and cost-efficient applications.<!--]--></p><p><!--[-->Whether you’re migrating existing workloads or building cloud-native solutions, understanding these core services is key to unlocking the full potential of AWS. Ready to get started? Explore these services in the AWS Management Console and begin your cloud journey today!<!--]--></p><h3><a><!--[-->Questions or Feedback?<!--]--></a></h3><p><!--[-->Have questions about AWS Compute, Storage, Databases, or Networking? Share your thoughts in the comments below!<!--]--></p><p><!--[-->Happy coding!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What Is the Well-Architected Framework?]]></title>
            <link>https://rahulaher.netlify.app/articles/aws-solution-architect-2-4/</link>
            <guid>https://rahulaher.netlify.app/articles/aws-solution-architect-2-4/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Consistency and standards are important for building a unified design language and help the user know what to expect from our product and how to use it. However, this does not mean sacrificing the user experience. In this sense, the context and needs of our users are priorities when developing our solutions.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->What Is the Well-Architected Framework?<!--]--></a></h2><p><!--[-->Building in the cloud requires more than just technology; it requires a strong architectural foundation to ensure your applications are secure, scalable, cost-efficient, and reliable. This is where AWS’s <strong><!--[-->Well-Architected Framework<!--]--></strong> comes into play.<!--]--></p><p><!--[-->The AWS Well-Architected Framework is a set of best practices, guidelines, and strategies designed to help you build robust, high-performing cloud applications. In this blog, we’ll explore what the framework is, its core principles, and how it helps you design better cloud solutions.<!--]--></p><h2><a><!--[-->Understanding the Well-Architected Framework<!--]--></a></h2><p><!--[-->The <strong><!--[-->AWS Well-Architected Framework<!--]--></strong> provides a consistent way to evaluate your cloud workloads and ensure they align with your business and technical goals. It serves as a guide to help you design and operate reliable, secure, efficient, and cost-effective systems in the cloud.<!--]--></p><p><!--[-->Originally launched by AWS to help customers improve their cloud architectures, the framework is now a cornerstone for building cloud-native applications.<!--]--></p><h2><a><!--[-->The Five Pillars of the Well-Architected Framework<!--]--></a></h2><p><!--[-->The Well-Architected Framework is built on <strong><!--[-->five key pillars<!--]--></strong>, each representing a critical aspect of a modern cloud application:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Operational Excellence<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Focuses on how you run and monitor systems to deliver business value.<!--]--></li><li><!--[-->Emphasizes automating changes, responding to events, and defining standards for daily operations.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Best Practices:<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->Implement infrastructure as code (IaC) for consistent deployments.<!--]--></li><li><!--[-->Monitor systems using tools like Amazon CloudWatch.<!--]--></li><li><!--[-->Define runbooks for operational procedures and disaster recovery.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Security<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Ensures that your systems are protected from unauthorized access and vulnerabilities.<!--]--></li><li><!--[-->Covers identity management, data protection, and incident response.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Best Practices:<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->Use AWS Identity and Access Management (IAM) to control access to resources.<!--]--></li><li><!--[-->Encrypt data at rest and in transit using AWS Key Management Service (KMS).<!--]--></li><li><!--[-->Regularly perform security audits and enable logging with AWS CloudTrail.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Reliability<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Focuses on ensuring a workload performs its intended function correctly and consistently.<!--]--></li><li><!--[-->Covers disaster recovery, fault tolerance, and system availability.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Best Practices:<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->Use distributed systems and redundancy to minimize single points of failure.<!--]--></li><li><!--[-->Implement health checks and failover mechanisms with Elastic Load Balancing.<!--]--></li><li><!--[-->Use AWS Backup and Amazon RDS Multi-AZ deployments for data resilience.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Performance Efficiency<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Focuses on using IT resources efficiently to meet requirements and adapt to changing demands.<!--]--></li><li><!--[-->Covers selecting the right instance types, scaling dynamically, and optimizing performance.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Best Practices:<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->Leverage AWS Auto Scaling to adjust resources automatically.<!--]--></li><li><!--[-->Use managed services like Amazon DynamoDB and AWS Lambda for optimal performance.<!--]--></li><li><!--[-->Continuously monitor and refine performance using tools like AWS Trusted Advisor.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Cost Optimization<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Ensures that your architecture delivers business value without overspending.<!--]--></li><li><!--[-->Covers eliminating waste, using cost-effective resources, and understanding where your money is going.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Best Practices:<!--]--></strong><!--]--></p><ul><!--[--><li><!--[-->Use AWS Cost Explorer to monitor and analyze spending.<!--]--></li><li><!--[-->Implement Savings Plans or Reserved Instances for predictable workloads.<!--]--></li><li><!--[-->Use serverless and spot instances to minimize costs.<!--]--></li><!--]--></ul><h2><a><!--[-->Why Is the Well-Architected Framework Important?<!--]--></a></h2><p><!--[-->The Well-Architected Framework isn’t just a checklist—it’s a comprehensive approach to building better cloud solutions. Here’s why it’s crucial:<!--]--></p><ol><!--[--><li><!--[--><strong><!--[-->Consistency:<!--]--></strong> Provides a standardized approach to evaluate and improve your architecture.<!--]--></li><li><!--[--><strong><!--[-->Proactive Problem Solving:<!--]--></strong> Helps identify risks and areas of improvement before they impact your business.<!--]--></li><li><!--[--><strong><!--[-->Scalability:<!--]--></strong> Ensures your applications can handle growth without compromising performance.<!--]--></li><li><!--[--><strong><!--[-->Cost Efficiency:<!--]--></strong> Guides you to reduce unnecessary expenses while maximizing value.<!--]--></li><!--]--></ol><h2><a><!--[-->Real-World Example: Applying the Framework<!--]--></a></h2><p><!--[-->Let’s say you’re designing a video streaming application. Here’s how the Well-Architected Framework might guide your design:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Operational Excellence:<!--]--></strong><br>
Automate deployments using AWS CodePipeline and monitor video playback quality with Amazon CloudWatch.<!--]--></li><li><!--[--><strong><!--[-->Security:<!--]--></strong><br>
Protect user data with IAM policies, encrypt video files in S3, and enable WAF (Web Application Firewall) to block malicious traffic.<!--]--></li><li><!--[--><strong><!--[-->Reliability:<!--]--></strong><br>
Use Amazon CloudFront to cache video content and ensure high availability with Multi-AZ deployments.<!--]--></li><li><!--[--><strong><!--[-->Performance Efficiency:<!--]--></strong><br>
Leverage AWS Lambda for encoding workflows and use EC2 Spot Instances for rendering video files.<!--]--></li><li><!--[--><strong><!--[-->Cost Optimization:<!--]--></strong><br>
Use S3 Intelligent-Tiering for storing videos and monitor costs with AWS Budgets.<!--]--></li><!--]--></ul><h2><a><!--[-->The Well-Architected Tool<!--]--></a></h2><p><!--[-->AWS offers the <strong><!--[-->Well-Architected Tool<!--]--></strong> within the Management Console to help you review your workloads. This tool provides insights, recommendations, and a detailed report based on the five pillars.<!--]--></p><p><!--[--><strong><!--[-->How It Works:<!--]--></strong><!--]--></p><ol><!--[--><li><!--[-->Answer a series of questions about your workload.<!--]--></li><li><!--[-->Receive recommendations and best practices tailored to your application.<!--]--></li><li><!--[-->Track progress over time as you make improvements.<!--]--></li><!--]--></ol><h2><a><!--[-->Benefits of Following the Well-Architected Framework<!--]--></a></h2><ol><!--[--><li><!--[--><strong><!--[-->Build for the Future:<!--]--></strong> Design applications that can grow with your business.<!--]--></li><li><!--[--><strong><!--[-->Improve Security:<!--]--></strong> Protect sensitive data and minimize vulnerabilities.<!--]--></li><li><!--[--><strong><!--[-->Enhance Reliability:<!--]--></strong> Deliver consistent performance for your users.<!--]--></li><li><!--[--><strong><!--[-->Optimize Costs:<!--]--></strong> Maximize ROI by eliminating unnecessary expenses.<!--]--></li><li><!--[--><strong><!--[-->Continuous Improvement:<!--]--></strong> Use the framework as an ongoing guide to refine your architecture.<!--]--></li><!--]--></ol><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->The AWS Well-Architected Framework is more than a set of best practices—it’s a blueprint for success in the cloud. By following its five pillars, you can design cloud applications that are secure, scalable, reliable, efficient, and cost-effective.<!--]--></p><p><!--[-->Whether you’re just starting in the cloud or optimizing an existing workload, the Well-Architected Framework is your key to building solutions that stand the test of time.<!--]--></p><p><!--[-->Ready to evaluate your architecture? Start using the Well-Architected Tool in the AWS Management Console and take your cloud applications to the next level.<!--]--></p><h3><a><!--[-->Questions or Feedback?<!--]--></a></h3><p><!--[-->Have questions about the AWS Well-Architected Framework? Share your thoughts in the comments or let us know how you’ve applied the framework in your projects!<!--]--></p><p><!--[-->Happy coding!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AWS Fundamentals Exam Tips]]></title>
            <link>https://rahulaher.netlify.app/articles/aws-solution-architect-2-5/</link>
            <guid>https://rahulaher.netlify.app/articles/aws-solution-architect-2-5/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Consistency and standards are important for building a unified design language and help the user know what to expect from our product and how to use it. However, this does not mean sacrificing the user experience. In this sense, the context and needs of our users are priorities when developing our solutions.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->AWS Fundamentals Exam Tips<!--]--></a></h2><p><!--[-->Are you planning to take an AWS certification exam? Whether you're aiming for the <strong><!--[-->AWS Certified Solutions Architect – Associate<!--]--></strong>, <strong><!--[-->AWS Certified Developer – Associate<!--]--></strong>, or the <strong><!--[-->AWS Certified Cloud Practitioner<!--]--></strong>, success requires preparation and strategy. AWS certification exams test your knowledge of AWS services, cloud architecture, and best practices. In this blog, we’ll share essential tips and techniques to help you excel in your AWS fundamentals exam.<!--]--></p><h2><a><!--[-->Why AWS Certifications Matter<!--]--></a></h2><p><!--[-->AWS certifications validate your expertise in cloud computing and demonstrate your ability to design, deploy, and operate applications on AWS. They are recognized globally and can open doors to lucrative career opportunities.<!--]--></p><p><!--[-->For beginners, the <strong><!--[-->AWS Certified Cloud Practitioner<!--]--></strong> is a great starting point, while the <strong><!--[-->AWS Certified Solutions Architect – Associate<!--]--></strong> is perfect for those diving deeper into cloud architecture. Regardless of your goal, these tips will set you up for success.<!--]--></p><h2><a><!--[-->Top Exam Tips for AWS Fundamentals<!--]--></a></h2><h3><a><!--[-->1. <strong><!--[-->Understand the Exam Blueprint<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Every AWS certification exam has an <strong><!--[-->Exam Guide<!--]--></strong> that outlines:
<ul><!--[--><li><!--[-->Domains covered (e.g., Compute, Storage, Networking).<!--]--></li><li><!--[-->Percentage weightage of each domain.<!--]--></li><!--]--></ul><!--]--></li><li><!--[-->Download the guide from the AWS Certification website and use it as your roadmap.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> Focus more on domains with higher weightage. For example, in the AWS Solutions Architect exam, topics like “Designing Resilient Architectures” are heavily weighted.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Familiarize Yourself with AWS Services<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->AWS offers <strong><!--[-->200+ services<!--]--></strong>, but not all are tested in the exam. Focus on core services such as:
<ul><!--[--><li><!--[--><strong><!--[-->Compute<!--]--></strong>: EC2, Lambda, Elastic Beanstalk.<!--]--></li><li><!--[--><strong><!--[-->Storage<!--]--></strong>: S3, EBS, Glacier.<!--]--></li><li><!--[--><strong><!--[-->Databases<!--]--></strong>: RDS, DynamoDB.<!--]--></li><li><!--[--><strong><!--[-->Networking<!--]--></strong>: VPC, CloudFront, Route 53.<!--]--></li><!--]--></ul><!--]--></li><li><!--[-->Understand the purpose and use cases for each service.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> Use the <strong><!--[-->AWS Free Tier<!--]--></strong> to gain hands-on experience with these services.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Leverage AWS Training Resources<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->AWS provides a wealth of resources to help you prepare:
<ul><!--[--><li><!--[--><strong><!--[-->AWS Training and Certification Portal<!--]--></strong>: Offers free and paid courses.<!--]--></li><li><!--[--><strong><!--[-->AWS Skill Builder<!--]--></strong>: Includes exam-specific learning paths.<!--]--></li><li><!--[--><strong><!--[-->AWS Documentation<!--]--></strong>: Provides detailed service overviews and FAQs.<!--]--></li><!--]--></ul><!--]--></li><li><!--[-->Enroll in instructor-led training if you prefer guided learning.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> Take advantage of AWS’s <strong><!--[-->Exam Readiness Workshops<!--]--></strong> for certification-specific guidance.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Practice with Mock Exams<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Practice exams simulate the real test environment and help identify knowledge gaps.<!--]--></li><li><!--[-->Use platforms like:
<ul><!--[--><li><!--[--><strong><!--[-->AWS Training Portal<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Whizlabs<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Tutorials Dojo<!--]--></strong><!--]--></li><li><!--[--><strong><!--[-->Udemy<!--]--></strong><!--]--></li><!--]--></ul><!--]--></li><li><!--[-->Review your mistakes thoroughly and revisit weak areas.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> Time yourself during practice exams to get used to the pressure of answering questions within the allocated time.<!--]--></p><h3><a><!--[-->5. <strong><!--[-->Master Key Concepts<!--]--></strong><!--]--></a></h3><p><!--[-->AWS exams test practical knowledge. Focus on these concepts:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Shared Responsibility Model<!--]--></strong>: Understand the division of responsibilities between AWS and customers.<!--]--></li><li><!--[--><strong><!--[-->High Availability and Fault Tolerance<!--]--></strong>: Know how to design resilient systems.<!--]--></li><li><!--[--><strong><!--[-->IAM (Identity and Access Management)<!--]--></strong>: Familiarize yourself with roles, policies, and permissions.<!--]--></li><li><!--[--><strong><!--[-->Well-Architected Framework<!--]--></strong>: Review its five pillars: Operational Excellence, Security, Reliability, Performance Efficiency, and Cost Optimization.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Hands-On Practice<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Theoretical knowledge alone isn’t enough. Gain hands-on experience with the AWS Management Console, CLI, and SDKs.<!--]--></li><li><!--[-->Try implementing simple projects like:
<ul><!--[--><li><!--[-->Hosting a static website using S3 and CloudFront.<!--]--></li><li><!--[-->Creating a VPC with public and private subnets.<!--]--></li><li><!--[-->Deploying a serverless application using AWS Lambda and API Gateway.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> AWS Labs on GitHub offers great real-world scenarios for hands-on practice.<!--]--></p><h3><a><!--[-->7. <strong><!--[-->Time Management During the Exam<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->AWS exams typically consist of multiple-choice and multiple-response questions.<!--]--></li><li><!--[--><strong><!--[-->Strategy:<!--]--></strong><ul><!--[--><li><!--[-->Answer easy questions first to save time.<!--]--></li><li><!--[-->Flag difficult questions and revisit them later.<!--]--></li><!--]--></ul><!--]--></li><li><!--[-->Allocate 1-2 minutes per question and keep an eye on the timer.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> Eliminate obviously incorrect answers to improve your chances of selecting the right one.<!--]--></p><h3><a><!--[-->8. <strong><!--[-->Focus on Real-World Scenarios<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->AWS exams often include scenario-based questions. Understand how services integrate to solve business problems.<!--]--></li><li><!--[-->Example:<br><strong><!--[-->Scenario:<!--]--></strong> A company wants to migrate a database with minimal downtime. Which service would you recommend?<br><strong><!--[-->Answer:<!--]--></strong> AWS Database Migration Service (DMS).<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> Think like an architect or developer when answering questions.<!--]--></p><h3><a><!--[-->9. <strong><!--[-->Review the Exam Readiness Checklist<!--]--></strong><!--]--></a></h3><p><!--[-->Before the exam, ensure you’ve:<!--]--></p><ul><!--[--><li><!--[-->Reviewed the exam guide and practice questions.<!--]--></li><li><!--[-->Understood key AWS services and concepts.<!--]--></li><li><!--[-->Completed at least one full-length practice exam.<!--]--></li><li><!--[-->Gained sufficient hands-on experience.<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> Take the exam only when you feel confident and ready.<!--]--></p><h3><a><!--[-->10. <strong><!--[-->Stay Calm and Confident<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->On exam day:
<ul><!--[--><li><!--[-->Get a good night’s sleep.<!--]--></li><li><!--[-->Arrive early or log in to the exam portal on time.<!--]--></li><li><!--[-->Read each question carefully and don’t overthink.<!--]--></li><!--]--></ul><!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Pro Tip:<!--]--></strong> Remember that it’s okay to skip and return to difficult questions.<!--]--></p><h2><a><!--[-->Exam Success Stories: Learn from Others<!--]--></a></h2><p><!--[-->Many AWS professionals have shared their exam experiences online. Reading their success stories can:<!--]--></p><ul><!--[--><li><!--[-->Provide insights into the types of questions asked.<!--]--></li><li><!--[-->Highlight additional preparation strategies.<!--]--></li><li><!--[-->Motivate you to keep going.<!--]--></li><!--]--></ul><p><!--[-->Check forums like <strong><!--[-->Reddit<!--]--></strong>, <strong><!--[-->AWS Community<!--]--></strong>, and <strong><!--[-->LinkedIn<!--]--></strong> for inspiration.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->The AWS Fundamentals exams are a stepping stone to a successful cloud computing career. By understanding the exam format, practicing diligently, and leveraging AWS’s vast resources, you can confidently approach your certification journey.<!--]--></p><p><!--[-->Remember, the goal isn’t just to pass the exam but to gain knowledge that you can apply in real-world scenarios. With the right preparation, you’ll not only earn your AWS certification but also set yourself apart as a skilled cloud professional.<!--]--></p><h3><a><!--[-->Questions or Feedback?<!--]--></a></h3><p><!--[-->Are you preparing for an AWS exam? Share your favorite tips or ask questions in the comments below!<!--]--></p><p><!--[-->Happy coding!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is System Design]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-system-design-1-1/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-system-design-1-1/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Systems Design is the process of defining the architecture, components, modules, interfaces, and data for a system to satisfy specified requirements. It involves translating user requirements into a detailed blueprint that guides the implementation phase. The goal is to create a well-organized and efficient structure that meets the intended purpose while considering factors like scalability, maintainability, and performance.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->What is System Design?<!--]--></a></h2><p><!--[-->System Design is a critical aspect of software engineering that involves defining the architecture, components, modules, interfaces, and data flow of a system to meet specific requirements. It translates user requirements into a blueprint that guides developers and ensures scalability, maintainability, and performance. Whether you’re designing a simple application or a large-scale distributed system, system design lays the foundation for creating robust, efficient, and reliable software.<!--]--></p><p><!--[-->In this blog post, we will dive into the core concepts of system design, its importance, the process, and best practices to help you design systems that meet the intended goals effectively.<!--]--></p><h2><a><!--[-->Table of Contents<!--]--></a></h2><ol><!--[--><li><!--[--><a><!--[--><!--[-->Why is System Design Important?<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Key Components of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Types of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->The System Design Process<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Principles of Good System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Common Challenges in System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Conclusion<!--]--><!--]--></a><!--]--></li><!--]--></ol><h2><a><!--[-->Why is System Design Important?<!--]--></a></h2><p><!--[-->System design is the backbone of software development. It ensures that the final product is:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Scalable<!--]--></strong>: Able to handle increased loads and data volume without compromising performance.<!--]--></li><li><!--[--><strong><!--[-->Maintainable<!--]--></strong>: Easy to modify and extend as requirements evolve.<!--]--></li><li><!--[--><strong><!--[-->Reliable<!--]--></strong>: Ensures uptime, fault tolerance, and resilience under failure conditions.<!--]--></li><li><!--[--><strong><!--[-->Efficient<!--]--></strong>: Optimized for resource usage such as memory, CPU, and storage.<!--]--></li><!--]--></ul><p><!--[-->A well-designed system saves development time, reduces technical debt, and enhances user satisfaction. It enables teams to build software that not only meets current needs but is also future-proof.<!--]--></p><h2><a><!--[-->Key Components of System Design<!--]--></a></h2><p><!--[-->System design involves multiple components working together. Here are the key elements:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Defines the overall structure of the system. Common architectures include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Monolithic Architecture<!--]--></strong>: A single codebase for the entire application.<!--]--></li><li><!--[--><strong><!--[-->Microservices Architecture<!--]--></strong>: Divides the system into small, independent services.<!--]--></li><li><!--[--><strong><!--[-->Serverless Architecture<!--]--></strong>: Leverages cloud services to run functions without managing servers.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Data Storage<!--]--></strong><!--]--></a></h3><p><!--[-->Data storage is critical for system design. You can choose between:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Relational Databases (RDBMS)<!--]--></strong>: Such as MySQL, PostgreSQL, or Oracle. These are ideal for structured data and complex queries.<!--]--></li><li><!--[--><strong><!--[-->NoSQL Databases<!--]--></strong>: Such as MongoDB, Cassandra, or Redis. These are optimized for unstructured or semi-structured data and scalability.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->APIs and Interfaces<!--]--></strong><!--]--></a></h3><p><!--[-->Defines how components communicate. Common API designs include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->REST<!--]--></strong>: Based on HTTP methods like GET, POST, PUT, and DELETE.<!--]--></li><li><!--[--><strong><!--[-->GraphQL<!--]--></strong>: Allows clients to request specific data.<!--]--></li><li><!--[--><strong><!--[-->gRPC<!--]--></strong>: Efficient for communication in distributed systems.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Networking<!--]--></strong><!--]--></a></h3><p><!--[-->Networking includes components like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Load Balancers<!--]--></strong>: Distribute traffic across servers to ensure availability.<!--]--></li><li><!--[--><strong><!--[-->CDNs<!--]--></strong>: Reduce latency by serving content closer to users.<!--]--></li><li><!--[--><strong><!--[-->Firewalls<!--]--></strong>: Secure the system from external threats.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Scalability and Caching<!--]--></strong><!--]--></a></h3><p><!--[-->To handle high traffic:<!--]--></p><ul><!--[--><li><!--[-->Use <strong><!--[-->horizontal scaling<!--]--></strong> (adding more servers) or <strong><!--[-->vertical scaling<!--]--></strong> (adding resources to existing servers).<!--]--></li><li><!--[-->Implement caching with tools like Redis or Memcached to reduce database load.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Monitoring and Logging<!--]--></strong><!--]--></a></h3><p><!--[-->Tools like Prometheus, Grafana, and ELK Stack help monitor system performance and identify issues.<!--]--></p><h2><a><!--[-->Types of System Design<!--]--></a></h2><p><!--[-->System design can be broadly classified into two categories:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->High-Level Design (HLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Focuses on the overall architecture and major components. It addresses:<!--]--></p><ul><!--[--><li><!--[-->The choice of architecture (e.g., monolithic or microservices).<!--]--></li><li><!--[-->Database selection and schema design.<!--]--></li><li><!--[-->Key APIs and external integrations.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Low-Level Design (LLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Deals with the detailed design of components, modules, and classes. It includes:<!--]--></p><ul><!--[--><li><!--[-->Data structures and algorithms.<!--]--></li><li><!--[-->Specific database queries.<!--]--></li><li><!--[-->Implementation details of APIs and interfaces.<!--]--></li><!--]--></ul><p><!--[-->Both HLD and LLD are essential for building a comprehensive system.<!--]--></p><h2><a><!--[-->The System Design Process<!--]--></a></h2><p><!--[-->Designing a system requires a structured approach. Here’s a step-by-step guide:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Understand Requirements<!--]--></strong><!--]--></a></h3><p><!--[-->Begin by gathering and analyzing the requirements:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Functional Requirements<!--]--></strong>: What should the system do? Example: “Allow users to upload photos.”<!--]--></li><li><!--[--><strong><!--[-->Non-Functional Requirements<!--]--></strong>: How should the system perform? Example: “Handle 1 million users with low latency.”<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Define Key Components<!--]--></strong><!--]--></a></h3><p><!--[-->Break the system into smaller, manageable components. For instance:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: The user interface.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: Business logic and APIs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Storage and retrieval of data.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Choose the Right Tools<!--]--></strong><!--]--></a></h3><p><!--[-->Select technologies and tools based on your needs:<!--]--></p><ul><!--[--><li><!--[-->For high scalability, consider NoSQL databases.<!--]--></li><li><!--[-->For rapid development, frameworks like Django or Spring Boot can be helpful.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Design the Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Create a high-level architecture diagram that shows:<!--]--></p><ul><!--[--><li><!--[-->Components and their interactions.<!--]--></li><li><!--[-->Data flow between components.<!--]--></li><li><!--[-->Third-party services (e.g., payment gateways, cloud services).<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Optimize for Scalability and Performance<!--]--></strong><!--]--></a></h3><p><!--[-->Incorporate techniques like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Sharding<!--]--></strong>: Splitting data across multiple databases.<!--]--></li><li><!--[--><strong><!--[-->Replication<!--]--></strong>: Creating copies of data for redundancy.<!--]--></li><li><!--[--><strong><!--[-->Asynchronous Processing<!--]--></strong>: Using message queues like Kafka or RabbitMQ.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Plan for Monitoring and Maintenance<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can be monitored and debugged with tools like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->New Relic<!--]--></strong> for application performance monitoring.<!--]--></li><li><!--[--><strong><!--[-->Splunk<!--]--></strong> for log management.<!--]--></li><!--]--></ul><h3><a><!--[-->7. <strong><!--[-->Iterate and Refine<!--]--></strong><!--]--></a></h3><p><!--[-->System design is rarely perfect in the first iteration. Continuously test, gather feedback, and improve the design.<!--]--></p><h2><a><!--[-->Principles of Good System Design<!--]--></a></h2><p><!--[-->Here are some key principles to follow:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><p><!--[-->Design the system to handle growth in users, data, and traffic.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Reliability<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can recover from failures with techniques like backups, replication, and failover mechanisms.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Maintainability<!--]--></strong><!--]--></a></h3><p><!--[-->Write clean, modular, and well-documented code to make the system easy to maintain.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Performance Optimization<!--]--></strong><!--]--></a></h3><p><!--[-->Optimize the system for speed and efficiency, minimizing latency and resource usage.<!--]--></p><h3><a><!--[-->5. <strong><!--[-->Security<!--]--></strong><!--]--></a></h3><p><!--[-->Protect the system from vulnerabilities with encryption, authentication, and firewalls.<!--]--></p><h2><a><!--[-->Common Challenges in System Design<!--]--></a></h2><p><!--[-->Designing systems is not without challenges. Some common issues include:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Handling High Traffic<!--]--></strong><!--]--></a></h3><p><!--[-->Scaling systems to handle millions of users requires efficient load balancing and caching strategies.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Data Consistency<!--]--></strong><!--]--></a></h3><p><!--[-->Maintaining consistency in distributed systems can be complex. Techniques like the <strong><!--[-->CAP Theorem<!--]--></strong> help balance consistency, availability, and partition tolerance.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Latency<!--]--></strong><!--]--></a></h3><p><!--[-->Reducing latency involves optimizing database queries, using CDNs, and minimizing network hops.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Cost Management<!--]--></strong><!--]--></a></h3><p><!--[-->Building and running a large-scale system can be expensive. Cost-efficient solutions like serverless architectures can help.<!--]--></p><h2><a><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--></a></h2><p><!--[-->Let’s apply the system design principles to build a URL shortener like <strong><!--[-->Bitly<!--]--></strong>.<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Requirements<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Functional: Shorten URLs, redirect to original URLs, track usage.<!--]--></li><li><!--[-->Non-Functional: Handle 1 billion requests per month, low latency, high availability.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->High-Level Design<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: A web interface for users to enter URLs.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: API to create and retrieve short URLs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Store mappings of short and original URLs.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Database Design<!--]--></strong><!--]--></a></h3><p><!--[-->Use a key-value store like DynamoDB or Redis:<!--]--></p><ul><!--[--><li><!--[-->Key: Short URL.<!--]--></li><li><!--[-->Value: Original URL.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Use a <strong><!--[-->load balancer<!--]--></strong> to distribute traffic.<!--]--></li><li><!--[-->Implement caching to reduce database load.<!--]--></li><li><!--[-->Use <strong><!--[-->partitioning<!--]--></strong> for storing data.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Monitoring<!--]--></strong><!--]--></a></h3><p><!--[-->Set up alerts for high latency or failure rates using tools like CloudWatch.<!--]--></p><p><!--[-->By following this process, you can design a system that meets both functional and non-functional requirements.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->System design is a cornerstone of software engineering. It transforms abstract requirements into a concrete, scalable, and maintainable structure. By understanding the principles, process, and challenges of system design, you can build software that performs efficiently, scales gracefully, and satisfies user needs.<!--]--></p><p><!--[-->Whether you’re preparing for interviews, building new systems, or improving existing ones, mastering system design is an invaluable skill. Start by practicing with common problems, such as designing a chat application or a social media feed, and iteratively refine your approach.<!--]--></p><p><!--[-->Happy designing!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is System Design]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-system-design-1-2/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-system-design-1-2/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Systems Design is the process of defining the architecture, components, modules, interfaces, and data for a system to satisfy specified requirements. It involves translating user requirements into a detailed blueprint that guides the implementation phase. The goal is to create a well-organized and efficient structure that meets the intended purpose while considering factors like scalability, maintainability, and performance.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->What is System Design?<!--]--></a></h2><p><!--[-->System Design is a critical aspect of software engineering that involves defining the architecture, components, modules, interfaces, and data flow of a system to meet specific requirements. It translates user requirements into a blueprint that guides developers and ensures scalability, maintainability, and performance. Whether you’re designing a simple application or a large-scale distributed system, system design lays the foundation for creating robust, efficient, and reliable software.<!--]--></p><p><!--[-->In this blog post, we will dive into the core concepts of system design, its importance, the process, and best practices to help you design systems that meet the intended goals effectively.<!--]--></p><h2><a><!--[-->Table of Contents<!--]--></a></h2><ol><!--[--><li><!--[--><a><!--[--><!--[-->Why is System Design Important?<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Key Components of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Types of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->The System Design Process<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Principles of Good System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Common Challenges in System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Conclusion<!--]--><!--]--></a><!--]--></li><!--]--></ol><h2><a><!--[-->Why is System Design Important?<!--]--></a></h2><p><!--[-->System design is the backbone of software development. It ensures that the final product is:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Scalable<!--]--></strong>: Able to handle increased loads and data volume without compromising performance.<!--]--></li><li><!--[--><strong><!--[-->Maintainable<!--]--></strong>: Easy to modify and extend as requirements evolve.<!--]--></li><li><!--[--><strong><!--[-->Reliable<!--]--></strong>: Ensures uptime, fault tolerance, and resilience under failure conditions.<!--]--></li><li><!--[--><strong><!--[-->Efficient<!--]--></strong>: Optimized for resource usage such as memory, CPU, and storage.<!--]--></li><!--]--></ul><p><!--[-->A well-designed system saves development time, reduces technical debt, and enhances user satisfaction. It enables teams to build software that not only meets current needs but is also future-proof.<!--]--></p><h2><a><!--[-->Key Components of System Design<!--]--></a></h2><p><!--[-->System design involves multiple components working together. Here are the key elements:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Defines the overall structure of the system. Common architectures include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Monolithic Architecture<!--]--></strong>: A single codebase for the entire application.<!--]--></li><li><!--[--><strong><!--[-->Microservices Architecture<!--]--></strong>: Divides the system into small, independent services.<!--]--></li><li><!--[--><strong><!--[-->Serverless Architecture<!--]--></strong>: Leverages cloud services to run functions without managing servers.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Data Storage<!--]--></strong><!--]--></a></h3><p><!--[-->Data storage is critical for system design. You can choose between:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Relational Databases (RDBMS)<!--]--></strong>: Such as MySQL, PostgreSQL, or Oracle. These are ideal for structured data and complex queries.<!--]--></li><li><!--[--><strong><!--[-->NoSQL Databases<!--]--></strong>: Such as MongoDB, Cassandra, or Redis. These are optimized for unstructured or semi-structured data and scalability.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->APIs and Interfaces<!--]--></strong><!--]--></a></h3><p><!--[-->Defines how components communicate. Common API designs include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->REST<!--]--></strong>: Based on HTTP methods like GET, POST, PUT, and DELETE.<!--]--></li><li><!--[--><strong><!--[-->GraphQL<!--]--></strong>: Allows clients to request specific data.<!--]--></li><li><!--[--><strong><!--[-->gRPC<!--]--></strong>: Efficient for communication in distributed systems.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Networking<!--]--></strong><!--]--></a></h3><p><!--[-->Networking includes components like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Load Balancers<!--]--></strong>: Distribute traffic across servers to ensure availability.<!--]--></li><li><!--[--><strong><!--[-->CDNs<!--]--></strong>: Reduce latency by serving content closer to users.<!--]--></li><li><!--[--><strong><!--[-->Firewalls<!--]--></strong>: Secure the system from external threats.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Scalability and Caching<!--]--></strong><!--]--></a></h3><p><!--[-->To handle high traffic:<!--]--></p><ul><!--[--><li><!--[-->Use <strong><!--[-->horizontal scaling<!--]--></strong> (adding more servers) or <strong><!--[-->vertical scaling<!--]--></strong> (adding resources to existing servers).<!--]--></li><li><!--[-->Implement caching with tools like Redis or Memcached to reduce database load.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Monitoring and Logging<!--]--></strong><!--]--></a></h3><p><!--[-->Tools like Prometheus, Grafana, and ELK Stack help monitor system performance and identify issues.<!--]--></p><h2><a><!--[-->Types of System Design<!--]--></a></h2><p><!--[-->System design can be broadly classified into two categories:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->High-Level Design (HLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Focuses on the overall architecture and major components. It addresses:<!--]--></p><ul><!--[--><li><!--[-->The choice of architecture (e.g., monolithic or microservices).<!--]--></li><li><!--[-->Database selection and schema design.<!--]--></li><li><!--[-->Key APIs and external integrations.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Low-Level Design (LLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Deals with the detailed design of components, modules, and classes. It includes:<!--]--></p><ul><!--[--><li><!--[-->Data structures and algorithms.<!--]--></li><li><!--[-->Specific database queries.<!--]--></li><li><!--[-->Implementation details of APIs and interfaces.<!--]--></li><!--]--></ul><p><!--[-->Both HLD and LLD are essential for building a comprehensive system.<!--]--></p><h2><a><!--[-->The System Design Process<!--]--></a></h2><p><!--[-->Designing a system requires a structured approach. Here’s a step-by-step guide:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Understand Requirements<!--]--></strong><!--]--></a></h3><p><!--[-->Begin by gathering and analyzing the requirements:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Functional Requirements<!--]--></strong>: What should the system do? Example: “Allow users to upload photos.”<!--]--></li><li><!--[--><strong><!--[-->Non-Functional Requirements<!--]--></strong>: How should the system perform? Example: “Handle 1 million users with low latency.”<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Define Key Components<!--]--></strong><!--]--></a></h3><p><!--[-->Break the system into smaller, manageable components. For instance:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: The user interface.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: Business logic and APIs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Storage and retrieval of data.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Choose the Right Tools<!--]--></strong><!--]--></a></h3><p><!--[-->Select technologies and tools based on your needs:<!--]--></p><ul><!--[--><li><!--[-->For high scalability, consider NoSQL databases.<!--]--></li><li><!--[-->For rapid development, frameworks like Django or Spring Boot can be helpful.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Design the Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Create a high-level architecture diagram that shows:<!--]--></p><ul><!--[--><li><!--[-->Components and their interactions.<!--]--></li><li><!--[-->Data flow between components.<!--]--></li><li><!--[-->Third-party services (e.g., payment gateways, cloud services).<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Optimize for Scalability and Performance<!--]--></strong><!--]--></a></h3><p><!--[-->Incorporate techniques like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Sharding<!--]--></strong>: Splitting data across multiple databases.<!--]--></li><li><!--[--><strong><!--[-->Replication<!--]--></strong>: Creating copies of data for redundancy.<!--]--></li><li><!--[--><strong><!--[-->Asynchronous Processing<!--]--></strong>: Using message queues like Kafka or RabbitMQ.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Plan for Monitoring and Maintenance<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can be monitored and debugged with tools like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->New Relic<!--]--></strong> for application performance monitoring.<!--]--></li><li><!--[--><strong><!--[-->Splunk<!--]--></strong> for log management.<!--]--></li><!--]--></ul><h3><a><!--[-->7. <strong><!--[-->Iterate and Refine<!--]--></strong><!--]--></a></h3><p><!--[-->System design is rarely perfect in the first iteration. Continuously test, gather feedback, and improve the design.<!--]--></p><h2><a><!--[-->Principles of Good System Design<!--]--></a></h2><p><!--[-->Here are some key principles to follow:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><p><!--[-->Design the system to handle growth in users, data, and traffic.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Reliability<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can recover from failures with techniques like backups, replication, and failover mechanisms.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Maintainability<!--]--></strong><!--]--></a></h3><p><!--[-->Write clean, modular, and well-documented code to make the system easy to maintain.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Performance Optimization<!--]--></strong><!--]--></a></h3><p><!--[-->Optimize the system for speed and efficiency, minimizing latency and resource usage.<!--]--></p><h3><a><!--[-->5. <strong><!--[-->Security<!--]--></strong><!--]--></a></h3><p><!--[-->Protect the system from vulnerabilities with encryption, authentication, and firewalls.<!--]--></p><h2><a><!--[-->Common Challenges in System Design<!--]--></a></h2><p><!--[-->Designing systems is not without challenges. Some common issues include:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Handling High Traffic<!--]--></strong><!--]--></a></h3><p><!--[-->Scaling systems to handle millions of users requires efficient load balancing and caching strategies.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Data Consistency<!--]--></strong><!--]--></a></h3><p><!--[-->Maintaining consistency in distributed systems can be complex. Techniques like the <strong><!--[-->CAP Theorem<!--]--></strong> help balance consistency, availability, and partition tolerance.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Latency<!--]--></strong><!--]--></a></h3><p><!--[-->Reducing latency involves optimizing database queries, using CDNs, and minimizing network hops.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Cost Management<!--]--></strong><!--]--></a></h3><p><!--[-->Building and running a large-scale system can be expensive. Cost-efficient solutions like serverless architectures can help.<!--]--></p><h2><a><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--></a></h2><p><!--[-->Let’s apply the system design principles to build a URL shortener like <strong><!--[-->Bitly<!--]--></strong>.<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Requirements<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Functional: Shorten URLs, redirect to original URLs, track usage.<!--]--></li><li><!--[-->Non-Functional: Handle 1 billion requests per month, low latency, high availability.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->High-Level Design<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: A web interface for users to enter URLs.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: API to create and retrieve short URLs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Store mappings of short and original URLs.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Database Design<!--]--></strong><!--]--></a></h3><p><!--[-->Use a key-value store like DynamoDB or Redis:<!--]--></p><ul><!--[--><li><!--[-->Key: Short URL.<!--]--></li><li><!--[-->Value: Original URL.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Use a <strong><!--[-->load balancer<!--]--></strong> to distribute traffic.<!--]--></li><li><!--[-->Implement caching to reduce database load.<!--]--></li><li><!--[-->Use <strong><!--[-->partitioning<!--]--></strong> for storing data.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Monitoring<!--]--></strong><!--]--></a></h3><p><!--[-->Set up alerts for high latency or failure rates using tools like CloudWatch.<!--]--></p><p><!--[-->By following this process, you can design a system that meets both functional and non-functional requirements.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->System design is a cornerstone of software engineering. It transforms abstract requirements into a concrete, scalable, and maintainable structure. By understanding the principles, process, and challenges of system design, you can build software that performs efficiently, scales gracefully, and satisfies user needs.<!--]--></p><p><!--[-->Whether you’re preparing for interviews, building new systems, or improving existing ones, mastering system design is an invaluable skill. Start by practicing with common problems, such as designing a chat application or a social media feed, and iteratively refine your approach.<!--]--></p><p><!--[-->Happy designing!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is System Design]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-system-design-1-3/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-system-design-1-3/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Systems Design is the process of defining the architecture, components, modules, interfaces, and data for a system to satisfy specified requirements. It involves translating user requirements into a detailed blueprint that guides the implementation phase. The goal is to create a well-organized and efficient structure that meets the intended purpose while considering factors like scalability, maintainability, and performance.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->What is System Design?<!--]--></a></h2><p><!--[-->System Design is a critical aspect of software engineering that involves defining the architecture, components, modules, interfaces, and data flow of a system to meet specific requirements. It translates user requirements into a blueprint that guides developers and ensures scalability, maintainability, and performance. Whether you’re designing a simple application or a large-scale distributed system, system design lays the foundation for creating robust, efficient, and reliable software.<!--]--></p><p><!--[-->In this blog post, we will dive into the core concepts of system design, its importance, the process, and best practices to help you design systems that meet the intended goals effectively.<!--]--></p><h2><a><!--[-->Table of Contents<!--]--></a></h2><ol><!--[--><li><!--[--><a><!--[--><!--[-->Why is System Design Important?<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Key Components of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Types of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->The System Design Process<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Principles of Good System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Common Challenges in System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Conclusion<!--]--><!--]--></a><!--]--></li><!--]--></ol><h2><a><!--[-->Why is System Design Important?<!--]--></a></h2><p><!--[-->System design is the backbone of software development. It ensures that the final product is:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Scalable<!--]--></strong>: Able to handle increased loads and data volume without compromising performance.<!--]--></li><li><!--[--><strong><!--[-->Maintainable<!--]--></strong>: Easy to modify and extend as requirements evolve.<!--]--></li><li><!--[--><strong><!--[-->Reliable<!--]--></strong>: Ensures uptime, fault tolerance, and resilience under failure conditions.<!--]--></li><li><!--[--><strong><!--[-->Efficient<!--]--></strong>: Optimized for resource usage such as memory, CPU, and storage.<!--]--></li><!--]--></ul><p><!--[-->A well-designed system saves development time, reduces technical debt, and enhances user satisfaction. It enables teams to build software that not only meets current needs but is also future-proof.<!--]--></p><h2><a><!--[-->Key Components of System Design<!--]--></a></h2><p><!--[-->System design involves multiple components working together. Here are the key elements:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Defines the overall structure of the system. Common architectures include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Monolithic Architecture<!--]--></strong>: A single codebase for the entire application.<!--]--></li><li><!--[--><strong><!--[-->Microservices Architecture<!--]--></strong>: Divides the system into small, independent services.<!--]--></li><li><!--[--><strong><!--[-->Serverless Architecture<!--]--></strong>: Leverages cloud services to run functions without managing servers.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Data Storage<!--]--></strong><!--]--></a></h3><p><!--[-->Data storage is critical for system design. You can choose between:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Relational Databases (RDBMS)<!--]--></strong>: Such as MySQL, PostgreSQL, or Oracle. These are ideal for structured data and complex queries.<!--]--></li><li><!--[--><strong><!--[-->NoSQL Databases<!--]--></strong>: Such as MongoDB, Cassandra, or Redis. These are optimized for unstructured or semi-structured data and scalability.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->APIs and Interfaces<!--]--></strong><!--]--></a></h3><p><!--[-->Defines how components communicate. Common API designs include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->REST<!--]--></strong>: Based on HTTP methods like GET, POST, PUT, and DELETE.<!--]--></li><li><!--[--><strong><!--[-->GraphQL<!--]--></strong>: Allows clients to request specific data.<!--]--></li><li><!--[--><strong><!--[-->gRPC<!--]--></strong>: Efficient for communication in distributed systems.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Networking<!--]--></strong><!--]--></a></h3><p><!--[-->Networking includes components like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Load Balancers<!--]--></strong>: Distribute traffic across servers to ensure availability.<!--]--></li><li><!--[--><strong><!--[-->CDNs<!--]--></strong>: Reduce latency by serving content closer to users.<!--]--></li><li><!--[--><strong><!--[-->Firewalls<!--]--></strong>: Secure the system from external threats.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Scalability and Caching<!--]--></strong><!--]--></a></h3><p><!--[-->To handle high traffic:<!--]--></p><ul><!--[--><li><!--[-->Use <strong><!--[-->horizontal scaling<!--]--></strong> (adding more servers) or <strong><!--[-->vertical scaling<!--]--></strong> (adding resources to existing servers).<!--]--></li><li><!--[-->Implement caching with tools like Redis or Memcached to reduce database load.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Monitoring and Logging<!--]--></strong><!--]--></a></h3><p><!--[-->Tools like Prometheus, Grafana, and ELK Stack help monitor system performance and identify issues.<!--]--></p><h2><a><!--[-->Types of System Design<!--]--></a></h2><p><!--[-->System design can be broadly classified into two categories:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->High-Level Design (HLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Focuses on the overall architecture and major components. It addresses:<!--]--></p><ul><!--[--><li><!--[-->The choice of architecture (e.g., monolithic or microservices).<!--]--></li><li><!--[-->Database selection and schema design.<!--]--></li><li><!--[-->Key APIs and external integrations.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Low-Level Design (LLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Deals with the detailed design of components, modules, and classes. It includes:<!--]--></p><ul><!--[--><li><!--[-->Data structures and algorithms.<!--]--></li><li><!--[-->Specific database queries.<!--]--></li><li><!--[-->Implementation details of APIs and interfaces.<!--]--></li><!--]--></ul><p><!--[-->Both HLD and LLD are essential for building a comprehensive system.<!--]--></p><h2><a><!--[-->The System Design Process<!--]--></a></h2><p><!--[-->Designing a system requires a structured approach. Here’s a step-by-step guide:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Understand Requirements<!--]--></strong><!--]--></a></h3><p><!--[-->Begin by gathering and analyzing the requirements:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Functional Requirements<!--]--></strong>: What should the system do? Example: “Allow users to upload photos.”<!--]--></li><li><!--[--><strong><!--[-->Non-Functional Requirements<!--]--></strong>: How should the system perform? Example: “Handle 1 million users with low latency.”<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Define Key Components<!--]--></strong><!--]--></a></h3><p><!--[-->Break the system into smaller, manageable components. For instance:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: The user interface.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: Business logic and APIs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Storage and retrieval of data.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Choose the Right Tools<!--]--></strong><!--]--></a></h3><p><!--[-->Select technologies and tools based on your needs:<!--]--></p><ul><!--[--><li><!--[-->For high scalability, consider NoSQL databases.<!--]--></li><li><!--[-->For rapid development, frameworks like Django or Spring Boot can be helpful.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Design the Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Create a high-level architecture diagram that shows:<!--]--></p><ul><!--[--><li><!--[-->Components and their interactions.<!--]--></li><li><!--[-->Data flow between components.<!--]--></li><li><!--[-->Third-party services (e.g., payment gateways, cloud services).<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Optimize for Scalability and Performance<!--]--></strong><!--]--></a></h3><p><!--[-->Incorporate techniques like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Sharding<!--]--></strong>: Splitting data across multiple databases.<!--]--></li><li><!--[--><strong><!--[-->Replication<!--]--></strong>: Creating copies of data for redundancy.<!--]--></li><li><!--[--><strong><!--[-->Asynchronous Processing<!--]--></strong>: Using message queues like Kafka or RabbitMQ.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Plan for Monitoring and Maintenance<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can be monitored and debugged with tools like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->New Relic<!--]--></strong> for application performance monitoring.<!--]--></li><li><!--[--><strong><!--[-->Splunk<!--]--></strong> for log management.<!--]--></li><!--]--></ul><h3><a><!--[-->7. <strong><!--[-->Iterate and Refine<!--]--></strong><!--]--></a></h3><p><!--[-->System design is rarely perfect in the first iteration. Continuously test, gather feedback, and improve the design.<!--]--></p><h2><a><!--[-->Principles of Good System Design<!--]--></a></h2><p><!--[-->Here are some key principles to follow:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><p><!--[-->Design the system to handle growth in users, data, and traffic.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Reliability<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can recover from failures with techniques like backups, replication, and failover mechanisms.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Maintainability<!--]--></strong><!--]--></a></h3><p><!--[-->Write clean, modular, and well-documented code to make the system easy to maintain.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Performance Optimization<!--]--></strong><!--]--></a></h3><p><!--[-->Optimize the system for speed and efficiency, minimizing latency and resource usage.<!--]--></p><h3><a><!--[-->5. <strong><!--[-->Security<!--]--></strong><!--]--></a></h3><p><!--[-->Protect the system from vulnerabilities with encryption, authentication, and firewalls.<!--]--></p><h2><a><!--[-->Common Challenges in System Design<!--]--></a></h2><p><!--[-->Designing systems is not without challenges. Some common issues include:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Handling High Traffic<!--]--></strong><!--]--></a></h3><p><!--[-->Scaling systems to handle millions of users requires efficient load balancing and caching strategies.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Data Consistency<!--]--></strong><!--]--></a></h3><p><!--[-->Maintaining consistency in distributed systems can be complex. Techniques like the <strong><!--[-->CAP Theorem<!--]--></strong> help balance consistency, availability, and partition tolerance.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Latency<!--]--></strong><!--]--></a></h3><p><!--[-->Reducing latency involves optimizing database queries, using CDNs, and minimizing network hops.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Cost Management<!--]--></strong><!--]--></a></h3><p><!--[-->Building and running a large-scale system can be expensive. Cost-efficient solutions like serverless architectures can help.<!--]--></p><h2><a><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--></a></h2><p><!--[-->Let’s apply the system design principles to build a URL shortener like <strong><!--[-->Bitly<!--]--></strong>.<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Requirements<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Functional: Shorten URLs, redirect to original URLs, track usage.<!--]--></li><li><!--[-->Non-Functional: Handle 1 billion requests per month, low latency, high availability.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->High-Level Design<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: A web interface for users to enter URLs.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: API to create and retrieve short URLs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Store mappings of short and original URLs.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Database Design<!--]--></strong><!--]--></a></h3><p><!--[-->Use a key-value store like DynamoDB or Redis:<!--]--></p><ul><!--[--><li><!--[-->Key: Short URL.<!--]--></li><li><!--[-->Value: Original URL.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Use a <strong><!--[-->load balancer<!--]--></strong> to distribute traffic.<!--]--></li><li><!--[-->Implement caching to reduce database load.<!--]--></li><li><!--[-->Use <strong><!--[-->partitioning<!--]--></strong> for storing data.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Monitoring<!--]--></strong><!--]--></a></h3><p><!--[-->Set up alerts for high latency or failure rates using tools like CloudWatch.<!--]--></p><p><!--[-->By following this process, you can design a system that meets both functional and non-functional requirements.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->System design is a cornerstone of software engineering. It transforms abstract requirements into a concrete, scalable, and maintainable structure. By understanding the principles, process, and challenges of system design, you can build software that performs efficiently, scales gracefully, and satisfies user needs.<!--]--></p><p><!--[-->Whether you’re preparing for interviews, building new systems, or improving existing ones, mastering system design is an invaluable skill. Start by practicing with common problems, such as designing a chat application or a social media feed, and iteratively refine your approach.<!--]--></p><p><!--[-->Happy designing!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is System Design]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-system-design-2-1/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-system-design-2-1/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Systems Design is the process of defining the architecture, components, modules, interfaces, and data for a system to satisfy specified requirements. It involves translating user requirements into a detailed blueprint that guides the implementation phase. The goal is to create a well-organized and efficient structure that meets the intended purpose while considering factors like scalability, maintainability, and performance.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->What is System Design?<!--]--></a></h2><p><!--[-->System Design is a critical aspect of software engineering that involves defining the architecture, components, modules, interfaces, and data flow of a system to meet specific requirements. It translates user requirements into a blueprint that guides developers and ensures scalability, maintainability, and performance. Whether you’re designing a simple application or a large-scale distributed system, system design lays the foundation for creating robust, efficient, and reliable software.<!--]--></p><p><!--[-->In this blog post, we will dive into the core concepts of system design, its importance, the process, and best practices to help you design systems that meet the intended goals effectively.<!--]--></p><h2><a><!--[-->Table of Contents<!--]--></a></h2><ol><!--[--><li><!--[--><a><!--[--><!--[-->Why is System Design Important?<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Key Components of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Types of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->The System Design Process<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Principles of Good System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Common Challenges in System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Conclusion<!--]--><!--]--></a><!--]--></li><!--]--></ol><h2><a><!--[-->Why is System Design Important?<!--]--></a></h2><p><!--[-->System design is the backbone of software development. It ensures that the final product is:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Scalable<!--]--></strong>: Able to handle increased loads and data volume without compromising performance.<!--]--></li><li><!--[--><strong><!--[-->Maintainable<!--]--></strong>: Easy to modify and extend as requirements evolve.<!--]--></li><li><!--[--><strong><!--[-->Reliable<!--]--></strong>: Ensures uptime, fault tolerance, and resilience under failure conditions.<!--]--></li><li><!--[--><strong><!--[-->Efficient<!--]--></strong>: Optimized for resource usage such as memory, CPU, and storage.<!--]--></li><!--]--></ul><p><!--[-->A well-designed system saves development time, reduces technical debt, and enhances user satisfaction. It enables teams to build software that not only meets current needs but is also future-proof.<!--]--></p><h2><a><!--[-->Key Components of System Design<!--]--></a></h2><p><!--[-->System design involves multiple components working together. Here are the key elements:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Defines the overall structure of the system. Common architectures include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Monolithic Architecture<!--]--></strong>: A single codebase for the entire application.<!--]--></li><li><!--[--><strong><!--[-->Microservices Architecture<!--]--></strong>: Divides the system into small, independent services.<!--]--></li><li><!--[--><strong><!--[-->Serverless Architecture<!--]--></strong>: Leverages cloud services to run functions without managing servers.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Data Storage<!--]--></strong><!--]--></a></h3><p><!--[-->Data storage is critical for system design. You can choose between:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Relational Databases (RDBMS)<!--]--></strong>: Such as MySQL, PostgreSQL, or Oracle. These are ideal for structured data and complex queries.<!--]--></li><li><!--[--><strong><!--[-->NoSQL Databases<!--]--></strong>: Such as MongoDB, Cassandra, or Redis. These are optimized for unstructured or semi-structured data and scalability.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->APIs and Interfaces<!--]--></strong><!--]--></a></h3><p><!--[-->Defines how components communicate. Common API designs include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->REST<!--]--></strong>: Based on HTTP methods like GET, POST, PUT, and DELETE.<!--]--></li><li><!--[--><strong><!--[-->GraphQL<!--]--></strong>: Allows clients to request specific data.<!--]--></li><li><!--[--><strong><!--[-->gRPC<!--]--></strong>: Efficient for communication in distributed systems.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Networking<!--]--></strong><!--]--></a></h3><p><!--[-->Networking includes components like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Load Balancers<!--]--></strong>: Distribute traffic across servers to ensure availability.<!--]--></li><li><!--[--><strong><!--[-->CDNs<!--]--></strong>: Reduce latency by serving content closer to users.<!--]--></li><li><!--[--><strong><!--[-->Firewalls<!--]--></strong>: Secure the system from external threats.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Scalability and Caching<!--]--></strong><!--]--></a></h3><p><!--[-->To handle high traffic:<!--]--></p><ul><!--[--><li><!--[-->Use <strong><!--[-->horizontal scaling<!--]--></strong> (adding more servers) or <strong><!--[-->vertical scaling<!--]--></strong> (adding resources to existing servers).<!--]--></li><li><!--[-->Implement caching with tools like Redis or Memcached to reduce database load.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Monitoring and Logging<!--]--></strong><!--]--></a></h3><p><!--[-->Tools like Prometheus, Grafana, and ELK Stack help monitor system performance and identify issues.<!--]--></p><h2><a><!--[-->Types of System Design<!--]--></a></h2><p><!--[-->System design can be broadly classified into two categories:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->High-Level Design (HLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Focuses on the overall architecture and major components. It addresses:<!--]--></p><ul><!--[--><li><!--[-->The choice of architecture (e.g., monolithic or microservices).<!--]--></li><li><!--[-->Database selection and schema design.<!--]--></li><li><!--[-->Key APIs and external integrations.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Low-Level Design (LLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Deals with the detailed design of components, modules, and classes. It includes:<!--]--></p><ul><!--[--><li><!--[-->Data structures and algorithms.<!--]--></li><li><!--[-->Specific database queries.<!--]--></li><li><!--[-->Implementation details of APIs and interfaces.<!--]--></li><!--]--></ul><p><!--[-->Both HLD and LLD are essential for building a comprehensive system.<!--]--></p><h2><a><!--[-->The System Design Process<!--]--></a></h2><p><!--[-->Designing a system requires a structured approach. Here’s a step-by-step guide:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Understand Requirements<!--]--></strong><!--]--></a></h3><p><!--[-->Begin by gathering and analyzing the requirements:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Functional Requirements<!--]--></strong>: What should the system do? Example: “Allow users to upload photos.”<!--]--></li><li><!--[--><strong><!--[-->Non-Functional Requirements<!--]--></strong>: How should the system perform? Example: “Handle 1 million users with low latency.”<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Define Key Components<!--]--></strong><!--]--></a></h3><p><!--[-->Break the system into smaller, manageable components. For instance:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: The user interface.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: Business logic and APIs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Storage and retrieval of data.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Choose the Right Tools<!--]--></strong><!--]--></a></h3><p><!--[-->Select technologies and tools based on your needs:<!--]--></p><ul><!--[--><li><!--[-->For high scalability, consider NoSQL databases.<!--]--></li><li><!--[-->For rapid development, frameworks like Django or Spring Boot can be helpful.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Design the Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Create a high-level architecture diagram that shows:<!--]--></p><ul><!--[--><li><!--[-->Components and their interactions.<!--]--></li><li><!--[-->Data flow between components.<!--]--></li><li><!--[-->Third-party services (e.g., payment gateways, cloud services).<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Optimize for Scalability and Performance<!--]--></strong><!--]--></a></h3><p><!--[-->Incorporate techniques like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Sharding<!--]--></strong>: Splitting data across multiple databases.<!--]--></li><li><!--[--><strong><!--[-->Replication<!--]--></strong>: Creating copies of data for redundancy.<!--]--></li><li><!--[--><strong><!--[-->Asynchronous Processing<!--]--></strong>: Using message queues like Kafka or RabbitMQ.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Plan for Monitoring and Maintenance<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can be monitored and debugged with tools like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->New Relic<!--]--></strong> for application performance monitoring.<!--]--></li><li><!--[--><strong><!--[-->Splunk<!--]--></strong> for log management.<!--]--></li><!--]--></ul><h3><a><!--[-->7. <strong><!--[-->Iterate and Refine<!--]--></strong><!--]--></a></h3><p><!--[-->System design is rarely perfect in the first iteration. Continuously test, gather feedback, and improve the design.<!--]--></p><h2><a><!--[-->Principles of Good System Design<!--]--></a></h2><p><!--[-->Here are some key principles to follow:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><p><!--[-->Design the system to handle growth in users, data, and traffic.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Reliability<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can recover from failures with techniques like backups, replication, and failover mechanisms.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Maintainability<!--]--></strong><!--]--></a></h3><p><!--[-->Write clean, modular, and well-documented code to make the system easy to maintain.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Performance Optimization<!--]--></strong><!--]--></a></h3><p><!--[-->Optimize the system for speed and efficiency, minimizing latency and resource usage.<!--]--></p><h3><a><!--[-->5. <strong><!--[-->Security<!--]--></strong><!--]--></a></h3><p><!--[-->Protect the system from vulnerabilities with encryption, authentication, and firewalls.<!--]--></p><h2><a><!--[-->Common Challenges in System Design<!--]--></a></h2><p><!--[-->Designing systems is not without challenges. Some common issues include:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Handling High Traffic<!--]--></strong><!--]--></a></h3><p><!--[-->Scaling systems to handle millions of users requires efficient load balancing and caching strategies.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Data Consistency<!--]--></strong><!--]--></a></h3><p><!--[-->Maintaining consistency in distributed systems can be complex. Techniques like the <strong><!--[-->CAP Theorem<!--]--></strong> help balance consistency, availability, and partition tolerance.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Latency<!--]--></strong><!--]--></a></h3><p><!--[-->Reducing latency involves optimizing database queries, using CDNs, and minimizing network hops.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Cost Management<!--]--></strong><!--]--></a></h3><p><!--[-->Building and running a large-scale system can be expensive. Cost-efficient solutions like serverless architectures can help.<!--]--></p><h2><a><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--></a></h2><p><!--[-->Let’s apply the system design principles to build a URL shortener like <strong><!--[-->Bitly<!--]--></strong>.<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Requirements<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Functional: Shorten URLs, redirect to original URLs, track usage.<!--]--></li><li><!--[-->Non-Functional: Handle 1 billion requests per month, low latency, high availability.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->High-Level Design<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: A web interface for users to enter URLs.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: API to create and retrieve short URLs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Store mappings of short and original URLs.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Database Design<!--]--></strong><!--]--></a></h3><p><!--[-->Use a key-value store like DynamoDB or Redis:<!--]--></p><ul><!--[--><li><!--[-->Key: Short URL.<!--]--></li><li><!--[-->Value: Original URL.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Use a <strong><!--[-->load balancer<!--]--></strong> to distribute traffic.<!--]--></li><li><!--[-->Implement caching to reduce database load.<!--]--></li><li><!--[-->Use <strong><!--[-->partitioning<!--]--></strong> for storing data.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Monitoring<!--]--></strong><!--]--></a></h3><p><!--[-->Set up alerts for high latency or failure rates using tools like CloudWatch.<!--]--></p><p><!--[-->By following this process, you can design a system that meets both functional and non-functional requirements.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->System design is a cornerstone of software engineering. It transforms abstract requirements into a concrete, scalable, and maintainable structure. By understanding the principles, process, and challenges of system design, you can build software that performs efficiently, scales gracefully, and satisfies user needs.<!--]--></p><p><!--[-->Whether you’re preparing for interviews, building new systems, or improving existing ones, mastering system design is an invaluable skill. Start by practicing with common problems, such as designing a chat application or a social media feed, and iteratively refine your approach.<!--]--></p><p><!--[-->Happy designing!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is System Design]]></title>
            <link>https://rahulaher.netlify.app/articles/beginner-system-design-2-2/</link>
            <guid>https://rahulaher.netlify.app/articles/beginner-system-design-2-2/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Systems Design is the process of defining the architecture, components, modules, interfaces, and data for a system to satisfy specified requirements. It involves translating user requirements into a detailed blueprint that guides the implementation phase. The goal is to create a well-organized and efficient structure that meets the intended purpose while considering factors like scalability, maintainability, and performance.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->What is System Design?<!--]--></a></h2><p><!--[-->System Design is a critical aspect of software engineering that involves defining the architecture, components, modules, interfaces, and data flow of a system to meet specific requirements. It translates user requirements into a blueprint that guides developers and ensures scalability, maintainability, and performance. Whether you’re designing a simple application or a large-scale distributed system, system design lays the foundation for creating robust, efficient, and reliable software.<!--]--></p><p><!--[-->In this blog post, we will dive into the core concepts of system design, its importance, the process, and best practices to help you design systems that meet the intended goals effectively.<!--]--></p><h2><a><!--[-->Table of Contents<!--]--></a></h2><ol><!--[--><li><!--[--><a><!--[--><!--[-->Why is System Design Important?<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Key Components of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Types of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->The System Design Process<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Principles of Good System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Common Challenges in System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Conclusion<!--]--><!--]--></a><!--]--></li><!--]--></ol><h2><a><!--[-->Why is System Design Important?<!--]--></a></h2><p><!--[-->System design is the backbone of software development. It ensures that the final product is:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Scalable<!--]--></strong>: Able to handle increased loads and data volume without compromising performance.<!--]--></li><li><!--[--><strong><!--[-->Maintainable<!--]--></strong>: Easy to modify and extend as requirements evolve.<!--]--></li><li><!--[--><strong><!--[-->Reliable<!--]--></strong>: Ensures uptime, fault tolerance, and resilience under failure conditions.<!--]--></li><li><!--[--><strong><!--[-->Efficient<!--]--></strong>: Optimized for resource usage such as memory, CPU, and storage.<!--]--></li><!--]--></ul><p><!--[-->A well-designed system saves development time, reduces technical debt, and enhances user satisfaction. It enables teams to build software that not only meets current needs but is also future-proof.<!--]--></p><h2><a><!--[-->Key Components of System Design<!--]--></a></h2><p><!--[-->System design involves multiple components working together. Here are the key elements:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Defines the overall structure of the system. Common architectures include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Monolithic Architecture<!--]--></strong>: A single codebase for the entire application.<!--]--></li><li><!--[--><strong><!--[-->Microservices Architecture<!--]--></strong>: Divides the system into small, independent services.<!--]--></li><li><!--[--><strong><!--[-->Serverless Architecture<!--]--></strong>: Leverages cloud services to run functions without managing servers.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Data Storage<!--]--></strong><!--]--></a></h3><p><!--[-->Data storage is critical for system design. You can choose between:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Relational Databases (RDBMS)<!--]--></strong>: Such as MySQL, PostgreSQL, or Oracle. These are ideal for structured data and complex queries.<!--]--></li><li><!--[--><strong><!--[-->NoSQL Databases<!--]--></strong>: Such as MongoDB, Cassandra, or Redis. These are optimized for unstructured or semi-structured data and scalability.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->APIs and Interfaces<!--]--></strong><!--]--></a></h3><p><!--[-->Defines how components communicate. Common API designs include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->REST<!--]--></strong>: Based on HTTP methods like GET, POST, PUT, and DELETE.<!--]--></li><li><!--[--><strong><!--[-->GraphQL<!--]--></strong>: Allows clients to request specific data.<!--]--></li><li><!--[--><strong><!--[-->gRPC<!--]--></strong>: Efficient for communication in distributed systems.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Networking<!--]--></strong><!--]--></a></h3><p><!--[-->Networking includes components like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Load Balancers<!--]--></strong>: Distribute traffic across servers to ensure availability.<!--]--></li><li><!--[--><strong><!--[-->CDNs<!--]--></strong>: Reduce latency by serving content closer to users.<!--]--></li><li><!--[--><strong><!--[-->Firewalls<!--]--></strong>: Secure the system from external threats.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Scalability and Caching<!--]--></strong><!--]--></a></h3><p><!--[-->To handle high traffic:<!--]--></p><ul><!--[--><li><!--[-->Use <strong><!--[-->horizontal scaling<!--]--></strong> (adding more servers) or <strong><!--[-->vertical scaling<!--]--></strong> (adding resources to existing servers).<!--]--></li><li><!--[-->Implement caching with tools like Redis or Memcached to reduce database load.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Monitoring and Logging<!--]--></strong><!--]--></a></h3><p><!--[-->Tools like Prometheus, Grafana, and ELK Stack help monitor system performance and identify issues.<!--]--></p><h2><a><!--[-->Types of System Design<!--]--></a></h2><p><!--[-->System design can be broadly classified into two categories:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->High-Level Design (HLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Focuses on the overall architecture and major components. It addresses:<!--]--></p><ul><!--[--><li><!--[-->The choice of architecture (e.g., monolithic or microservices).<!--]--></li><li><!--[-->Database selection and schema design.<!--]--></li><li><!--[-->Key APIs and external integrations.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Low-Level Design (LLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Deals with the detailed design of components, modules, and classes. It includes:<!--]--></p><ul><!--[--><li><!--[-->Data structures and algorithms.<!--]--></li><li><!--[-->Specific database queries.<!--]--></li><li><!--[-->Implementation details of APIs and interfaces.<!--]--></li><!--]--></ul><p><!--[-->Both HLD and LLD are essential for building a comprehensive system.<!--]--></p><h2><a><!--[-->The System Design Process<!--]--></a></h2><p><!--[-->Designing a system requires a structured approach. Here’s a step-by-step guide:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Understand Requirements<!--]--></strong><!--]--></a></h3><p><!--[-->Begin by gathering and analyzing the requirements:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Functional Requirements<!--]--></strong>: What should the system do? Example: “Allow users to upload photos.”<!--]--></li><li><!--[--><strong><!--[-->Non-Functional Requirements<!--]--></strong>: How should the system perform? Example: “Handle 1 million users with low latency.”<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Define Key Components<!--]--></strong><!--]--></a></h3><p><!--[-->Break the system into smaller, manageable components. For instance:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: The user interface.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: Business logic and APIs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Storage and retrieval of data.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Choose the Right Tools<!--]--></strong><!--]--></a></h3><p><!--[-->Select technologies and tools based on your needs:<!--]--></p><ul><!--[--><li><!--[-->For high scalability, consider NoSQL databases.<!--]--></li><li><!--[-->For rapid development, frameworks like Django or Spring Boot can be helpful.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Design the Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Create a high-level architecture diagram that shows:<!--]--></p><ul><!--[--><li><!--[-->Components and their interactions.<!--]--></li><li><!--[-->Data flow between components.<!--]--></li><li><!--[-->Third-party services (e.g., payment gateways, cloud services).<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Optimize for Scalability and Performance<!--]--></strong><!--]--></a></h3><p><!--[-->Incorporate techniques like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Sharding<!--]--></strong>: Splitting data across multiple databases.<!--]--></li><li><!--[--><strong><!--[-->Replication<!--]--></strong>: Creating copies of data for redundancy.<!--]--></li><li><!--[--><strong><!--[-->Asynchronous Processing<!--]--></strong>: Using message queues like Kafka or RabbitMQ.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Plan for Monitoring and Maintenance<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can be monitored and debugged with tools like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->New Relic<!--]--></strong> for application performance monitoring.<!--]--></li><li><!--[--><strong><!--[-->Splunk<!--]--></strong> for log management.<!--]--></li><!--]--></ul><h3><a><!--[-->7. <strong><!--[-->Iterate and Refine<!--]--></strong><!--]--></a></h3><p><!--[-->System design is rarely perfect in the first iteration. Continuously test, gather feedback, and improve the design.<!--]--></p><h2><a><!--[-->Principles of Good System Design<!--]--></a></h2><p><!--[-->Here are some key principles to follow:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><p><!--[-->Design the system to handle growth in users, data, and traffic.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Reliability<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can recover from failures with techniques like backups, replication, and failover mechanisms.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Maintainability<!--]--></strong><!--]--></a></h3><p><!--[-->Write clean, modular, and well-documented code to make the system easy to maintain.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Performance Optimization<!--]--></strong><!--]--></a></h3><p><!--[-->Optimize the system for speed and efficiency, minimizing latency and resource usage.<!--]--></p><h3><a><!--[-->5. <strong><!--[-->Security<!--]--></strong><!--]--></a></h3><p><!--[-->Protect the system from vulnerabilities with encryption, authentication, and firewalls.<!--]--></p><h2><a><!--[-->Common Challenges in System Design<!--]--></a></h2><p><!--[-->Designing systems is not without challenges. Some common issues include:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Handling High Traffic<!--]--></strong><!--]--></a></h3><p><!--[-->Scaling systems to handle millions of users requires efficient load balancing and caching strategies.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Data Consistency<!--]--></strong><!--]--></a></h3><p><!--[-->Maintaining consistency in distributed systems can be complex. Techniques like the <strong><!--[-->CAP Theorem<!--]--></strong> help balance consistency, availability, and partition tolerance.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Latency<!--]--></strong><!--]--></a></h3><p><!--[-->Reducing latency involves optimizing database queries, using CDNs, and minimizing network hops.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Cost Management<!--]--></strong><!--]--></a></h3><p><!--[-->Building and running a large-scale system can be expensive. Cost-efficient solutions like serverless architectures can help.<!--]--></p><h2><a><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--></a></h2><p><!--[-->Let’s apply the system design principles to build a URL shortener like <strong><!--[-->Bitly<!--]--></strong>.<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Requirements<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Functional: Shorten URLs, redirect to original URLs, track usage.<!--]--></li><li><!--[-->Non-Functional: Handle 1 billion requests per month, low latency, high availability.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->High-Level Design<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: A web interface for users to enter URLs.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: API to create and retrieve short URLs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Store mappings of short and original URLs.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Database Design<!--]--></strong><!--]--></a></h3><p><!--[-->Use a key-value store like DynamoDB or Redis:<!--]--></p><ul><!--[--><li><!--[-->Key: Short URL.<!--]--></li><li><!--[-->Value: Original URL.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Use a <strong><!--[-->load balancer<!--]--></strong> to distribute traffic.<!--]--></li><li><!--[-->Implement caching to reduce database load.<!--]--></li><li><!--[-->Use <strong><!--[-->partitioning<!--]--></strong> for storing data.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Monitoring<!--]--></strong><!--]--></a></h3><p><!--[-->Set up alerts for high latency or failure rates using tools like CloudWatch.<!--]--></p><p><!--[-->By following this process, you can design a system that meets both functional and non-functional requirements.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->System design is a cornerstone of software engineering. It transforms abstract requirements into a concrete, scalable, and maintainable structure. By understanding the principles, process, and challenges of system design, you can build software that performs efficiently, scales gracefully, and satisfies user needs.<!--]--></p><p><!--[-->Whether you’re preparing for interviews, building new systems, or improving existing ones, mastering system design is an invaluable skill. Start by practicing with common problems, such as designing a chat application or a social media feed, and iteratively refine your approach.<!--]--></p><p><!--[-->Happy designing!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A quick overview of gRPC]]></title>
            <link>https://rahulaher.netlify.app/articles/frontend-system-design-1-5/</link>
            <guid>https://rahulaher.netlify.app/articles/frontend-system-design-1-5/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[It's kind of like a sibling to REST API or GraphQL, enabling communication with the server in a unique way. RPC stands for Remote Procedure Call, and the 'g' in gRPC stands for Google, as it was created by Google.]]></description>
            <content:encoded><![CDATA[<p><!--[--><img><!--]--></p><p><!--[-->It's kind of like a sibling to REST API or GraphQL, enabling communication with the server in a unique way. RPC stands for <strong><!--[-->Remote Procedure Call<!--]--></strong>, and the "g" in gRPC stands for <strong><!--[-->Google<!--]--></strong>, as it was created by Google.<!--]--></p><p><!--[-->Let's understand it now:<!--]--></p><p><!--[-->Suppose there are two machines—one is the client (any machine) and the other is the server (another machine). In the end, when we call an API, it executes a function on the server. With RPC, instead of making a traditional API request, the client can directly call a function on the server. Below is the architecture diagram, and we will discuss each terminology in detail.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->In REST APIs, data is transferred in <strong><!--[-->JSON<!--]--></strong> format, but in gRPC, it happens using <strong><!--[-->Protocol Buffers (Protobuf)<!--]--></strong>, which is an <strong><!--[-->IDL (Interface Definition Language)<!--]--></strong>. To use gRPC, we need <strong><!--[-->HTTP/2<!--]--></strong>.<!--]--></p><p><!--[-->Just like REST APIs send <strong><!--[-->serialized data<!--]--></strong> over the network, gRPC also transmits <strong><!--[-->protocol-serialized data<!--]--></strong>. However, gRPC maintains a <strong><!--[-->single long-lived connection<!--]--></strong> and supports <strong><!--[-->bidirectional streaming<!--]--></strong>.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[-->So, referring to the screenshot above, once an <strong><!--[-->HTTP/2 request<!--]--></strong> is made using gRPC, <strong><!--[-->bidirectional data flow<!--]--></strong> happens. Each time we call a <strong><!--[-->server function<!--]--></strong>, a <strong><!--[-->bidirectional data flow<!--]--></strong> occurs, and the connection ends after the response.<!--]--></p><p><!--[-->We already discussed that gRPC uses <strong><!--[-->Protocol Buffers (Protobuf)<!--]--></strong> instead of <strong><!--[-->JSON<!--]--></strong>. Now, let’s understand <strong><!--[-->Protocol Buffers<!--]--></strong> and how <strong><!--[-->encoding and decoding<!--]--></strong> take place.<!--]--></p><p><!--[--><img><!--]--></p><p><!--[--><strong><!--[-->Protocol Buffer (ProtoBuf)<!--]--></strong> is developed by Google.<!--]--></p><ul><!--[--><li><!--[-->ProtoBuf is an <strong><!--[-->IDL (Interface Definition Language)<!--]--></strong> and also provides <strong><!--[-->serialization and deserialization<!--]--></strong>.<!--]--></li><li><!--[-->It supports <strong><!--[-->binary data transfer<!--]--></strong>, unlike REST APIs, where we use <code><!--[-->.json()<!--]--></code>, in gRPC, we use <code><!--[-->.proto<!--]--></code> (also called <strong><!--[-->proto3<!--]--></strong>).<!--]--></li><li><!--[-->The <strong><!--[-->.proto file<!--]--></strong> defines the request and response structure. This file enables <strong><!--[-->code conversion<!--]--></strong>, making it compatible with multiple languages.<!--]--></li><li><!--[-->The response can be <strong><!--[-->deserialized in any language<!--]--></strong>, which makes gRPC highly flexible.<!--]--></li><!--]--></ul><p><!--[-->Honestly, this concept is a bit confusing, but we’ll explore it further to understand it better.<!--]--></p><h3><a><!--[--><strong><!--[-->Benefits of gRPC<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Requires <strong><!--[-->less CPU resources<!--]--></strong>.<!--]--></li><li><!--[--><strong><!--[-->Faster<!--]--></strong> on mobile devices due to efficient serialization.<!--]--></li><!--]--></ul><p><!--[-->gRPC is <strong><!--[-->mainly used for server-to-server communication<!--]--></strong>, but we will also see how to use it in a <strong><!--[-->browser<!--]--></strong>. Since a browser acts as a <strong><!--[-->client machine<!--]--></strong>, we need a <strong><!--[-->gRPC client<!--]--></strong> that interacts with a <strong><!--[-->gRPC server<!--]--></strong> to call functions.<!--]--></p><p><!--[--><img><!--]--></p><h3><a><!--[--><strong><!--[-->Let's Code<!--]--></strong><!--]--></a></h3><p><!--[-->Here is the repo link: <a><!--[--><!--[-->gRPC-first-setup<!--]--><!--]--></a><!--]--></p><p><!--[-->You can either <strong><!--[-->clone the repo<!--]--></strong> or <strong><!--[-->follow the documentation<!--]--></strong> to set up the client and server. If you haven’t used gRPC before, it might feel a bit <strong><!--[-->complex<!--]--></strong> at first, but at least <strong><!--[-->try it once<!--]--></strong>, as I did. <strong><!--[-->Something is better than nothing<!--]--></strong> 🙂<!--]--></p><h3><a><!--[--><strong><!--[-->Comparison with REST API<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->In <strong><!--[-->REST API<!--]--></strong>, we use <strong><!--[-->HTTP/HTTPS<!--]--></strong>, but in <strong><!--[-->gRPC<!--]--></strong>, we use <strong><!--[-->HTTP/2<!--]--></strong> as the default transport protocol.<!--]--></li><li><!--[-->REST APIs use <strong><!--[-->JSON<!--]--></strong>, whereas gRPC uses <strong><!--[-->Protocol Buffers<!--]--></strong>.<!--]--></li><li><!--[--><strong><!--[-->No standard language<!--]--></strong> is required for REST APIs, but gRPC enforces <strong><!--[-->ProtoBuf IDL<!--]--></strong> as a standard.<!--]--></li><li><!--[-->REST APIs transfer data in <strong><!--[-->JSON/XML/Text<!--]--></strong>, while gRPC uses <strong><!--[-->binary serialization<!--]--></strong> for efficiency.<!--]--></li><li><!--[--><strong><!--[-->JSON is more flexible<!--]--></strong>, but <strong><!--[-->ProtoBuf ensures a strict contract<!--]--></strong> between the client and server.<!--]--></li><li><!--[-->REST APIs often rely on <strong><!--[-->third-party code generation tools<!--]--></strong>, whereas gRPC provides <strong><!--[-->automatic code generation<!--]--></strong>.<!--]--></li><!--]--></ul><h3><a><!--[--><strong><!--[-->Advantages and Disadvantages<!--]--></strong><!--]--></a></h3><h3><a><!--[--><strong><!--[-->Advantages<!--]--></strong><!--]--></a></h3><p><!--[-->✅ <strong><!--[-->10x faster<!--]--></strong> compared to REST API calls<!--]--></p><p><!--[-->✅ <strong><!--[-->Better security<!--]--></strong> since it uses <strong><!--[-->HTTP/2<!--]--></strong><!--]--></p><p><!--[-->✅ <strong><!--[-->Bidirectional streaming<!--]--></strong> support<!--]--></p><p><!--[-->✅ <strong><!--[-->Automatic code generation<!--]--></strong><!--]--></p><p><!--[-->✅ <strong><!--[-->Language-agnostic<!--]--></strong> (Define proto once and use it in any language)<!--]--></p><p><!--[-->✅ <strong><!--[-->Service discovery support<!--]--></strong><!--]--></p><p><!--[-->✅ <strong><!--[-->More secure communication<!--]--></strong><!--]--></p><h3><a><!--[--><strong><!--[-->Disadvantages<!--]--></strong><!--]--></a></h3><p><!--[-->❌ <strong><!--[-->Not human-readable<!--]--></strong> (Uses binary data instead of JSON)<!--]--></p><p><!--[-->❌ <strong><!--[-->Limited browser support<!--]--></strong><!--]--></p><p><!--[-->❌ <strong><!--[-->No edge caching<!--]--></strong> (Due to the use of POST requests)<!--]--></p><p><!--[-->❌ <strong><!--[-->Steeper learning curve<!--]--></strong> compared to REST APIs<!--]--></p><p><!--[-->Hey your feedback is required for me , please give  <a><!--[--><!--[-->this repo<!--]--><!--]--></a> a star 🌟 if you liked the blog
if you want to contribute in it please feel free to fork , You can see github link on top right corner of top bar or  <a><!--[--><!--[-->click here<!--]--><!--]--></a><!--]--></p><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><p><!--[-->I am waiting for your feedback, See you in next episode,<!--]--></p><p><!--[-->Thanks 👋🏻<!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is System Design?]]></title>
            <link>https://rahulaher.netlify.app/articles/what-is-system-design/</link>
            <guid>https://rahulaher.netlify.app/articles/what-is-system-design/</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Systems Design is a critical discipline in software engineering, focused on creating a detailed blueprint for a system’s architecture, components, modules, interfaces, and data. It is a structured approach to designing complex systems that meet specific requirements and perform efficiently under varying conditions. The primary goal of systems design is to translate user needs, business goals, and technical constraints into a well-organized and effective system structure. Systems design bridges the gap between these requirements and the actual implementation, ensuring the system is both usable and efficient.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->What is System Design?<!--]--></a></h2><p><!--[-->System Design is a critical aspect of software engineering that involves defining the architecture, components, modules, interfaces, and data flow of a system to meet specific requirements. It translates user requirements into a blueprint that guides developers and ensures scalability, maintainability, and performance. Whether you’re designing a simple application or a large-scale distributed system, system design lays the foundation for creating robust, efficient, and reliable software.<!--]--></p><p><!--[-->In this blog post, we will dive into the core concepts of system design, its importance, the process, and best practices to help you design systems that meet the intended goals effectively.<!--]--></p><h2><a><!--[-->Table of Contents<!--]--></a></h2><ol><!--[--><li><!--[--><a><!--[--><!--[-->Why is System Design Important?<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Key Components of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Types of System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->The System Design Process<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Principles of Good System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Common Challenges in System Design<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Conclusion<!--]--><!--]--></a><!--]--></li><!--]--></ol><h2><a><!--[-->Why is System Design Important?<!--]--></a></h2><p><!--[-->System design is the backbone of software development. It ensures that the final product is:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Scalable<!--]--></strong>: Able to handle increased loads and data volume without compromising performance.<!--]--></li><li><!--[--><strong><!--[-->Maintainable<!--]--></strong>: Easy to modify and extend as requirements evolve.<!--]--></li><li><!--[--><strong><!--[-->Reliable<!--]--></strong>: Ensures uptime, fault tolerance, and resilience under failure conditions.<!--]--></li><li><!--[--><strong><!--[-->Efficient<!--]--></strong>: Optimized for resource usage such as memory, CPU, and storage.<!--]--></li><!--]--></ul><p><!--[-->A well-designed system saves development time, reduces technical debt, and enhances user satisfaction. It enables teams to build software that not only meets current needs but is also future-proof.<!--]--></p><h2><a><!--[-->Key Components of System Design<!--]--></a></h2><p><!--[-->System design involves multiple components working together. Here are the key elements:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Defines the overall structure of the system. Common architectures include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Monolithic Architecture<!--]--></strong>: A single codebase for the entire application.<!--]--></li><li><!--[--><strong><!--[-->Microservices Architecture<!--]--></strong>: Divides the system into small, independent services.<!--]--></li><li><!--[--><strong><!--[-->Serverless Architecture<!--]--></strong>: Leverages cloud services to run functions without managing servers.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Data Storage<!--]--></strong><!--]--></a></h3><p><!--[-->Data storage is critical for system design. You can choose between:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Relational Databases (RDBMS)<!--]--></strong>: Such as MySQL, PostgreSQL, or Oracle. These are ideal for structured data and complex queries.<!--]--></li><li><!--[--><strong><!--[-->NoSQL Databases<!--]--></strong>: Such as MongoDB, Cassandra, or Redis. These are optimized for unstructured or semi-structured data and scalability.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->APIs and Interfaces<!--]--></strong><!--]--></a></h3><p><!--[-->Defines how components communicate. Common API designs include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->REST<!--]--></strong>: Based on HTTP methods like GET, POST, PUT, and DELETE.<!--]--></li><li><!--[--><strong><!--[-->GraphQL<!--]--></strong>: Allows clients to request specific data.<!--]--></li><li><!--[--><strong><!--[-->gRPC<!--]--></strong>: Efficient for communication in distributed systems.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Networking<!--]--></strong><!--]--></a></h3><p><!--[-->Networking includes components like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Load Balancers<!--]--></strong>: Distribute traffic across servers to ensure availability.<!--]--></li><li><!--[--><strong><!--[-->CDNs<!--]--></strong>: Reduce latency by serving content closer to users.<!--]--></li><li><!--[--><strong><!--[-->Firewalls<!--]--></strong>: Secure the system from external threats.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Scalability and Caching<!--]--></strong><!--]--></a></h3><p><!--[-->To handle high traffic:<!--]--></p><ul><!--[--><li><!--[-->Use <strong><!--[-->horizontal scaling<!--]--></strong> (adding more servers) or <strong><!--[-->vertical scaling<!--]--></strong> (adding resources to existing servers).<!--]--></li><li><!--[-->Implement caching with tools like Redis or Memcached to reduce database load.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Monitoring and Logging<!--]--></strong><!--]--></a></h3><p><!--[-->Tools like Prometheus, Grafana, and ELK Stack help monitor system performance and identify issues.<!--]--></p><h2><a><!--[-->Types of System Design<!--]--></a></h2><p><!--[-->System design can be broadly classified into two categories:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->High-Level Design (HLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Focuses on the overall architecture and major components. It addresses:<!--]--></p><ul><!--[--><li><!--[-->The choice of architecture (e.g., monolithic or microservices).<!--]--></li><li><!--[-->Database selection and schema design.<!--]--></li><li><!--[-->Key APIs and external integrations.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Low-Level Design (LLD)<!--]--></strong><!--]--></a></h3><p><!--[-->Deals with the detailed design of components, modules, and classes. It includes:<!--]--></p><ul><!--[--><li><!--[-->Data structures and algorithms.<!--]--></li><li><!--[-->Specific database queries.<!--]--></li><li><!--[-->Implementation details of APIs and interfaces.<!--]--></li><!--]--></ul><p><!--[-->Both HLD and LLD are essential for building a comprehensive system.<!--]--></p><h2><a><!--[-->The System Design Process<!--]--></a></h2><p><!--[-->Designing a system requires a structured approach. Here’s a step-by-step guide:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Understand Requirements<!--]--></strong><!--]--></a></h3><p><!--[-->Begin by gathering and analyzing the requirements:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Functional Requirements<!--]--></strong>: What should the system do? Example: “Allow users to upload photos.”<!--]--></li><li><!--[--><strong><!--[-->Non-Functional Requirements<!--]--></strong>: How should the system perform? Example: “Handle 1 million users with low latency.”<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->Define Key Components<!--]--></strong><!--]--></a></h3><p><!--[-->Break the system into smaller, manageable components. For instance:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: The user interface.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: Business logic and APIs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Storage and retrieval of data.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Choose the Right Tools<!--]--></strong><!--]--></a></h3><p><!--[-->Select technologies and tools based on your needs:<!--]--></p><ul><!--[--><li><!--[-->For high scalability, consider NoSQL databases.<!--]--></li><li><!--[-->For rapid development, frameworks like Django or Spring Boot can be helpful.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Design the Architecture<!--]--></strong><!--]--></a></h3><p><!--[-->Create a high-level architecture diagram that shows:<!--]--></p><ul><!--[--><li><!--[-->Components and their interactions.<!--]--></li><li><!--[-->Data flow between components.<!--]--></li><li><!--[-->Third-party services (e.g., payment gateways, cloud services).<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Optimize for Scalability and Performance<!--]--></strong><!--]--></a></h3><p><!--[-->Incorporate techniques like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Sharding<!--]--></strong>: Splitting data across multiple databases.<!--]--></li><li><!--[--><strong><!--[-->Replication<!--]--></strong>: Creating copies of data for redundancy.<!--]--></li><li><!--[--><strong><!--[-->Asynchronous Processing<!--]--></strong>: Using message queues like Kafka or RabbitMQ.<!--]--></li><!--]--></ul><h3><a><!--[-->6. <strong><!--[-->Plan for Monitoring and Maintenance<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can be monitored and debugged with tools like:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->New Relic<!--]--></strong> for application performance monitoring.<!--]--></li><li><!--[--><strong><!--[-->Splunk<!--]--></strong> for log management.<!--]--></li><!--]--></ul><h3><a><!--[-->7. <strong><!--[-->Iterate and Refine<!--]--></strong><!--]--></a></h3><p><!--[-->System design is rarely perfect in the first iteration. Continuously test, gather feedback, and improve the design.<!--]--></p><h2><a><!--[-->Principles of Good System Design<!--]--></a></h2><p><!--[-->Here are some key principles to follow:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><p><!--[-->Design the system to handle growth in users, data, and traffic.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Reliability<!--]--></strong><!--]--></a></h3><p><!--[-->Ensure the system can recover from failures with techniques like backups, replication, and failover mechanisms.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Maintainability<!--]--></strong><!--]--></a></h3><p><!--[-->Write clean, modular, and well-documented code to make the system easy to maintain.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Performance Optimization<!--]--></strong><!--]--></a></h3><p><!--[-->Optimize the system for speed and efficiency, minimizing latency and resource usage.<!--]--></p><h3><a><!--[-->5. <strong><!--[-->Security<!--]--></strong><!--]--></a></h3><p><!--[-->Protect the system from vulnerabilities with encryption, authentication, and firewalls.<!--]--></p><h2><a><!--[-->Common Challenges in System Design<!--]--></a></h2><p><!--[-->Designing systems is not without challenges. Some common issues include:<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Handling High Traffic<!--]--></strong><!--]--></a></h3><p><!--[-->Scaling systems to handle millions of users requires efficient load balancing and caching strategies.<!--]--></p><h3><a><!--[-->2. <strong><!--[-->Data Consistency<!--]--></strong><!--]--></a></h3><p><!--[-->Maintaining consistency in distributed systems can be complex. Techniques like the <strong><!--[-->CAP Theorem<!--]--></strong> help balance consistency, availability, and partition tolerance.<!--]--></p><h3><a><!--[-->3. <strong><!--[-->Latency<!--]--></strong><!--]--></a></h3><p><!--[-->Reducing latency involves optimizing database queries, using CDNs, and minimizing network hops.<!--]--></p><h3><a><!--[-->4. <strong><!--[-->Cost Management<!--]--></strong><!--]--></a></h3><p><!--[-->Building and running a large-scale system can be expensive. Cost-efficient solutions like serverless architectures can help.<!--]--></p><h2><a><!--[-->Case Study: Designing a Scalable URL Shortener<!--]--></a></h2><p><!--[-->Let’s apply the system design principles to build a URL shortener like <strong><!--[-->Bitly<!--]--></strong>.<!--]--></p><h3><a><!--[-->1. <strong><!--[-->Requirements<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Functional: Shorten URLs, redirect to original URLs, track usage.<!--]--></li><li><!--[-->Non-Functional: Handle 1 billion requests per month, low latency, high availability.<!--]--></li><!--]--></ul><h3><a><!--[-->2. <strong><!--[-->High-Level Design<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Frontend<!--]--></strong>: A web interface for users to enter URLs.<!--]--></li><li><!--[--><strong><!--[-->Backend<!--]--></strong>: API to create and retrieve short URLs.<!--]--></li><li><!--[--><strong><!--[-->Database<!--]--></strong>: Store mappings of short and original URLs.<!--]--></li><!--]--></ul><h3><a><!--[-->3. <strong><!--[-->Database Design<!--]--></strong><!--]--></a></h3><p><!--[-->Use a key-value store like DynamoDB or Redis:<!--]--></p><ul><!--[--><li><!--[-->Key: Short URL.<!--]--></li><li><!--[-->Value: Original URL.<!--]--></li><!--]--></ul><h3><a><!--[-->4. <strong><!--[-->Scalability<!--]--></strong><!--]--></a></h3><ul><!--[--><li><!--[-->Use a <strong><!--[-->load balancer<!--]--></strong> to distribute traffic.<!--]--></li><li><!--[-->Implement caching to reduce database load.<!--]--></li><li><!--[-->Use <strong><!--[-->partitioning<!--]--></strong> for storing data.<!--]--></li><!--]--></ul><h3><a><!--[-->5. <strong><!--[-->Monitoring<!--]--></strong><!--]--></a></h3><p><!--[-->Set up alerts for high latency or failure rates using tools like CloudWatch.<!--]--></p><p><!--[-->By following this process, you can design a system that meets both functional and non-functional requirements.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->System design is a cornerstone of software engineering. It transforms abstract requirements into a concrete, scalable, and maintainable structure. By understanding the principles, process, and challenges of system design, you can build software that performs efficiently, scales gracefully, and satisfies user needs.<!--]--></p><p><!--[-->Whether you’re preparing for interviews, building new systems, or improving existing ones, mastering system design is an invaluable skill. Start by practicing with common problems, such as designing a chat application or a social media feed, and iteratively refine your approach.<!--]--></p><p><!--[-->Happy designing!<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Cloud world)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CAP Theorem for Databases: Consistency, Availability & Partition Tolerance]]></title>
            <link>https://rahulaher.netlify.app/articles/cap-theorem/</link>
            <guid>https://rahulaher.netlify.app/articles/cap-theorem/</guid>
            <pubDate>Tue, 21 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In computer science, the CAP theorem, sometimes called CAP theorem model or Brewer’s theorem after its originator, Eric Brewer, states that any distributed system or data store can simultaneously provide only two of three guarantees: consistency, availability, and partition tolerance (CAP). During times of normal operations, a data store covers all three. However, according to the CAP theorem, a distributed database system can provide either consistency or availability when it experiences a network failure. In other words, in case of a network failure, it’s a tradeoff between consistency or availability, and that choice must be made in advance.]]></description>
            <content:encoded><![CDATA[<p><!--[-->In computer science, the CAP theorem, sometimes called CAP theorem model or Brewer’s theorem after its originator, Eric Brewer, states that any distributed system or data store can simultaneously provide only two of three guarantees: consistency, availability, and partition tolerance (CAP). During times of normal operations, a data store covers all three. However, according to the CAP theorem, a distributed database system can provide either consistency or availability when it experiences a network failure. In other words, in case of a network failure, it’s a tradeoff between consistency or availability, and that choice must be made in advance.<!--]--></p><p><!--[-->Let’s take a look.<!--]--></p><img><h2><a><!--[-->What is the CAP theorem?<!--]--></a></h2><p><!--[-->The CAP Theorem is comprised of three components (hence its name) as they relate to distributed data stores:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Consistency<!--]--></strong>: All reads receive the most recent write or an error.<!--]--></li><li><!--[--><strong><!--[-->Availability<!--]--></strong>: All reads contain data, but it might not be the most recent.<!--]--></li><li><!--[--><strong><!--[-->Partition tolerance<!--]--></strong>: The system continues to operate despite network failures (ie; dropped partitions, slow network connections, or unavailable network connections between nodes.)<!--]--></li><!--]--></ul><p><!--[-->In normal operations, your data store provides all three functions. But the CAP theorem maintains that when a distributed database experiences a network failure, you can provide either consistency or availability.<!--]--></p><p><!--[-->It’s a tradeoff. All other times, all three can be provided. But, in the event of a network failure, a choice must be made.<!--]--></p><p><!--[-->In the theorem, partition tolerance is a must. The assumption is that the system operates on a distributed data store so the system, by nature, operates with network partitions. Network failures will happen, so to offer any kind of reliable service, partition tolerance is necessary—the P of CAP.<!--]--></p><p><!--[-->That leaves a decision between the other two, C and A. When a network failure happens, one can choose to guarantee consistency or availability:<!--]--></p><ul><!--[--><li><!--[-->High consistency comes at the cost of lower availability.<!--]--></li><li><!--[-->High availability comes at the cost of lower consistency.<!--]--></li><!--]--></ul><p><!--[-->Consistency in CAP means having the most up-to-date information.<!--]--></p><h2><a><!--[-->User queries: consistent or available?<!--]--></a></h2><p><!--[-->The moment in question is the user query. We assume that a user makes a query to a database, and the networked database is to return a value.<!--]--></p><p><!--[-->Whichever value is returned from the database depends on our choice to provide consistency or availability. Here’s how this choice could play out:<!--]--></p><ul><!--[--><li><!--[-->On a query, we can respond to the user with the <strong><!--[-->current value on the server<!--]--></strong>, offering a highly available service. If we do this, there is no guarantee that the value is the most recent value submitted to the database. It is possible a recent write could be stuck in transit somewhere.
If we want to guarantee high consistency, then we have to <strong><!--[-->wait for the new write<!--]--></strong> or return an error to the query. Thus, we sacrifice availability to ensure the data returned by the query is consistent.<!--]--></li><!--]--></ul><h2><a><!--[-->Choosing system needs<!--]--></a></h2><p><!--[-->To some, the choice between consistency and availability is really a matter of philosophical discussion that’s rarely made in practice. The reliability of these distributed systems is pretty good. That said, problems do happen. AWS experienced a big outage just before Thanksgiving 2020.<!--]--></p><p><!--[-->Where the theory says you can have only two of three components, professionals say that’s not always the case. <strong><!--[-->Eric Brewer, computer scientist and initial positor of the CAP theorem<!--]--></strong>, cleared up some confusion around the theorem, generalizing it from a hard either/or statement to one depending on the system’s need. He said:<!--]--></p><blockquote><!--[--><p><!--[-->“The modern CAP goal should be to maximize combinations of consistency and availability that make sense for the specific application. Such an approach incorporates plans for operation during a partition and for recovery afterward, thus helping designers think about CAP beyond its historically perceived limitations.”<!--]--></p><!--]--></blockquote><p><!--[-->Choosing consistency and availability comes when choosing which database type to go with, such as SQL vs NoSQL. NoSQL databases can be classified based on whether they support high availability or high consistency.<!--]--></p><h2><a><!--[-->NoSQL<!--]--></a></h2><p><!--[-->NoSQL databases do not require a schema, and don’t enforce relations between tables. All its documents are JSON documents, which are complete entities one can readily read and understand. They are widely recognized for:<!--]--></p><ul><!--[--><li><!--[-->Ease-of-use<!--]--></li><li><!--[-->Scalable performance<!--]--></li><li><!--[-->Strong resilience<!--]--></li><li><!--[-->Wide availability<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Examples of NoSQL databases include<!--]--></strong>:<!--]--></p><ul><!--[--><li><!--[-->Cloud Firestore<!--]--></li><li><!--[-->Firebase Real-time DB<!--]--></li><li><!--[-->MongoDB<!--]--></li><li><!--[-->MarkLogic<!--]--></li><li><!--[-->Couchbase<!--]--></li><li><!--[-->CloudDB<!--]--></li><li><!--[-->Amazon DynamoDB<!--]--></li><!--]--></ul><h2><a><!--[-->Consistency in databases<!--]--></a></h2><p><!--[-->Consistent databases should be used when the value of the information returned needs to be accurate.<!--]--></p><p><!--[-->Financial data is a good example. When a user logs in to their banking institution, they do not want to see an error that no data is returned, or that the value is higher or lower than it actually is. Banking apps should return the exact value of a user’s account information. In this case, banks would rely on consistent databases.<!--]--></p><p><!--[--><strong><!--[-->Examples of a consistent database include<!--]--></strong>:<!--]--></p><ul><!--[--><li><!--[-->Bank account balances<!--]--></li><li><!--[-->Text messages<!--]--></li><!--]--></ul><p><!--[--><strong><!--[-->Database options for consistency<!--]--></strong>:<!--]--></p><ul><!--[--><li><!--[-->MongoDB<!--]--></li><li><!--[-->Redis<!--]--></li><li><!--[-->HBase<!--]--></li><!--]--></ul><h2><a><!--[-->Availability in databases<!--]--></a></h2><p><!--[-->Availability databases should be used when the service is more important than the information.<!--]--></p><p><!--[-->An example of having a highly available database can be seen in e-commerce businesses. Online stores want to make their store and the functions of the shopping cart available 24/7 so shoppers can make purchases exactly when they need.<!--]--></p><p><!--[--><strong><!--[-->Database options for availability<!--]--></strong>:<!--]--></p><ul><!--[--><li><!--[-->Cassandra<!--]--></li><li><!--[-->DynamoDB<!--]--></li><li><!--[-->Cosmos DB<!--]--></li><!--]--></ul><p><!--[-->Some database options, like Cosmos and Cassandra, allow a user to turn a knob on which guarantee they prefer - consistency or availability.<!--]--></p><h2><a><!--[-->let's understand CAP Theorem by an example<!--]--></a></h2><h3><a><!--[-->Chapter 1: “Remembrance Inc” Your new venture :<!--]--></a></h3><p><!--[-->Last night when your spouse appreciated you on remembering her birthday and bringing her a gift, a strange Idea strikes you. People are so bad in remembering things. And you’re sooo good at it. So why not start a venture that will put your talent to use? The more you think about it, the more you like it. In fact you even come up with a news paper ad which explains your idea<!--]--></p><div><span></span><!--[--><pre><!--[--><code>Remembrance Inc! - Never forget, even without remembering!  
Ever felt bad that you forget so much? Don’t worry. Help is just a phone
away!  
When you need to remember something, just call 555—55-REMEM and tell us
what you need to remember. For eg., call us and let us know of your
boss’s phone number, and forget to remember it. when you need to know it
back.. call back the same number\[(555)—55-REMEM \] and we’ll tell you
what’s your boss’s phone number.  
Charges : only $0.1 per request
</code><!--]--></pre><!--]--><button><svg><path></path></svg></button></div><p><!--[-->So, your typical phone conversation will look like this:<!--]--></p><blockquote><!--[--><p><!--[-->Customer : Hey, Can you store my neighbor’s birthday? <br>
You: Sure.. when is it? <br>
Customer : 2nd of jan <br>
You: (write it down against the customer’s page in your paper note book) Stored. Call us any time for knowing your neighbor’s birthday again! <br>
Customer : Thank you! <br>
You: No problem! We charged your credit card with $0.1 <br><!--]--></p><!--]--></blockquote><h3><a><!--[-->Chapter 2 : You scale up:<!--]--></a></h3><p><!--[-->Your venture gets funded by YCombinator. Your Idea is so simple, needs nothing but a paper notebook and phone, yet so effective that it spreads like wild fire. You start getting hundreds of call every day.<!--]--></p><p><!--[-->And there starts the problem. You see that more and more of your customers have to wait in the queue to speak to you. Most of them even hang up tired of the waiting tone. Besides when you were sick the other day and could not come to work you lost a whole day of business. Not to mention all those dissatisfied customers who wanted information on that day.
You decide it’s time for you to scale up and bring in your wife to help you.<!--]--></p><p><!--[-->Your start with a simple plan:<!--]--></p><ol><!--[--><li><!--[-->You and your wife both get an extension phone<!--]--></li><li><!--[-->Customers still dial (555)–55-REMEM and need to remember only one number<!--]--></li><li><!--[-->A pbx will route the a customers call to whoever is free and equally<!--]--></li><!--]--></ol><h3><a><!--[-->Chapter 3 : You have your first “Bad Service” :<!--]--></a></h3><p><!--[-->Two days after you implemented the new system, you get a call from you get a call from your trusted customer Jhon. This is how it goes:<!--]--></p><blockquote><!--[--><ul><!--[--><li><!--[-->Jhon: Hey <br><!--]--></li><li><!--[-->You: Glad you called “Remembrance Inc!”. What can I do for you? <br><!--]--></li><li><!--[-->Jhon: Can you tell me when is my flight to New Delhi? <br><!--]--></li><li><!--[-->You: Sure.. 1 sec sir <br>
(You look up your notebook) <br>
(wow! there is no entry for “flight date” in Jhon’s page)!!!!! <br><!--]--></li><li><!--[-->You: Sir, I think there is a mistake. You never told us about your flight to delhi <br><!--]--></li><li><!--[-->Jhon: What! I just called you guys yesterday!(cuts the call!) <br><!--]--></li><!--]--></ul><!--]--></blockquote><p><!--[-->How did that happen? Could Jhon be lying? You think about it for a second and the reason hits you! Could Jhon’s call yesterday reached your wife? You go to your wife’s desk and check her notebook. Sure enough it’s there. You tell this to your wife and she realizes the problem too.<!--]--></p><p><!--[-->What a terrible flaw in your distributed design! <strong><!--[-->Your distributed system is not consistent! There could always be a chance that a customer updates something which goes to either you or your wife and when the next call from the customer is routed to another person there will not be a consistent reply from Remembrance Inc!<!--]--></strong><!--]--></p><h3><a><!--[-->Chapter 4: You fix the Consistency problem:<!--]--></a></h3><p><!--[-->Well, your competitors may ignore a bad service, but not you. You think all night in the bed when your wife is sleeping and come up with a beautiful plan in the morning. You wake up your wife and tell her:<!--]--></p><p><!--[-->” Darling this is what we are going to do from now”<!--]--></p><ul><!--[--><li><!--[-->Whenever any one of us get a call for an update(when the customer wants us to remember something) before completing the call we tell the other person<!--]--></li><li><!--[-->This way both of us note down any updates<!--]--></li><li><!--[-->When there is call for search(When the customer wants information he has already stored) we don’t need to talk with the other person. Since both of us have the latest updated information in both of our note books we can just refer to it..<!--]--></li><!--]--></ul><p><!--[-->There is only one problem though, you say, and that is an “update” request has to involve both of us and we cannot work in parallel during that time. For eg. when you get an update request and telling me to update too, i cannot take other calls. But that’s okay because most calls we get anyway are “search” (a customer updates once and asks many times) . Besides, we cannot give wrong information at any cost.<!--]--></p><p><!--[-->“Neat” your wife says, “but there is one more flaw in this system that you haven’t thought of. What if one of us doesn’t report to work on a particular day? On that day, then, we won’t be able to take “any” Update calls, because the other person cannot be updated! We will have <strong><!--[-->Availability problem , i.e, for eg., if an update request comes to me I will never be able to complete that call because even though I have written the update in my note book, I can never update you. So I can never complete the call!”<!--]--></strong><!--]--></p><h3><a><!--[-->Chapter 5: You come up with the greatest solution Ever:<!--]--></a></h3><p><!--[-->You being to realize a little bit on why distributed system might not be as easy as you thought at first. Is it that difficult to come up with a solution that could be both <strong><!--[-->“Consistent and Available”<!--]--></strong>? Could be difficult for others, but not for you!! Then next morning you come up with a solution that your competitors cannot think of in their dreams! You wake your wife up eagerly again..<!--]--></p><p><!--[-->” look” , you tell her.. “This is what we can do to be consistent and available” . The plan is mostly similar to what I told you yesterday:<!--]--></p><ul><!--[--><li><!--[-->i) Whenever any one of us get a call for an update(when the customer wants us to remember something) before completing the call, if the other person is available we tell the other person. This way both of us note down any updates<!--]--></li><li><!--[-->ii) But if the other person is not available(doesn’t report to work) we send the other person an email about the update.<!--]--></li><li><!--[-->iii) The next day when the other person comes to work after taking a day off, He first goes through all the emails, updates his note book accordingly.. before taking his first call.<!--]--></li><!--]--></ul><p><!--[-->Genius! You wife says! I can’t find any flaws in this systems. Let’s put it to use.. Remembrance Inc! is now both <strong><!--[-->Consistent and available!<!--]--></strong><!--]--></p><h3><a><!--[-->Chapter 6: Your wife gets angry :<!--]--></a></h3><p><!--[-->Everything goes well for a while. Your system is consistent. Your system works well even when one of you doesn’t report to work. But what if Both of you report to work and one of you doesn’t update the other person? Remember all those days you’ve been waking your wife up early with your Greatest-idea-ever-bullshit? * What if your wife decides to take calls but is too angry with you and decides not to update you for a day? Your idea totally breaks! Your idea so far is good for consistency and availability but is not Partition Tolerant!*<!--]--></p><p><!--[-->You can decide to be partition tolerant by deciding not to take any calls until you patch up with your wife.. Then your system will not be “available” during that time…<!--]--></p><h3><a><!--[-->Chapter 7: Conclusion :<!--]--></a></h3><p><!--[-->So Let’s look at CAP Theorem now. Its states that, when you are designing a distributed system you can get cannot achieve all three of Consistency, Availability and Partition tolerance. You can pick only two of:<!--]--></p><p><!--[-->Consistency: You customers, once they have updated information with you, will always get the most updated information when they call subsequently. No matter how quickly they call back
Availability: Remembrance Inc will always be available for calls until any one of you(you or your wife) report to work.
Partition Tolerance: Remembrance Inc will work even if there is a communication loss between you and your wife!<!--]--></p><h3><a><!--[-->Bonus : Eventual Consistency with a run around clerk :<!--]--></a></h3><p><!--[-->Here is another food for thought. You can have a run around clerk, who will update other’s notebook when one of your’s or your wife’s note books is updated. The greatest benefit of this is that, he can work in background and one of your or your wife’s “update” doesn’t have to block, waiting for the other one to update. This is how many NoSql systems work, one node updates itself locally and a background process synchronizes all other nodes accordingly… The only problem is that you will lose consistency of some time. For eg., a customer’s call reaches your wife first and before the clerk has a chance to update your notebook , the customer’ calls back and it reaches you. Then he won’t get a consistent reply.. But that said, this is not at all a bad idea if such cases are limited. For eg., assuming a customer won’t forget things so quickly that he calls back in 5 minutes.<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (SCALER)<!--]--><!--]--></a><!--]--></li><li><!--[--><a><!--[--><!--[-->Blog Resource<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What’s the Difference Between Throughput and Latency?]]></title>
            <link>https://rahulaher.netlify.app/articles/throughput-and-latency/</link>
            <guid>https://rahulaher.netlify.app/articles/throughput-and-latency/</guid>
            <pubDate>Mon, 20 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Latency and throughput are two metrics that measure the performance of a computer network. Latency is the delay in network communication. It shows the time that data takes to transfer across the network. Networks with a longer delay or lag have high latency, while those with fast response times have lower latency. In contrast, throughput refers to the average volume of data that can actually pass through the network over a specific time. It indicates the number of data packets that arrive at their destinations successfully and the data packet loss.]]></description>
            <content:encoded><![CDATA[<p><!--[-->Latency and throughput are two metrics that measure the performance of a computer network. Latency is the delay in network communication. It shows the time that data takes to transfer across the network. Networks with a longer delay or lag have high latency, while those with fast response times have lower latency. In contrast, throughput refers to the average volume of data that can actually pass through the network over a specific time. It indicates the number of data packets that arrive at their destinations successfully and the data packet loss.<!--]--></p><p><!--[--><a><!--[--><!--[-->Read about latency »<!--]--><!--]--></a><!--]--></p><h2><a><!--[-->Why are throughput and latency important?<!--]--></a></h2><p><!--[-->You can determine network speed by looking at how quickly a network can transfer data packets to their destinations. This speed is the result of network performance factors like latency and throughput.<!--]--></p><p><!--[-->Latency determines the delay that a user experiences when they send or receive data from the network. Throughput determines the number of users that can access the network at the same time.<!--]--></p><p><!--[-->A network with low throughput and high latency struggles to send and process high data volume, which results in congestion and poor application performance. In contrast, a network with high throughput and low latency is responsive and efficient. Users experience improved performance and increased satisfaction.<!--]--></p><p><!--[-->High-performing networks directly impact revenue generation and operational efficiency. In addition, certain use cases—like real-time streaming, Internet of Things (IoT) data analytics, and high-performance computing—require certain network performance thresholds to operate optimally.<!--]--></p><h2><a><!--[-->Key differences: network latency vs. throughput<!--]--></a></h2><p><!--[-->Although latency and throughput both contribute to a reliable and fast network, they are not the same. These network metrics focus on distinct statistics and are different from each other.<!--]--></p><blockquote><!--[--><h2><a><!--[-->How to measure<!--]--></a></h2><!--]--></blockquote><p><!--[-->You can measure network latency by measuring ping time. This process is where you transmit a small data packet and receive confirmation that it arrived.<!--]--></p><p><!--[-->Most operating systems support a ping command which does this from your device. The round-trip-time (RTT) displays in milliseconds and gives you an idea of how long it takes for your network to transfer data.<!--]--></p><p><!--[-->You can measure throughput either with network testing tools or manually. If you wanted to test throughput manually, you would send a file and divide the file size by the time it takes to arrive. However, latency and bandwidth impact throughput. Because of this, many people use network testing tools, as the tools report throughput alongside other factors like bandwidth and latency.<!--]--></p><p><!--[--><a><!--[--><!--[-->Read about RTT in networking »<!--]--><!--]--></a><!--]--></p><h3><a><!--[-->Unit of measurement<!--]--></a></h3><p><!--[-->You measure latency in milliseconds. If you have a low number of milliseconds, your network is only experiencing a small delay. The higher the number in milliseconds, the slower the network is performing.<!--]--></p><p><!--[-->Originally, you would measure network throughput in bits per second (bps). But, as data transmission technologies have improved, you can now achieve much higher values. Because of this, you can measure throughput in kilobytes per second (KBps), megabytes per second (MBps), and even gigabytes per second (GBps). One byte is equal to eight bits.<!--]--></p><h2><a><!--[-->Impacting factors: latency vs throughput<!--]--></a></h2><p><!--[-->Different factors can impact your latency and throughput metrics.<!--]--></p><blockquote><!--[--><h2><a><!--[-->Latency<!--]--></a></h2><!--]--></blockquote><p><!--[-->Latency has several factors that contribute to it being high or low.<!--]--></p><p><!--[--><em><!--[-->Location<!--]--></em><!--]--></p><p><!--[-->One of the most important factors is the location of where data originates and its intended destination. If your servers are in a different geographical region from your device, the data has to travel further, which increases latency. This factor is called <em><!--[-->propagation<!--]--></em>.<!--]--></p><img><p><!--[--><em><!--[-->Network congestion<!--]--></em><!--]--></p><p><!--[-->Network congestion occurs when there is a high volume of data being transmitted over a network. The increased traffic on the network causes packets to take longer routes to their destination.<!--]--></p><h3><!--[--><!--]--></h3><p><!--[--><em><!--[-->Protocol efficiency<!--]--></em><!--]--></p><p><!--[-->Some networks require additional protocols for security. The extra handshake steps create a delay.<!--]--></p><h3><a><!--[--><!--]--></a></h3><p><!--[--><em><!--[-->Network infrastructure<!--]--></em><!--]--></p><p><!--[-->Network devices can become overloaded, which results in dropped packets. As packets are delayed or dropped, devices retransmit them. This adds additional latency.<!--]--></p><blockquote><!--[--><h2><a><!--[-->Throughput<!--]--></a></h2><!--]--></blockquote><p><!--[-->Throughput speeds are directly impacted by other factors.<!--]--></p><p><!--[--><em><!--[-->Bandwidth<!--]--></em><!--]--></p><p><!--[-->If your network capacity has reached the maximum bandwidth of your transmission medium, its throughput will never be able to go beyond that limit.<!--]--></p><h3><a><!--[--><!--]--></a></h3><p><!--[--><em><!--[-->Processing power<!--]--></em><!--]--></p><p><!--[-->Certain network devices have specialized hardware or software optimizations that improve their processing performance. Some examples are dedicated application-specific integrated circuits or software-based packet processing engines.<!--]--></p><p><!--[-->These optimizations enable the device to handle higher volumes of traffic and more complex packet processing tasks, which leads to higher throughput.<!--]--></p><h3><a><!--[--><!--]--></a></h3><p><!--[--><em><!--[-->Packet loss<!--]--></em><!--]--></p><p><!--[-->Packet loss can occur for a variety of reasons, including network congestion, faulty hardware, or misconfigured network devices. When packets are lost, they must be retransmitted. This results in delays and reduces the overall throughput of the network.<!--]--></p><h3><a><!--[--><!--]--></a></h3><p><!--[--><em><!--[-->Network topology<!--]--></em><!--]--></p><p><!--[-->Network topology refers to the number of network devices, the bandwidth of the network links, and the distance between devices in a network path.<!--]--></p><p><!--[-->A well-designed network topology provides multiple paths for data transmission, reduces traffic bottlenecks, and increases throughput. Networks with more devices or longer distances require complex network topologies to achieve high throughput.<!--]--></p><img><h2><a><!--[-->Relationship between bandwidth, latency and throughput<!--]--></a></h2><p><!--[-->Latency and throughput work together to deliver high network connectivity and performance. As both impact the transmission of data packets, they also affect one another.<!--]--></p><p><!--[-->If a network connection has high latency, it can have lower throughput, as data takes longer to transmit and arrive. Low throughput also makes it seem like a network has high latency, as it takes longer for large quantities of data to arrive.<!--]--></p><p><!--[-->As they are closely linked, you must monitor both latency and throughput to achieve high network performance.<!--]--></p><h3><a><!--[-->Bandwidth and network throughput<!--]--></a></h3><p><!--[-->Bandwidth represents the total volume of data that you can transfer over a network. Your total bandwidth refers to the theoretical maximum amount of data that you could transfer over a network. You measure it in megabytes per second (MBps). You can think of bandwidth as the theoretical maximum throughput of your network.<!--]--></p><p><!--[-->Bandwidth is how much data you can transfer, while throughput is the actual amount of data you transmit in any given moment based on real-world network limitations. A high bandwidth does not guarantee speed or a good network performance, but a higher bandwidth leads to higher throughput.<!--]--></p><h2><a><!--[-->How can you improve latency and throughput?<!--]--></a></h2><p><!--[-->To improve latency, you can shorten the propagation between the source and destination. You can improve throughput by increasing the overall network bandwidth.<!--]--></p><p><!--[-->Next, we give some suggestions to improve latency and throughput together.<!--]--></p><h3><a><!--[-->Caching<!--]--></a></h3><p><!--[-->Caching in networking refers to the process of storing frequently accessed data geographically closer to the user. For example, you can store data in proxy servers or content delivery networks (CDNs).<!--]--></p><p><!--[-->Your network can deliver data from the cached location much faster than if it had to be retrieved from the original source. And the user receives data much faster, improving latency. Additionally, because the data is retrieved from a cache, it reduces the load on the original source. This allows it to handle more requests at once, improving throughput.<!--]--></p><h3><a><!--[-->Transport protocols<!--]--></a></h3><p><!--[-->By optimizing the transport protocol that you use for specific applications, you can improve network performance.<!--]--></p><p><!--[-->For instance, TCP and UDP are two common network protocols. TCP establishes a connection and checks that you receive data without any errors. Because of its goal of reducing packet loss, TCP has higher latency and higher throughput. UDP does not check for packet loss or errors, transmitting several duplicate packets instead. So, it gives minimal latency but a higher throughput.<!--]--></p><p><!--[-->Depending on the application that you are using, TCP or UDP may be the better choice. For example, TCP is useful for transferring data, while UDP is useful for video streaming and gaming.<!--]--></p><h3><a><!--[-->Quality of service<!--]--></a></h3><p><!--[-->You can use a quality of service (QoS) strategy to manage and optimize network performance. QoS allows you to divide network traffic into specific categories. You can assign each category a priority level.<!--]--></p><p><!--[-->Your QoS configurations prioritize latency-sensitive applications. Some applications and users experience lower latency than others. Your QoS configurations can also prioritize data by type, reducing packet loss and increasing throughput for certain users<!--]--></p><h2><a><!--[-->Summary of differences: throughput vs. latency<!--]--></a></h2><h3><a><!--[--><!--]--></a></h3><table><!--[--><thead><!--[--><tr><!--[--><th><!--[-->Aspect<!--]--></th><th><!--[-->Throughput<!--]--></th><th><!--[-->Latency<!--]--></th><!--]--></tr><!--]--></thead><tbody><!--[--><tr><!--[--><td><!--[--><strong><!--[-->What does it measure?<!--]--></strong><!--]--></td><td><!--[-->Throughput measures the volume of data that passes through a network in a given period. Throughput impacts how much data you can transmit in a period of time.<!--]--></td><td><!--[-->Latency measures the time delay when sending data. A higher latency causes a network delay.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->How to measure?<!--]--></strong><!--]--></td><td><!--[-->Manually calculate throughput by sending a file or using network testing tools.<!--]--></td><td><!--[-->Calculate latency by using ping times.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Unit of measurement<!--]--></strong><!--]--></td><td><!--[-->Megabytes per second (MBps).<!--]--></td><td><!--[-->Milliseconds (ms).<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Impacting factors<!--]--></strong><!--]--></td><td><!--[-->Bandwidth, network processing power, packet loss, and network topology.<!--]--></td><td><!--[-->Geographical distances, network congestion, transport protocol, and network infrastructure.<!--]--></td><!--]--></tr><!--]--></tbody><!--]--></table><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p><ul><!--[--><li><!--[--><a><!--[--><!--[-->YouTube Resource (Gate Smasher)<!--]--><!--]--></a><!--]--></li><!--]--></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[System Design: Scalability]]></title>
            <link>https://rahulaher.netlify.app/articles/system-design-scalability/</link>
            <guid>https://rahulaher.netlify.app/articles/system-design-scalability/</guid>
            <pubDate>Sun, 19 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Scalability is a crucial aspect of system design, especially in today’s world of rapidly growing data and user bases. As applications and services become more popular, they must be able to handle increased traffic and data without compromising performance or reliability. In this article, we will explore what scalability is, why it is important, and how to achieve it in system design. The truth is, many of us don’t dive deep enough into scalability to truly grasp its significance in system design. Consequently, we fail to impress interviewers who are looking for candidates with a comprehensive understanding of this crucial aspect.]]></description>
            <content:encoded><![CDATA[<p><!--[-->Scalability is a crucial aspect of system design, especially in today’s world of rapidly growing data and user bases. As applications and services become more popular, they must be able to handle increased traffic and data without compromising performance or reliability. In this article, we will explore what scalability is, why it is important, and how to achieve it in system design. The truth is, many of us don’t dive deep enough into scalability to truly grasp its significance in system design. Consequently, we fail to impress interviewers who are looking for candidates with a comprehensive understanding of this crucial aspect.<!--]--></p><h2><a><!--[-->System Design - Scalability<!--]--></a></h2><p><!--[-->Running a system for one user is significantly different from running it for 10,000 users and that too is different from running it for 1 million users. As the system grows the performance starts to degrade unless we adapt it to deal with that growth. Scalability is the property of a system to handle a growing amount of load by adding resources to the system. A system that can continuously evolve to support a growing amount of work is scalable.<!--]--></p><blockquote><!--[--><h2><a><!--[-->Importance of Scalability in System Design<!--]--></a></h2><!--]--></blockquote><p><!--[-->Scalability is crucial in system design for several reasons:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Handle Growth<!--]--></strong>: Scalability ensures that a system can handle growth in terms of user base, data volume, and traffic without experiencing a significant decrease in performance or reliability. This is essential for businesses that aim to expand their operations and reach a larger audience over time.<!--]--></li><li><!--[--><strong><!--[-->Improve Performance<!--]--></strong>: Scalability can improve the overall performance of a system by distributing the workload across multiple resources or servers. This can reduce response times, increase throughput, and enhance the user experience.<!--]--></li><li><!--[--><strong><!--[-->Ensure Availability<!--]--></strong>: Scalability can improve the availability of a system by ensuring that it can withstand failures or spikes in traffic without becoming unavailable. This is critical for mission-critical systems that need to be available 24/7.<!--]--></li><li><!--[--><strong><!--[-->Optimize Costs<!--]--></strong>: Scalability can help optimize costs by allowing resources to be scaled up or down based on demand. This can reduce the need for over-provisioning resources, leading to cost savings.<!--]--></li><li><!--[--><strong><!--[-->Support Innovation<!--]--></strong>: Scalability can support innovation by enabling the development of new features or services without being constrained by the limitations of the existing infrastructure. This can help businesses stay competitive and adapt to changing market demands.<!--]--></li><!--]--></ul><hr><blockquote><!--[--><h2><a><!--[-->How can a System Grow?<!--]--></a></h2><!--]--></blockquote><p><!--[-->A system can grow in several dimensions.<!--]--></p><img><h2><a><!--[-->1. Growth in User Base<!--]--></a></h2><p><!--[-->More users started using the system, leading to increased number of requests.<!--]--></p><blockquote><!--[--><p><!--[--><strong><!--[-->Example<!--]--></strong>: A social media platform experiencing a surge in new users.<!--]--></p><!--]--></blockquote><h2><a><!--[-->2. Growth in Features<!--]--></a></h2><p><!--[-->Introducing new functionality to expand the system's capabilities.<!--]--></p><blockquote><!--[--><p><!--[--><strong><!--[-->Example<!--]--></strong>: An e-commerce website adding support for a new payment method.<!--]--></p><!--]--></blockquote><h2><a><!--[-->3. Growth in Data Volume<!--]--></a></h2><p><!--[-->Growth in the amount of data the system stores and manages due to user activity or logging.<!--]--></p><blockquote><!--[--><p><!--[--><strong><!--[-->Example<!--]--></strong>: A video streaming platform like youtube storing more video content over time.<!--]--></p><!--]--></blockquote><h2><a><!--[-->4. Growth in Complexity<!--]--></a></h2><p><!--[-->The system's architecture evolves to accommodate new features, scale, or integrations, resulting in additional components and dependencies.<!--]--></p><blockquote><!--[--><p><!--[--><strong><!--[-->Example<!--]--></strong>: A system that started as a simple application is broken into smaller, independent systems.<!--]--></p><!--]--></blockquote><h2><a><!--[-->5. Growth in Geographic Reach<!--]--></a></h2><p><!--[-->The system is expanded to serve users in new regions or countries.<!--]--></p><blockquote><!--[--><p><!--[--><strong><!--[-->Example<!--]--></strong>: An e-commerce company launching websites and distribution in new international markets.<!--]--></p><!--]--></blockquote><hr><blockquote><!--[--><h2><a><!--[-->How to Scale a System?<!--]--></a></h2><!--]--></blockquote><p><!--[-->Here are 2 common ways to make a system scalable:<!--]--></p><h2><a><!--[-->1. Vertical Scaling (Scale up)<!--]--></a></h2><p><!--[-->This means adding more power to your existing machines by upgrading server with more RAM, faster CPUs, or additional storage. It's a good approach for simpler architectures but has limitations in how far you can go.<!--]--></p><img><h3><a><!--[-->Advantages of Vertical Scaling<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Increased capacity<!--]--></strong>: Upgrading the hardware of a server can improve its performance and increase its capacity to handle incoming requests.<!--]--></li><li><!--[--><strong><!--[-->Easier management<!--]--></strong>: Vertical scaling typically involves upgrading a single node, which can be less complex than managing multiple nodes.<!--]--></li><!--]--></ul><h3><a><!--[-->Disadvantages of Vertical Scaling<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Limited scalability<!--]--></strong>: Vertical scaling is limited by the physical constraints of the hardware, whereas horizontal scaling can be easily expanded by adding more nodes.<!--]--></li><li><!--[--><strong><!--[-->Increased cost<!--]--></strong>: Upgrading the hardware of a server can be more expensive than adding more nodes.<!--]--></li><li><!--[--><strong><!--[-->Single point of failure<!--]--></strong>: All incoming requests are still directed to a single server, which increases the risk of downtime if the server fails<!--]--></li><!--]--></ul><h2><a><!--[-->2. Horizontal Scaling (Scale out)<!--]--></a></h2><p><!--[-->This means adding more machines to your system to spread the workload across multiple servers. It's often considered the most effective way to scale for large systems.<!--]--></p><img><blockquote><!--[--><p><!--[-->Example: Netflix uses horizontal scaling for its streaming service, adding more servers to their clusters to handle the growing number of users and data traffic.<!--]--></p><!--]--></blockquote><h3><a><!--[-->Advantages of Horizontal Scaling<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Increased capacity<!--]--></strong>: More nodes or instances can handle a larger number of incoming requests.<!--]--></li><li><!--[--><strong><!--[-->Improved performance<!--]--></strong>: Load can be balanced across multiple nodes or instances, reducing the likelihood of any one server becoming overwhelmed.<!--]--></li><li><!--[--><strong><!--[-->Increased fault tolerance<!--]--></strong>: If one node fails, incoming requests can be redirected to another node, reducing the risk of downtime.<!--]--></li><!--]--></ul><h3><a><!--[-->Disadvantages of Horizontal Scaling<!--]--></a></h3><ul><!--[--><li><!--[--><strong><!--[-->Increased complexity<!--]--></strong>: Managing multiple nodes or instances can be more complex than managing a single node.<!--]--></li><li><!--[--><strong><!--[-->Increased cost<!--]--></strong>: Adding more nodes or instances will typically increase the cost of the system.<!--]--></li><!--]--></ul><blockquote><!--[--><p><!--[--><strong><!--[-->Remember<!--]--></strong>: Scalable code is generally computation inefficient. It is bitter truth because we split big and complex code to a set of small associative operations so as to scale up horizontally because vertical scaling has a limit.<!--]--></p><!--]--></blockquote><h3><a><!--[-->Vertical Scaling vs. Horizontal Scaling<!--]--></a></h3><p><!--[-->Now that we have looked into the details of each type of scaling, let us compare them with respect to different parameters:<!--]--></p><table><!--[--><thead><!--[--><tr><!--[--><th><!--[-->Aspect<!--]--></th><th><!--[-->Horizontal Scaling<!--]--></th><th><!--[-->Vertical Scaling<!--]--></th><!--]--></tr><!--]--></thead><tbody><!--[--><tr><!--[--><td><!--[--><strong><!--[-->Resource Addition<!--]--></strong><!--]--></td><td><!--[-->Adds more machines or servers to distribute workload<!--]--></td><td><!--[-->Enhances resources of individual components<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Cost Effectiveness<!--]--></strong><!--]--></td><td><!--[-->Generally more cost-effective for large-scale systems<!--]--></td><td><!--[-->Initially simpler, but can become costlier long-term<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Flexibility<!--]--></strong><!--]--></td><td><!--[-->Offers greater flexibility as it’s easier to add units<!--]--></td><td><!--[-->Limited flexibility, especially with hardware<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Fault Tolerance<!--]--></strong><!--]--></td><td><!--[-->Enhances fault tolerance by distributing workload<!--]--></td><td><!--[-->Limited fault tolerance as it relies on a single unit<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Performance<!--]--></strong><!--]--></td><td><!--[-->Performance can improve as workload is distributed<!--]--></td><td><!--[-->Performance may improve, but can hit hardware limits<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Single Point of Failure<!--]--></strong><!--]--></td><td><!--[-->Less prone to single points of failure<!--]--></td><td><!--[-->Potential single points of failure due to one unit<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Complexity<!--]--></strong><!--]--></td><td><!--[-->Can introduce complexity in managing distributed system<!--]--></td><td><!--[-->Simpler to manage as it involves fewer components<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Applicability<!--]--></strong><!--]--></td><td><!--[-->Ideal for handling massive scalability needs<!--]--></td><td><!--[-->Suitable for moderate scalability requirements<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Load Balancing<!--]--></strong><!--]--></td><td><!--[-->Requires load balancing mechanisms to distribute workload evenly across multiple units<!--]--></td><td><!--[-->Load balancing may be less critical as workload is managed by a single unit in most cases<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Machine Communication<!--]--></strong><!--]--></td><td><!--[-->Horizontal scaling relies heavily on network communication to coordinate tasks and share data between distributed machines<!--]--></td><td><!--[-->Vertical scaling primarily involves interprocess communication within a single machine or between closely coupled processes, minimizing the need for network communication<!--]--></td><!--]--></tr><!--]--></tbody><!--]--></table><h3><a><!--[-->Factors Affecting Scalability<!--]--></a></h3><p><!--[-->Below are the factors that affects the scalability with their explanation:<!--]--></p><table><!--[--><thead><!--[--><tr><!--[--><th><!--[-->Factors<!--]--></th><th><!--[--><!--]--></th><th><!--[--><!--]--></th><th><!--[--><!--]--></th><!--]--></tr><!--]--></thead><tbody><!--[--><tr><!--[--><td><!--[--><strong><!--[-->Performance Bottlenecks<!--]--></strong><!--]--></td><td><!--[-->Performance bottlenecks are points in a system where the performance is significantly lower than expected.<!--]--></td><td><!--[-->These bottlenecks can be caused by various factors such as slow database queries, inefficient algorithms, or resource contention.<!--]--></td><td><!--[-->Identifying and addressing these bottlenecks is crucial for scalability, as they can limit the system’s ability to handle increased load.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Resource Utilization<!--]--></strong><!--]--></td><td><!--[-->Efficiently using resources such as CPU, memory, and disk space is essential for scalability.<!--]--></td><td><!--[-->Inefficient resource utilization can lead to bottlenecks and limit the system’s ability to scale.<!--]--></td><td><!--[-->Optimizing resource usage through efficient algorithms, caching, and load balancing can help improve scalability.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Network Latency<!--]--></strong><!--]--></td><td><!--[-->Network latency refers to the delay in transmission of data over a network.<!--]--></td><td><!--[-->High network latency can impact the scalability of distributed systems by causing delays in communication between nodes.<!--]--></td><td><!--[-->Minimizing network latency through efficient network design, caching, and optimizing data transfer can improve scalability.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Data Storage and Access<!--]--></strong><!--]--></td><td><!--[-->The way data is stored and accessed can impact scalability.<!--]--></td><td><!--[-->Using scalable data storage solutions such as distributed databases or caching mechanisms can improve scalability.<!--]--></td><td><!--[-->Efficient data access patterns, indexing, and data partitioning strategies can also help improve scalability<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->Concurrency and Parallelism<!--]--></strong><!--]--></td><td><!--[-->Concurrency refers to the ability of a system to handle multiple tasks or requests simultaneously.<!--]--></td><td><!--[-->Parallelism refers to the ability to execute multiple tasks or requests concurrently.<!--]--></td><td><!--[-->Designing for concurrency and parallelism can improve scalability by allowing the system to handle multiple tasks or requests simultaneously, thus improving throughput and reducing response times.<!--]--></td><!--]--></tr><tr><!--[--><td><!--[--><strong><!--[-->System Architecture<!--]--></strong><!--]--></td><td><!--[-->The overall architecture of the system, including how components are structured and connected, can impact scalability.<!--]--></td><td><!--[-->Using a modular, loosely coupled architecture that can be scaled horizontally (adding more instances) or vertically (upgrading existing instances) can improve scalability.<!--]--></td><td><!--[-->Monolithic architectures, on the other hand, can be less scalable as they may require scaling the entire system even if only a specific component needs more resources.<!--]--></td><!--]--></tr><!--]--></tbody><!--]--></table><h2><a><!--[-->Components that help to increase Scalabilty<!--]--></a></h2><p><!--[-->Below are some of the main components that help to increase the scalability:<!--]--></p><blockquote><!--[--><h2><a><!--[-->1. Load Balancing<!--]--></a></h2><!--]--></blockquote><p><!--[-->Load balancing is the process of distributing traffic across multiple servers to ensure no single server becomes overwhelmed.<!--]--></p><img><blockquote><!--[--><p><!--[-->Example: Google employs load balancing extensively across its global infrastructure to distribute search queries and traffic evenly across its massive server farms.<!--]--></p><!--]--></blockquote><blockquote><!--[--><h2><a><!--[-->2. Caching<!--]--></a></h2><!--]--></blockquote><p><!--[-->Store frequently accessed data in-memory (like RAM) to reduce the load on the server or database. Implement caching can dramatically improve response times.<!--]--></p><img><blockquote><!--[--><p><!--[-->Example: Reddit uses caching to store frequently accessed content like hot posts and comments so that they can be served quickly without querying the database each time<!--]--></p><!--]--></blockquote><blockquote><!--[--><h2><a><!--[-->3. Content Delivery Networks (CDNs)<!--]--></a></h2><!--]--></blockquote><p><!--[-->Distribute static assets (images, videos, etc.) closer to users. This can reduce latency and result in faster load times.<!--]--></p><blockquote><!--[--><p><!--[-->Example: Cloudflare provides CDN services, speeding up website access for users worldwide by caching content in servers located close to users.<!--]--></p><!--]--></blockquote><img><blockquote><!--[--><h2><a><!--[-->4. Partitioning<!--]--></a></h2><!--]--></blockquote><p><!--[-->Split data or functionality across multiple nodes/servers to distribute workload and avoid bottlenecks.<!--]--></p><img><blockquote><!--[--><p><!--[-->Example: Amazon DynamoDB uses partitioning to distribute data and traffic for its NoSQL database service across many servers, ensuring fast performance and scalability.<!--]--></p><!--]--></blockquote><blockquote><!--[--><h2><a><!--[-->5. Asynchronous communication<!--]--></a></h2><!--]--></blockquote><p><!--[-->Defer long-running or non-critical tasks to background queues or message brokers. This ensures your main application remains responsive to users.<!--]--></p><blockquote><!--[--><p><!--[-->Example: Slack uses asynchronous communication for messaging. When a message is sent, the sender's interface doesn't freeze; it continues to be responsive while the message is processed and delivered in the background.<!--]--></p><!--]--></blockquote><blockquote><!--[--><h2><a><!--[-->6. Microservices Architecture<!--]--></a></h2><!--]--></blockquote><p><!--[-->Break down your application into smaller, independent services that can be scaled independently. This improves resilience and allows teams to work on specific components in parallel.<!--]--></p><img><blockquote><!--[--><p><!--[--><strong><!--[-->Example<!--]--></strong>: Uber has evolved its architecture into microservices to handle different functions like billing, notifications, and ride matching independently, allowing for efficient scaling and rapid development.<!--]--></p><!--]--></blockquote><blockquote><!--[--><h2><a><!--[-->7. Auto-Scaling<!--]--></a></h2><!--]--></blockquote><p><!--[-->Automatically adjust the number of active servers based on the current load. This ensures that the system can handle spikes in traffic without manual intervention<!--]--></p><img><blockquote><!--[--><p><!--[--><strong><!--[-->Example<!--]--></strong>: AWS Auto Scaling monitors applications and automatically adjusts capacity to maintain steady, predictable performance at the lowest possible cost.<!--]--></p><!--]--></blockquote><blockquote><!--[--><h2><a><!--[-->8. Multi-region Deployment<!--]--></a></h2><!--]--></blockquote><p><!--[-->Deploy the application in multiple data centers or cloud regions to reduce latency and improve redundancy.<!--]--></p><blockquote><!--[--><p><!--[--><strong><!--[-->Example<!--]--></strong>: Spotify uses multi-region deployments to ensure their music streaming service remains highly available and responsive to users all over the world, regardless of where they are located.<!--]--></p><!--]--></blockquote><h2><a><!--[-->Challenges and Trade-offs in Scalability<!--]--></a></h2><p><!--[-->Challenges and trade-offs in scalability are important considerations when designing and implementing scalable systems. Some of the key challenges and trade-offs include:<!--]--></p><ul><!--[--><li><!--[--><strong><!--[-->Cost vs. Scalability<!--]--></strong>: Scaling a system often involves adding more resources, which can increase costs. There is a trade-off between the cost of scaling and the benefits gained from improved performance and availability.<!--]--></li><li><!--[--><strong><!--[-->Complexity<!--]--></strong>: As systems scale, they tend to become more complex. This complexity can make it harder to maintain and troubleshoot the system, leading to increased operational overhead.
Consistency vs. Availability: In distributed systems, there is often a trade-off between consistency (ensuring that all nodes have the same view of the data) and availability (ensuring that the system remains operational even if some nodes fail). Achieving strong consistency can impact scalability, as it may require more coordination between nodes.<!--]--></li><li><!--[--><strong><!--[-->Latency vs. Throughput<!--]--></strong>: There is often a trade-off between latency (the time it takes for a request to be processed) and throughput (the number of requests that can be processed per unit of time). Optimizing for low latency may reduce throughput, and vice versa.<!--]--></li><li><!--[--><strong><!--[-->Data Partitioning Trade-offs<!--]--></strong>: Partitioning data can improve scalability by distributing it across multiple nodes. However, choosing the right partitioning strategy involves trade-offs, such as balancing the size of partitions, minimizing data movement, and ensuring data locality.<!--]--></li><li><!--[--><strong><!--[-->Trade-offs in Consistency Models<!--]--></strong>: Different consistency models, such as strong consistency, eventual consistency, and causal consistency, offer different trade-offs in terms of scalability, availability, and performance. Choosing the right consistency model depends on the specific requirements of the application.<!--]--></li><li><!--[--><strong><!--[-->Trade-offs in Caching<!--]--></strong>: Caching can improve performance and scalability by reducing latency and load on backend systems. However, caching introduces trade-offs, such as the trade-off between cache consistency and cache hit rate.<!--]--></li><!--]--></ul><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.
<a><!--[--><!--[-->YouTube Resource (gkcs)<!--]--><!--]--></a><!--]--></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[10 Proven Strategies to Optimize Web Application Performance]]></title>
            <link>https://rahulaher.netlify.app/articles/web-application-performance/</link>
            <guid>https://rahulaher.netlify.app/articles/web-application-performance/</guid>
            <pubDate>Mon, 01 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In today's fast-paced digital world, user experience plays a crucial role in the success of any web application. Users expect lightning-fast loading times and seamless interactions, and any lag or delay can lead to frustration and abandonment. Therefore, optimizing the performance of your web application is paramount. In this blog post, we'll explore ten proven strategies to enhance the performance of your web application, ensuring a smoother and more enjoyable user experience.]]></description>
            <content:encoded><![CDATA[<h2><a><!--[-->Introduction<!--]--></a></h2><p><!--[-->In today's fast-paced digital world, user experience plays a crucial role in the success of any web application. Users expect lightning-fast loading times and seamless interactions, and any lag or delay can lead to frustration and abandonment. Therefore, optimizing the performance of your web application is paramount. In this blog post, we'll explore ten proven strategies to enhance the performance of your web application, ensuring a smoother and more enjoyable user experience.<!--]--></p><h2><a><!--[-->1. Code Optimization<!--]--></a></h2><p><!--[-->Review and optimize your codebase to eliminate redundancies and inefficiencies. Cleaner, leaner code executes faster and reduces the load on servers.<!--]--></p><h2><a><!--[-->2. Minification and Compression<!--]--></a></h2><p><!--[-->Minify CSS, JavaScript, and HTML files to reduce their size, and utilize compression techniques like Gzip to further decrease data transfer time.<!--]--></p><h2><a><!--[-->3. Caching<!--]--></a></h2><p><!--[-->Implement caching mechanisms to store frequently accessed data temporarily, reducing the need for repeated server requests and improving response times.<!--]--></p><h2><a><!--[-->4. Image Optimization<!--]--></a></h2><p><!--[-->Optimize images by compressing them, using responsive image techniques, and implementing lazy loading to minimize load times without compromising quality.<!--]--></p><h2><a><!--[-->5. Database Optimization<!--]--></a></h2><p><!--[-->Optimize database queries, index frequently accessed fields, and utilize database caching to improve data retrieval speed and overall performance.<!--]--></p><h2><a><!--[-->6. Content Delivery Network (CDN)<!--]--></a></h2><p><!--[-->Leverage a CDN to distribute static assets across multiple servers geographically closer to users, reducing latency and improving load times.<!--]--></p><h2><a><!--[-->7. Asynchronous Loading<!--]--></a></h2><p><!--[-->Implement asynchronous loading techniques for non-blocking resource loading, such as loading JavaScript files asynchronously or deferring JavaScript execution until after the page has loaded.<!--]--></p><h2><a><!--[-->8. Reducing HTTP Requests<!--]--></a></h2><p><!--[-->Minimize the number of HTTP requests by combining CSS and JavaScript files, using CSS sprites for icons, and eliminating unnecessary redirects.<!--]--></p><h2><a><!--[-->9. Server Optimization<!--]--></a></h2><p><!--[-->Optimize server configurations, adjust server settings, utilize server-side caching, and implement load balancing to distribute traffic efficiently.<!--]--></p><h2><a><!--[-->10. Performance Monitoring and Testing<!--]--></a></h2><p><!--[-->Regularly monitor and test your application's performance using tools like Google PageSpeed Insights, Lighthouse, and monitoring tools to identify bottlenecks and areas for improvement.<!--]--></p><h2><a><!--[-->Conclusion<!--]--></a></h2><p><!--[-->By implementing these ten strategies, you can significantly enhance the performance of your web application, providing users with a smoother and more satisfying experience. Remember that optimization is an ongoing process, so continue to monitor and refine your approach to ensure optimal performance over time. With these proven techniques, you can stay ahead in the competitive landscape of web development and deliver exceptional user experiences.<!--]--></p><hr><p><!--[-->Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.<!--]--></p>]]></content:encoded>
        </item>
    </channel>
</rss>