[{"_path":"/learning/2024-06-4-oops","_dir":"learning","_draft":false,"_partial":false,"_locale":"","title":"OOP in JAVA","description":"OOP in Java stands for Object-Oriented Programming. It's a programming paradigm that revolves around the concept of \"objects,\" which can contain data, in the form of fields (attributes or properties), and code, in the form of procedures (methods or functions).","date":"2024-06-4","eventName":"Interview question's and answer's","location":"","slidesUrl":"https://github.com/AherRahul/portfolio-v1/blob/main/content/learning/2024-06-4-oops.md","type":"Interview preparation","language":"en","topics":["java","interview-prep","beginner-programming"],"readingTime":{"text":"10 min read","minutes":9.125,"time":547500,"words":1825},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"OOP in Java stands for Object-Oriented Programming. It's a programming paradigm that revolves around the concept of \"objects,\" which can contain data, in the form of fields (attributes or properties), and code, in the form of procedures (methods or functions)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Java is designed as an object-oriented language from the ground up. In Java, everything is treated as an object, including primitive data types (like integers and booleans), which are wrapped in corresponding classes (like Integer and Boolean)."}]},{"type":"element","tag":"h2","props":{"id":"q1-what-is-object-oriented-programming-oop-in-java"},"children":[{"type":"text","value":"Q1. What is Object-Oriented Programming (OOP) in Java?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Imagine you're building a virtual world, like a game or a simulation. In this world, everything is made up of \"objects.\" These objects have two main parts:"}]},{"type":"element","tag":"h3","props":{"id":"_1-attributes-data"},"children":[{"type":"text","value":"1. Attributes (Data)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Think of attributes as the characteristics or properties of an object. For example, a car object might have attributes like color, speed, and model."}]},{"type":"element","tag":"h3","props":{"id":"_2-behaviors-methods"},"children":[{"type":"text","value":"2. Behaviors (Methods)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Behaviors are the things an object can do or the actions it can perform. Continuing with the car example, behaviors could include methods like accelerate, brake, or honk."}]},{"type":"element","tag":"h3","props":{"id":"putting-it-together-with-oop"},"children":[{"type":"text","value":"Putting it Together with OOP"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In Object-Oriented Programming (OOP), we organize our code around these objects. Here's how it works:"}]},{"type":"element","tag":"h3","props":{"id":"_1-classes"},"children":[{"type":"text","value":"1. Classes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A class is like a blueprint or template for creating objects. It defines what attributes and behaviors an object will have. Using our car example, we might have a class called \"Car\" that defines attributes like color and behaviors like accelerate and brake."}]},{"type":"element","tag":"h3","props":{"id":"_2-objects"},"children":[{"type":"text","value":"2. Objects"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"An object is an instance of a class. It's like building an actual car using the blueprint from the \"Car\" class. Each object has its own set of attributes and can perform the behaviors defined by its class."}]},{"type":"element","tag":"h3","props":{"id":"key-oop-ideas"},"children":[{"type":"text","value":"Key OOP Ideas:"}]},{"type":"element","tag":"h3","props":{"id":"_1-encapsulation"},"children":[{"type":"text","value":"1. Encapsulation:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This is like putting things in separate boxes. It helps keep our stuff organized and safe. We use \"classes\" to make these boxes."}]}]},{"type":"element","tag":"h3","props":{"id":"_2-inheritance"},"children":[{"type":"text","value":"2. Inheritance:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Inheritance is like passing down traits in a family. We can make new boxes that automatically have some of the same things as older boxes. This saves time and helps avoid repeating ourselves."}]}]},{"type":"element","tag":"h3","props":{"id":"_3-polymorphism"},"children":[{"type":"text","value":"3. Polymorphism:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Polymorphism is a fancy word meaning \"many shapes.\" It's like having a button that acts differently depending on how you press it. This helps us reuse our boxes in different ways."}]}]},{"type":"element","tag":"h3","props":{"id":"_4-abstraction"},"children":[{"type":"text","value":"4. Abstraction:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Abstraction is like using a remote control. You don't need to know how it works inside to use it. We create simpler boxes to hide the complicated stuff."}]}]},{"type":"element","tag":"h3","props":{"id":"benefits-of-oop-in-java"},"children":[{"type":"text","value":"Benefits of OOP in Java:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Easy to Manage"}]},{"type":"text","value":": OOP helps keep our code organized, making it easier to understand and manage."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Saves Time"}]},{"type":"text","value":": With inheritance, we don't have to create everything from scratch. We can reuse what we've already made."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Flexible and Reusable"}]},{"type":"text","value":": OOP allows us to use our code in different ways without starting over."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Clear Structure"}]},{"type":"text","value":": OOP gives our code a clear structure, making it easier to read and work with."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In short, OOP in Java is like organizing a toolbox with different containers (objects) to hold our stuff and actions. It helps keep our code neat, saves time, and makes it easier to use and understand."}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"q2-what-is-class-in-object-oriented-programming-oop"},"children":[{"type":"text","value":"Q2. What is Class in Object-Oriented Programming (OOP)?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In Object-Oriented Programming (OOP), a class is like a blueprint or template for creating objects. It defines the properties (attributes) and behaviors (methods) that objects of that class will have."}]},{"type":"element","tag":"h3","props":{"id":"example-creating-a-simple-class"},"children":[{"type":"text","value":"Example: Creating a Simple Class"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's create a simple class called "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Car"}]},{"type":"text","value":". This class will represent cars and define some basic attributes and behaviors that cars have."}]},{"type":"element","tag":"h3","props":{"id":"attributes-properties"},"children":[{"type":"text","value":"Attributes (Properties)"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Model"}]},{"type":"text","value":": The model of the car (e.g., \"Toyota Corolla\")."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Color"}]},{"type":"text","value":": The color of the car (e.g., \"Red\")."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Year"}]},{"type":"text","value":": The manufacturing year of the car (e.g., 2020)."}]}]},{"type":"element","tag":"h3","props":{"id":"behaviors-methods"},"children":[{"type":"text","value":"Behaviors (Methods)"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Start"}]},{"type":"text","value":": Method to start the car."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Stop"}]},{"type":"text","value":": Method to stop the car."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Accelerate"}]},{"type":"text","value":": Method to increase the car's speed."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Brake"}]},{"type":"text","value":": Method to decrease the car's speed."}]}]},{"type":"element","tag":"h3","props":{"id":"implementation-in-java"},"children":[{"type":"text","value":"Implementation in Java"}]},{"type":"element","tag":"pre","props":{"className":"language-java shiki shiki-themes vitesse-dark","code":"public class Car {\n    // Attributes\n    private String model;\n    private String color;\n    private int year;\n\n    // Constructor\n    public Car(String model, String color, int year) {\n        this.model = model;\n        this.color = color;\n        this.year = year;\n    }\n\n    // Methods\n    public void start() {\n        System.out.println(\"Starting the \" + color + \" \" + model);\n    }\n\n    public void stop() {\n        System.out.println(\"Stopping the \" + color + \" \" + model);\n    }\n\n    public void accelerate() {\n        System.out.println(\"Accelerating the \" + color + \" \" + model);\n    }\n\n    public void brake() {\n        System.out.println(\"Applying brakes to the \" + color + \" \" + model);\n    }\n}\n","language":"java","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"public class Car {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Attributes\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    private String model;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    private String color;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    private int year;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Constructor\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public Car(String model, String color, int year) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        this.model = model;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        this.color = color;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        this.year = year;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Methods\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":15},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public void start() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":16},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Starting the \" + color + \" \" + model);\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":17},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":18},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":19},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public void stop() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":20},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Stopping the \" + color + \" \" + model);\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":21},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":22},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":23},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public void accelerate() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":24},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Accelerating the \" + color + \" \" + model);\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":25},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":26},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":27},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public void brake() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":28},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Applying brakes to the \" + color + \" \" + model);\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":29},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":30},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"q3-what-is-an-object-create-an-object-ob-above-class"},"children":[{"type":"text","value":"Q3. What is an Object? create an object ob above class."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In programming, an object is a self-contained unit that contains both data and methods (functions) that operate on the data. Think of an object as a real-world thing that has properties (attributes) and behaviors (methods)."}]},{"type":"element","tag":"h3","props":{"id":"key-concepts"},"children":[{"type":"text","value":"Key Concepts:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Attributes (Properties):"}]},{"type":"text","value":" Characteristics of the object (e.g., color, model, year)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Methods (Functions):"}]},{"type":"text","value":" Actions that the object can perform (e.g., drive, stop, honk)."}]}]},{"type":"element","tag":"h3","props":{"id":"example-car-class-object-in-java"},"children":[{"type":"text","value":"Example: Car Class Object in Java"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's create a simple object for a car class in Java."}]},{"type":"element","tag":"h3","props":{"id":"step-1-define-the-car-class"},"children":[{"type":"text","value":"Step 1: Define the Car Class"}]},{"type":"element","tag":"pre","props":{"className":"language-java shiki shiki-themes vitesse-dark","code":"// Main method to test the Car class\npublic static void main(String[] args) {\n    // Step 2: Create an Object from the Car Class\n    Car myCar = new Car(\"Toyota\", \"Corolla\", 2020, \"Red\");\n\n    // Step 3: Use the Object\n    System.out.println(myCar.drive());  // Output: The Red Toyota Corolla is driving.\n    System.out.println(myCar.stop());   // Output: The Red Toyota Corolla has stopped.\n    System.out.println(myCar.honk());   // Output: The Red Toyota Corolla is honking.\n}\n","language":"java","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// Main method to test the Car class\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"public static void main(String[] args) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Step 2: Create an Object from the Car Class\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    Car myCar = new Car(\"Toyota\", \"Corolla\", 2020, \"Red\");\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Step 3: Use the Object\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    System.out.println(myCar.drive());  // Output: The Red Toyota Corolla is driving.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    System.out.println(myCar.stop());   // Output: The Red Toyota Corolla has stopped.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    System.out.println(myCar.honk());   // Output: The Red Toyota Corolla is honking.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"q4-what-is-abstraction"},"children":[{"type":"text","value":"Q4. What is Abstraction?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Abstraction is a fundamental concept in object-oriented programming that focuses on hiding the complex implementation details and showing only the essential features of an object. It helps in reducing complexity and allows programmers to interact with objects at a high level without needing to understand their inner workings."}]},{"type":"element","tag":"h3","props":{"id":"key-concepts-1"},"children":[{"type":"text","value":"Key Concepts:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Hiding Complexity:"}]},{"type":"text","value":" Abstraction hides the internal details and shows only the necessary parts."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Essential Features:"}]},{"type":"text","value":" It exposes only the functionalities that are important for the user."}]}]},{"type":"element","tag":"h3","props":{"id":"real-life-example-driving-a-car"},"children":[{"type":"text","value":"Real-Life Example: Driving a Car"}]},{"type":"element","tag":"h3","props":{"id":"real-life-scenario"},"children":[{"type":"text","value":"Real-Life Scenario:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Consider the process of driving a car. When you drive a car, you interact with various controls like the steering wheel, accelerator, brake, and gear shift. You don't need to understand the internal workings of the car's engine, transmission, or braking system to drive it."}]},{"type":"element","tag":"h3","props":{"id":"abstraction-in-the-car"},"children":[{"type":"text","value":"Abstraction in the Car:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Steering Wheel:"}]},{"type":"text","value":" You turn the steering wheel to change the direction of the car."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Accelerator:"}]},{"type":"text","value":" You press the accelerator to increase the car's speed."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Brake:"}]},{"type":"text","value":" You press the brake to slow down or stop the car."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Gear Shift:"}]},{"type":"text","value":" You change gears to control the speed and power of the car."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"These controls are the abstracted interfaces that allow you to drive the car without knowing the detailed mechanisms behind each action. The car's complex engineering details are hidden from the driver, providing a simple and easy-to-use interface."}]},{"type":"element","tag":"h3","props":{"id":"abstraction-in-programming"},"children":[{"type":"text","value":"Abstraction in Programming:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In programming, abstraction works similarly. Let's consider a simple example in Java."}]},{"type":"element","tag":"pre","props":{"className":"language-java shiki shiki-themes vitesse-dark","code":"// Abstract class representing a generic vehicle\nabstract class Vehicle {\n    // Abstract methods (no implementation)\n    abstract void start();\n    abstract void stop();\n}\n\n// Concrete class representing a Car\nclass Car extends Vehicle {\n    // Implementing the abstract methods\n    @Override\n    void start() {\n        System.out.println(\"The car is starting.\");\n    }\n\n    @Override\n    void stop() {\n        System.out.println(\"The car has stopped.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an object of the Car class\n        Vehicle myCar = new Car();\n        \n        // Using the abstracted methods\n        myCar.start();  // Output: The car is starting.\n        myCar.stop();   // Output: The car has stopped.\n    }\n}\n","language":"java","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// Abstract class representing a generic vehicle\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"abstract class Vehicle {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Abstract methods (no implementation)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    abstract void start();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    abstract void stop();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// Concrete class representing a Car\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"class Car extends Vehicle {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Implementing the abstract methods\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    @Override\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    void start() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"The car is starting.\");\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":15},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":16},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    @Override\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":17},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    void stop() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":18},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"The car has stopped.\");\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":19},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":20},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":21},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":22},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"public class Main {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":23},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public static void main(String[] args) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":24},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        // Creating an object of the Car class\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":25},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        Vehicle myCar = new Car();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":26},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        \n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":27},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        // Using the abstracted methods\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":28},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        myCar.start();  // Output: The car is starting.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":29},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        myCar.stop();   // Output: The car has stopped.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":30},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":31},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"q5-what-is-encapsulation"},"children":[{"type":"text","value":"Q5. What is Encapsulation?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Encapsulation is a key idea in programming where we keep data (attributes) and the methods (functions) that work on the data together in one place, called a class. It also means hiding some parts of the object to protect it from outside interference and misuse."}]},{"type":"element","tag":"h3","props":{"id":"key-concepts-2"},"children":[{"type":"text","value":"Key Concepts:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Bundling:"}]},{"type":"text","value":" Keeping data and methods together in one place (class)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Hiding:"}]},{"type":"text","value":" Using access controls to hide the internal details and protect the data."}]}]},{"type":"element","tag":"h3","props":{"id":"real-life-example-medical-capsule"},"children":[{"type":"text","value":"Real-Life Example: Medical Capsule"}]},{"type":"element","tag":"h3","props":{"id":"real-life-scenario-1"},"children":[{"type":"text","value":"Real-Life Scenario:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Think about a medical capsule. It contains medicine inside, and its outer shell protects the medicine and controls how it gets released into the body. The person taking the capsule doesn't need to know how it works inside; they just need to know how to take it."}]},{"type":"element","tag":"h3","props":{"id":"encapsulation-in-the-capsule"},"children":[{"type":"text","value":"Encapsulation in the Capsule:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Bundling:"}]},{"type":"text","value":" The capsule keeps the medicine (data) and the way it releases the medicine (method) together."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Hiding:"}]},{"type":"text","value":" The outer shell hides and protects the medicine inside."}]}]},{"type":"element","tag":"h3","props":{"id":"encapsulation-in-programming"},"children":[{"type":"text","value":"Encapsulation in Programming:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In programming, encapsulation works similarly. Let's look at a simple example in Java."}]},{"type":"element","tag":"pre","props":{"className":"language-java shiki shiki-themes vitesse-dark","code":"public class Capsule {\n    // Private attributes (data)\n    private String medicine;\n    private double dosage;\n\n    // Constructor\n    public Capsule(String medicine, double dosage) {\n        this.medicine = medicine;\n        this.dosage = dosage;\n    }\n\n    // Public method to get the dosage\n    public double getDosage() {\n        return dosage;\n    }\n\n    // Public method to take the medicine\n    public void takeMedicine() {\n        System.out.println(\"Taking \" + dosage + \"mg of \" + medicine);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Creating an object of the Capsule class\n        Capsule myCapsule = new Capsule(\"Paracetamol\", 500.0);\n\n        // Using the public methods to interact with the capsule\n        System.out.println(\"Dosage: \" + myCapsule.getDosage() + \"mg\");  // Output: Dosage: 500.0mg\n        myCapsule.takeMedicine();  // Output: Taking 500.0mg of Paracetamol\n    }\n}\n","language":"java","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"public class Capsule {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Private attributes (data)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    private String medicine;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    private double dosage;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Constructor\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public Capsule(String medicine, double dosage) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        this.medicine = medicine;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        this.dosage = dosage;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Public method to get the dosage\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public double getDosage() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        return dosage;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":15},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":16},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":17},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Public method to take the medicine\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":18},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public void takeMedicine() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":19},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Taking \" + dosage + \"mg of \" + medicine);\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":20},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":21},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":22},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":23},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"public class Main {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":24},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public static void main(String[] args) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":25},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        // Creating an object of the Capsule class\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":26},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        Capsule myCapsule = new Capsule(\"Paracetamol\", 500.0);\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":27},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":28},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        // Using the public methods to interact with the capsule\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":29},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Dosage: \" + myCapsule.getDosage() + \"mg\");  // Output: Dosage: 500.0mg\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":30},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        myCapsule.takeMedicine();  // Output: Taking 500.0mg of Paracetamol\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":31},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":32},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"q6-what-is-the-relationship-between-abstraction-and-encapsulation"},"children":[{"type":"text","value":"Q6. What is the relationship between Abstraction and Encapsulation?"}]},{"type":"element","tag":"h3","props":{"id":"what-is-abstraction"},"children":[{"type":"text","value":"What is Abstraction?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Abstraction is about showing only the important details and hiding the complex parts. It helps to focus on what an object does rather than how it does it."}]},{"type":"element","tag":"h3","props":{"id":"what-is-encapsulation"},"children":[{"type":"text","value":"What is Encapsulation?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Encapsulation is about bundling the data (attributes) and methods (functions) that operate on the data into a single unit (class) and hiding the internal details from the outside world. It protects the data from unauthorized access and misuse."}]},{"type":"element","tag":"h3","props":{"id":"relationship-between-abstraction-and-encapsulation"},"children":[{"type":"text","value":"Relationship Between Abstraction and Encapsulation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Abstraction and encapsulation are closely related concepts in object-oriented programming, but they serve different purposes:"}]},{"type":"element","tag":"h4","props":{"id":"_1-abstraction-focuses-on-hiding-complexity"},"children":[{"type":"text","value":"1. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Abstraction Focuses on Hiding Complexity"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Goal:"}]},{"type":"text","value":" To simplify interaction by showing only the necessary features."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Example:"}]},{"type":"text","value":" When you drive a car, you only interact with the steering wheel, pedals, and gear shift. You don’t need to know the inner workings of the engine."}]}]},{"type":"element","tag":"h4","props":{"id":"_2-encapsulation-focuses-on-protecting-data"},"children":[{"type":"text","value":"2. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Encapsulation Focuses on Protecting Data"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Goal:"}]},{"type":"text","value":" To keep data safe by bundling it with methods and hiding it from outside access."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Example:"}]},{"type":"text","value":" The car’s internal systems (engine, transmission) are encapsulated, meaning you can't directly interact with them; you only use the controls provided (steering wheel, pedals)."}]}]},{"type":"element","tag":"h3","props":{"id":"how-they-work-together"},"children":[{"type":"text","value":"How They Work Together:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Abstraction"}]},{"type":"text","value":" uses "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"encapsulation"}]},{"type":"text","value":" to hide the complex details."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Encapsulation"}]},{"type":"text","value":" provides the means to achieve "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"abstraction"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h3","props":{"id":"real-life-example-car"},"children":[{"type":"text","value":"Real-Life Example: Car"}]},{"type":"element","tag":"h4","props":{"id":"abstraction"},"children":[{"type":"text","value":"Abstraction:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"What You See:"}]},{"type":"text","value":" Steering wheel, pedals, gear shift."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"What It Does:"}]},{"type":"text","value":" Allows you to drive the car."}]}]},{"type":"element","tag":"h4","props":{"id":"encapsulation"},"children":[{"type":"text","value":"Encapsulation:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"How It's Built:"}]},{"type":"text","value":" The car's internal systems (engine, transmission) are hidden and protected."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Why It's Done:"}]},{"type":"text","value":" To prevent damage and ensure safety."}]}]},{"type":"element","tag":"h3","props":{"id":"programming-example"},"children":[{"type":"text","value":"Programming Example:"}]},{"type":"element","tag":"pre","props":{"className":"language-java shiki shiki-themes vitesse-dark","code":"// Abstraction: Interface showing only necessary methods\ninterface Vehicle {\n    void start();\n    void stop();\n}\n\n// Encapsulation: Implementation hiding the complex details\npublic class Car implements Vehicle {\n    // Private attributes (data)\n    private String engineStatus;\n\n    // Constructor\n    public Car() {\n        this.engineStatus = \"off\";\n    }\n\n    // Public methods (abstraction)\n    @Override\n    public void start() {\n        engineStatus = \"on\";\n        System.out.println(\"Car is starting.\");\n    }\n\n    @Override\n    public void stop() {\n        engineStatus = \"off\";\n        System.out.println(\"Car has stopped.\");\n    }\n\n    // Private method (encapsulation)\n    private void checkEngine() {\n        System.out.println(\"Checking engine status: \" + engineStatus);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Using abstraction to interact with the car\n        Vehicle myCar = new Car();\n        myCar.start();\n        myCar.stop();\n    }\n}\n","language":"java","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// Abstraction: Interface showing only necessary methods\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"interface Vehicle {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    void start();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    void stop();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"// Encapsulation: Implementation hiding the complex details\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"public class Car implements Vehicle {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":9},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Private attributes (data)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":10},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    private String engineStatus;\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":11},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":12},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Constructor\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":13},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public Car() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":14},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        this.engineStatus = \"off\";\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":15},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":16},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":17},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Public methods (abstraction)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":18},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    @Override\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":19},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public void start() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":20},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        engineStatus = \"on\";\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":21},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Car is starting.\");\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":22},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":23},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":24},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    @Override\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":25},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public void stop() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":26},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        engineStatus = \"off\";\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":27},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Car has stopped.\");\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":28},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":29},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":30},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    // Private method (encapsulation)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":31},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    private void checkEngine() {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":32},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        System.out.println(\"Checking engine status: \" + engineStatus);\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":33},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":34},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":35},"children":[{"type":"element","tag":"span","props":{"emptyLinePlaceholder":true},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":36},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"public class Main {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":37},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    public static void main(String[] args) {\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":38},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        // Using abstraction to interact with the car\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":39},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        Vehicle myCar = new Car();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":40},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        myCar.start();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":41},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"        myCar.stop();\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":42},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    }\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":43},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"}\n"}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it."}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"q1-what-is-object-oriented-programming-oop-in-java","depth":2,"text":"Q1. What is Object-Oriented Programming (OOP) in Java?","children":[{"id":"_1-attributes-data","depth":3,"text":"1. Attributes (Data)"},{"id":"_2-behaviors-methods","depth":3,"text":"2. Behaviors (Methods)"},{"id":"putting-it-together-with-oop","depth":3,"text":"Putting it Together with OOP"},{"id":"_1-classes","depth":3,"text":"1. Classes"},{"id":"_2-objects","depth":3,"text":"2. Objects"},{"id":"key-oop-ideas","depth":3,"text":"Key OOP Ideas:"},{"id":"_1-encapsulation","depth":3,"text":"1. Encapsulation:"},{"id":"_2-inheritance","depth":3,"text":"2. Inheritance:"},{"id":"_3-polymorphism","depth":3,"text":"3. Polymorphism:"},{"id":"_4-abstraction","depth":3,"text":"4. Abstraction:"},{"id":"benefits-of-oop-in-java","depth":3,"text":"Benefits of OOP in Java:"}]},{"id":"q2-what-is-class-in-object-oriented-programming-oop","depth":2,"text":"Q2. What is Class in Object-Oriented Programming (OOP)?","children":[{"id":"example-creating-a-simple-class","depth":3,"text":"Example: Creating a Simple Class"},{"id":"attributes-properties","depth":3,"text":"Attributes (Properties)"},{"id":"behaviors-methods","depth":3,"text":"Behaviors (Methods)"},{"id":"implementation-in-java","depth":3,"text":"Implementation in Java"}]},{"id":"q3-what-is-an-object-create-an-object-ob-above-class","depth":2,"text":"Q3. What is an Object? create an object ob above class.","children":[{"id":"key-concepts","depth":3,"text":"Key Concepts:"},{"id":"example-car-class-object-in-java","depth":3,"text":"Example: Car Class Object in Java"},{"id":"step-1-define-the-car-class","depth":3,"text":"Step 1: Define the Car Class"}]},{"id":"q4-what-is-abstraction","depth":2,"text":"Q4. What is Abstraction?","children":[{"id":"key-concepts-1","depth":3,"text":"Key Concepts:"},{"id":"real-life-example-driving-a-car","depth":3,"text":"Real-Life Example: Driving a Car"},{"id":"real-life-scenario","depth":3,"text":"Real-Life Scenario:"},{"id":"abstraction-in-the-car","depth":3,"text":"Abstraction in the Car:"},{"id":"abstraction-in-programming","depth":3,"text":"Abstraction in Programming:"}]},{"id":"q5-what-is-encapsulation","depth":2,"text":"Q5. What is Encapsulation?","children":[{"id":"key-concepts-2","depth":3,"text":"Key Concepts:"},{"id":"real-life-example-medical-capsule","depth":3,"text":"Real-Life Example: Medical Capsule"},{"id":"real-life-scenario-1","depth":3,"text":"Real-Life Scenario:"},{"id":"encapsulation-in-the-capsule","depth":3,"text":"Encapsulation in the Capsule:"},{"id":"encapsulation-in-programming","depth":3,"text":"Encapsulation in Programming:"}]},{"id":"q6-what-is-the-relationship-between-abstraction-and-encapsulation","depth":2,"text":"Q6. What is the relationship between Abstraction and Encapsulation?","children":[{"id":"what-is-abstraction","depth":3,"text":"What is Abstraction?"},{"id":"what-is-encapsulation","depth":3,"text":"What is Encapsulation?"},{"id":"relationship-between-abstraction-and-encapsulation","depth":3,"text":"Relationship Between Abstraction and Encapsulation"},{"id":"how-they-work-together","depth":3,"text":"How They Work Together:"},{"id":"real-life-example-car","depth":3,"text":"Real-Life Example: Car"},{"id":"programming-example","depth":3,"text":"Programming Example:"}]}]}},"_type":"markdown","_id":"content:learning:2024-06-4-oops.md","_source":"content","_file":"learning/2024-06-4-oops.md","_stem":"learning/2024-06-4-oops","_extension":"md","sitemap":{"loc":"/learning/2024-06-4-oops"}}]