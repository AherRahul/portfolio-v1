[{"_path":"/articles/api-architecture","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"API Architecture - Design Best Practices for REST APIs","description":"REST which stands for Representational State Transfer is an architectural style that governs how APIs are designed and built. REST’s popularity and ease of implementation make it the most preferred API architectural style for modern-day software development as compared to other protocols such as SOAP (simple object access protocol). REST APIs or RESTful web services have become the backbone for efficient communication between client and server in modern-day software development. However, to build efficient and robust REST APIs, it is crucial to follow some standard best practices. In this blog, we’ll explore REST API best practices that can help you build scalable, maintainable, secure, and robust APIs.","slidesUrl":"https://github.com/AherRahul/portfolio-v1/blob/main/content/articles/api-architecture.md","dateModified":"2024-05-26","datePublished":"2024-05-26","showOnArticles":true,"topics":["system-design","aws","lld"],"readingTime":{"text":"4 min read","minutes":3.375,"time":202500,"words":675},"_type":"markdown","_id":"content:articles:api-architecture.md","_source":"content","_file":"articles/api-architecture.md","_stem":"articles/api-architecture","_extension":"md","sitemap":{"loc":"/articles/api-architecture"}},{"_path":"/articles/eventual-vs-strong-consistency-in-distributed-databases","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"Eventual vs Strong Consistency in Distributed Databases","description":"While consistency is vital, it’s essential to understand that achieving strong consistency in distributed systems can come at the expense of increased latency and reduced availability. Strong consistency may require additional coordination mechanisms that slow down operations. Therefore, choosing the appropriate consistency model involves striking a balance between data correctness and system performance, based on the specific requirements of the application and use case. Different systems may opt for eventual consistency or other weaker consistency models if absolute real-time consistency is not necessary for their functionality.","slidesUrl":"https://github.com/AherRahul/portfolio-v1/blob/main/content/articles/eventual-vs-strong-consistency-in-distributed-databases.md","dateModified":"2024-05-25","datePublished":"2024-05-25","showOnArticles":true,"topics":["system-design","aws","lld"],"readingTime":{"text":"4 min read","minutes":3.785,"time":227100,"words":757},"_type":"markdown","_id":"content:articles:eventual-vs-strong-consistency-in-distributed-databases.md","_source":"content","_file":"articles/eventual-vs-strong-consistency-in-distributed-databases.md","_stem":"articles/eventual-vs-strong-consistency-in-distributed-databases","_extension":"md","sitemap":{"loc":"/articles/eventual-vs-strong-consistency-in-distributed-databases","images":[{"loc":"https://hackernoon.imgix.net/hn-images/1*PiQhvAicV4TUXohXNdNMuA.png?w=640&q=75&auto=format%201x,%20https://hackernoon.imgix.net/hn-images/1*PiQhvAicV4TUXohXNdNMuA.png?w=1200&q=75&auto=format%202x"},{"loc":"https://hackernoon.imgix.net/hn-images/1*PFgHx8UYLhk3L5ePPmailQ.png?w=1200&q=75&auto=format"},{"loc":"https://hackernoon.imgix.net/hn-images/1*klFtrGr8U-XmyiZ1CJx-0w.png?w=1200&q=75&auto=format"}]}},{"_path":"/articles/rate-limiting","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"Rate Limiting","description":"Rate limiting runs within an application, rather than running on the web server itself. Typically, rate limiting is based on tracking the IP addresses that requests are coming from, and tracking how much time elapses between each request. The IP address is the main way an application identifies who or what is making the request. A rate limiting solution measures the amount of time between each request from each IP address, and also measures the number of requests within a specified timeframe. If there are too many requests from a single IP within the given timeframe, the rate limiting solution will not fulfill the IP address's requests for a certain amount of time.","slidesUrl":"https://github.com/AherRahul/portfolio-v1/blob/main/content/articles/rate-limiting.md","dateModified":"2024-05-24","datePublished":"2024-05-24","showOnArticles":true,"topics":["system-design","aws","lld"],"readingTime":{"text":"8 min read","minutes":7.625,"time":457500,"words":1525},"_type":"markdown","_id":"content:articles:rate-limiting.md","_source":"content","_file":"articles/rate-limiting.md","_stem":"articles/rate-limiting","_extension":"md","sitemap":{"loc":"/articles/rate-limiting"}},{"_path":"/articles/consistent-hashing-algorithm","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"Consistent Hashing Algorithm","description":"Consistent hashing is a distributed hashing technique used in computer science and distributed systems to achieve load balancing and minimize the need for rehashing when the number of nodes in a system changes. It is particularly useful in distributed hash tables (DHTs), distributed caching systems, and other distributed storage systems. Consistent hashing is a technique used in computer systems to distribute keys (e.g., cache keys) uniformly across a cluster of nodes (e.g., cache servers). The goal is to minimize the number of keys that need to be moved when nodes are added or removed from the cluster, thus reducing the impact of these changes on the overall system.","slidesUrl":"https://github.com/AherRahul/portfolio-v1/blob/main/content/articles/consistent-hashing-algorithm.md","dateModified":"2024-05-23","datePublished":"2024-05-23","showOnArticles":true,"topics":["system-design","aws","lld"],"readingTime":{"text":"17 min read","minutes":16.655,"time":999300,"words":3331},"_type":"markdown","_id":"content:articles:consistent-hashing-algorithm.md","_source":"content","_file":"articles/consistent-hashing-algorithm.md","_stem":"articles/consistent-hashing-algorithm","_extension":"md","sitemap":{"loc":"/articles/consistent-hashing-algorithm","images":[{"loc":"https://highscalability.com/content/images/2024/02/yle8ukj.png"},{"loc":"https://systemdesign.one/consistent-hashing-explained/dynamic-hashing.webp"},{"loc":"https://highscalability.com/content/images/2024/02/lch5ja1-__squarespace_cacheversion-1675880048742.png"},{"loc":"https://systemdesign.one/consistent-hashing-explained/single-global-cache.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/key-range-partitioning.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/static-hash-partitioning.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/static-hash-partitioning-node-failure.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/static-hash-partitioning-node-added.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Static-hash-partitioning-data-movement.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/consistent-hashing.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Hash-function-mapping.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hash-ring.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-Positioning-the-nodes-on-the-hash-ring.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-Node-position.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-Storing-data-object.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-Retrieving-data-object.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-Deletion-of-node.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-Addition-of-node.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-Non-uniform-positioning-nodes.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-Virtual-nodes.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Binary-search-tree-storing-node-positions.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Insertion-of-data-object.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Insertion-of-node.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Deletion-of-node.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-example-Discord.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-example-Amazon-Dynamo.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-example-Vimeo.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Consistent-hashing-example-Netflix.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Multi-probe-consistent-hashing.webp"},{"loc":"https://systemdesign.one/consistent-hashing-explained/Bounded-load-consistent-hashing.webp"}]}}]