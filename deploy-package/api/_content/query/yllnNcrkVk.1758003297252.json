[{"_path":"/articles/cap-theorem","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"CAP Theorem for Databases: Consistency, Availability & Partition Tolerance","description":"In computer science, the CAP theorem, sometimes called CAP theorem model or Brewer’s theorem after its originator, Eric Brewer, states that any distributed system or data store can simultaneously provide only two of three guarantees: consistency, availability, and partition tolerance (CAP). During times of normal operations, a data store covers all three. However, according to the CAP theorem, a distributed database system can provide either consistency or availability when it experiences a network failure. In other words, in case of a network failure, it’s a tradeoff between consistency or availability, and that choice must be made in advance.","slidesUrl":"https://github.com/AherRahul/portfolio-v1/blob/main/content/articles/cap-theorem.md","dateModified":"2024-05-21","datePublished":"2024-05-21","showOnArticles":true,"topics":["system-design","aws","lld"],"readingTime":{"text":"13 min read","minutes":12.155,"time":729300,"words":2431},"_type":"markdown","_id":"content:articles:cap-theorem.md","_source":"content","_file":"articles/cap-theorem.md","_stem":"articles/cap-theorem","_extension":"md","sitemap":{"loc":"/articles/cap-theorem","images":[{"loc":"https://s7280.pcdn.co/wp-content/uploads/2020/12/key-65.png"}]}},{"_path":"/articles/eventual-vs-strong-consistency-in-distributed-databases","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"Eventual vs Strong Consistency in Distributed Databases","description":"While consistency is vital, it’s essential to understand that achieving strong consistency in distributed systems can come at the expense of increased latency and reduced availability. Strong consistency may require additional coordination mechanisms that slow down operations. Therefore, choosing the appropriate consistency model involves striking a balance between data correctness and system performance, based on the specific requirements of the application and use case. Different systems may opt for eventual consistency or other weaker consistency models if absolute real-time consistency is not necessary for their functionality.","slidesUrl":"https://github.com/AherRahul/portfolio-v1/blob/main/content/articles/eventual-vs-strong-consistency-in-distributed-databases.md","dateModified":"2024-05-25","datePublished":"2024-05-25","showOnArticles":true,"topics":["system-design","aws","lld"],"readingTime":{"text":"4 min read","minutes":3.785,"time":227100,"words":757},"_type":"markdown","_id":"content:articles:eventual-vs-strong-consistency-in-distributed-databases.md","_source":"content","_file":"articles/eventual-vs-strong-consistency-in-distributed-databases.md","_stem":"articles/eventual-vs-strong-consistency-in-distributed-databases","_extension":"md","sitemap":{"loc":"/articles/eventual-vs-strong-consistency-in-distributed-databases","images":[{"loc":"https://hackernoon.imgix.net/hn-images/1*PiQhvAicV4TUXohXNdNMuA.png?w=640&q=75&auto=format%201x,%20https://hackernoon.imgix.net/hn-images/1*PiQhvAicV4TUXohXNdNMuA.png?w=1200&q=75&auto=format%202x"},{"loc":"https://hackernoon.imgix.net/hn-images/1*PFgHx8UYLhk3L5ePPmailQ.png?w=1200&q=75&auto=format"},{"loc":"https://hackernoon.imgix.net/hn-images/1*klFtrGr8U-XmyiZ1CJx-0w.png?w=1200&q=75&auto=format"}]}}]