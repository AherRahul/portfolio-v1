[{"data":1,"prerenderedAt":1622},["ShallowReactive",2],{"content-query-qwX4sknEFX":3,"content-query-Dsm8AI6srG":1618,"content-query-x2fwDBPEo5":1619,"content-query-4Dadz7mQ8P":1620,"content-query-FCCwjBifTr":1621},[4,923],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"projectGitHubLink":11,"projectDemoLink":12,"topics":13,"readingTime":15,"body":20,"_type":916,"_id":917,"_source":918,"_file":919,"_stem":920,"_extension":921,"sitemap":922},"/projects/chat-app-fullstack","projects",false,"","Chat Application with NodeJS, Angular, and Ionic","This Full-Stack Real-Time Chat Application demonstrates how to build a fully functional web and mobile chat app using modern technologies like NodeJS, Angular, Ionic, and MongoDB. The app allows users to engage in live conversations with real-time messaging, upload images, and interact with others via a seamless, interactive interface across both web and mobile platforms.","https://github.com/AherRahul/Angular-Ionic-NodeJs-ChatApp","https://rds-chat-app.netlify.app/",[14],"html",{"text":16,"minutes":17,"time":18,"words":19},"6 min read",5.095,305700,1019,{"type":21,"children":22,"toc":875},"root",[23,32,73,79,133,155,161,236,242,254,288,299,311,322,334,345,364,375,387,398,428,439,455,466,478,489,506,512,522,554,564,596,607,617,643,654,664,675,681,686,748,754,795,823,829,856,861,866,870],{"type":24,"tag":25,"props":26,"children":28},"element","h2",{"id":27},"building-a-full-stack-chat-application-with-nodejs-angular-and-ionic",[29],{"type":30,"value":31},"text","Building a Full-Stack Chat Application with NodeJS, Angular, and Ionic",{"type":24,"tag":33,"props":34,"children":35},"p",{},[36,38,44,46,51,53,58,59,64,66,71],{"type":30,"value":37},"Have you ever wanted to build your own web and mobile application with real-time functionality? Perhaps you've tried creating an app with chat features but needed more advanced functionalities? If so, this blog post is for you! Letâ€™s dive into how I built a real-time ",{"type":24,"tag":39,"props":40,"children":41},"strong",{},[42],{"type":30,"value":43},"Full-Stack Chat Application",{"type":30,"value":45}," using ",{"type":24,"tag":39,"props":47,"children":48},{},[49],{"type":30,"value":50},"NodeJS",{"type":30,"value":52},", ",{"type":24,"tag":39,"props":54,"children":55},{},[56],{"type":30,"value":57},"Angular",{"type":30,"value":52},{"type":24,"tag":39,"props":60,"children":61},{},[62],{"type":30,"value":63},"Ionic",{"type":30,"value":65},", and a ",{"type":24,"tag":39,"props":67,"children":68},{},[69],{"type":30,"value":70},"MongoDB",{"type":30,"value":72}," backend.",{"type":24,"tag":25,"props":74,"children":76},{"id":75},"project-overview",[77],{"type":30,"value":78},"Project Overview",{"type":24,"tag":33,"props":80,"children":81},{},[82,84,89,91,96,98,103,105,109,110,115,116,120,121,125,127,131],{"type":30,"value":83},"This project focuses on building a ",{"type":24,"tag":39,"props":85,"children":86},{},[87],{"type":30,"value":88},"real-time chat application",{"type":30,"value":90}," that works seamlessly across ",{"type":24,"tag":39,"props":92,"children":93},{},[94],{"type":30,"value":95},"web",{"type":30,"value":97}," and ",{"type":24,"tag":39,"props":99,"children":100},{},[101],{"type":30,"value":102},"mobile platforms",{"type":30,"value":104}," using the same backend. By leveraging modern technologies like ",{"type":24,"tag":39,"props":106,"children":107},{},[108],{"type":30,"value":50},{"type":30,"value":52},{"type":24,"tag":39,"props":111,"children":112},{},[113],{"type":30,"value":114},"Express",{"type":30,"value":52},{"type":24,"tag":39,"props":117,"children":118},{},[119],{"type":30,"value":70},{"type":30,"value":52},{"type":24,"tag":39,"props":122,"children":123},{},[124],{"type":30,"value":57},{"type":30,"value":126},", and ",{"type":24,"tag":39,"props":128,"children":129},{},[130],{"type":30,"value":63},{"type":30,"value":132},", I was able to create a scalable and functional chat application that supports real-time messaging, user authentication, and private chats.",{"type":24,"tag":33,"props":134,"children":135},{},[136,138,142,144,148,149,153],{"type":30,"value":137},"The development process followed a hands-on approach, where I used the backend server built with ",{"type":24,"tag":39,"props":139,"children":140},{},[141],{"type":30,"value":50},{"type":30,"value":143}," for both ",{"type":24,"tag":39,"props":145,"children":146},{},[147],{"type":30,"value":57},{"type":30,"value":97},{"type":24,"tag":39,"props":150,"children":151},{},[152],{"type":30,"value":63},{"type":30,"value":154}," frontend applications. This allowed me to streamline development and ensure consistency across platforms.",{"type":24,"tag":25,"props":156,"children":158},{"id":157},"technologies-used",[159],{"type":30,"value":160},"Technologies Used",{"type":24,"tag":162,"props":163,"children":164},"ul",{},[165,176,186,196,206,216,226],{"type":24,"tag":166,"props":167,"children":168},"li",{},[169,174],{"type":24,"tag":39,"props":170,"children":171},{},[172],{"type":30,"value":173},"Backend",{"type":30,"value":175},": NodeJS, Express, MongoDB",{"type":24,"tag":166,"props":177,"children":178},{},[179,184],{"type":24,"tag":39,"props":180,"children":181},{},[182],{"type":30,"value":183},"Frontend (Web)",{"type":30,"value":185},": Angular 7",{"type":24,"tag":166,"props":187,"children":188},{},[189,194],{"type":24,"tag":39,"props":190,"children":191},{},[192],{"type":30,"value":193},"Frontend (Mobile)",{"type":30,"value":195},": Ionic Framework",{"type":24,"tag":166,"props":197,"children":198},{},[199,204],{"type":24,"tag":39,"props":200,"children":201},{},[202],{"type":30,"value":203},"Real-Time Communication",{"type":30,"value":205},": Socket.io",{"type":24,"tag":166,"props":207,"children":208},{},[209,214],{"type":24,"tag":39,"props":210,"children":211},{},[212],{"type":30,"value":213},"Authentication",{"type":30,"value":215},": JSON Web Tokens (JWT)",{"type":24,"tag":166,"props":217,"children":218},{},[219,224],{"type":24,"tag":39,"props":220,"children":221},{},[222],{"type":30,"value":223},"Cloud Storage",{"type":30,"value":225},": Cloudinary (for image uploads)",{"type":24,"tag":166,"props":227,"children":228},{},[229,234],{"type":24,"tag":39,"props":230,"children":231},{},[232],{"type":30,"value":233},"UI Framework",{"type":30,"value":235},": Materialize CSS",{"type":24,"tag":25,"props":237,"children":239},{"id":238},"key-features-of-the-application",[240],{"type":30,"value":241},"Key Features of the Application",{"type":24,"tag":243,"props":244,"children":246},"h3",{"id":245},"_1-nodejs-express-mongodb-backend",[247,249],{"type":30,"value":248},"1. ",{"type":24,"tag":39,"props":250,"children":251},{},[252],{"type":30,"value":253},"NodeJS + Express + MongoDB Backend",{"type":24,"tag":33,"props":255,"children":256},{},[257,259,263,265,269,271,275,276,280,282,286],{"type":30,"value":258},"The core of the application relies on a ",{"type":24,"tag":39,"props":260,"children":261},{},[262],{"type":30,"value":50},{"type":30,"value":264}," backend built using ",{"type":24,"tag":39,"props":266,"children":267},{},[268],{"type":30,"value":114},{"type":30,"value":270},", which handles requests from both the ",{"type":24,"tag":39,"props":272,"children":273},{},[274],{"type":30,"value":57},{"type":30,"value":97},{"type":24,"tag":39,"props":277,"children":278},{},[279],{"type":30,"value":63},{"type":30,"value":281}," frontends. The backend communicates with ",{"type":24,"tag":39,"props":283,"children":284},{},[285],{"type":30,"value":70},{"type":30,"value":287}," to store and retrieve data, including user information, messages, and images.",{"type":24,"tag":243,"props":289,"children":291},{"id":290},"_2-jwt-authentication",[292,294],{"type":30,"value":293},"2. ",{"type":24,"tag":39,"props":295,"children":296},{},[297],{"type":30,"value":298},"JWT Authentication",{"type":24,"tag":33,"props":300,"children":301},{},[302,304,309],{"type":30,"value":303},"To ensure secure access to the application, ",{"type":24,"tag":39,"props":305,"children":306},{},[307],{"type":30,"value":308},"JWT (JSON Web Tokens)",{"type":30,"value":310}," was used for authentication. Users can log in to the app, receive a JWT token, and use that token to interact with private endpoints securely.",{"type":24,"tag":243,"props":312,"children":314},{"id":313},"_3-restful-api-design",[315,317],{"type":30,"value":316},"3. ",{"type":24,"tag":39,"props":318,"children":319},{},[320],{"type":30,"value":321},"RESTful API Design",{"type":24,"tag":33,"props":323,"children":324},{},[325,327,332],{"type":30,"value":326},"The backend is designed using ",{"type":24,"tag":39,"props":328,"children":329},{},[330],{"type":30,"value":331},"RESTful API principles",{"type":30,"value":333},", enabling communication between the frontend and backend through HTTP methods like GET, POST, PUT, and DELETE. The backend provides endpoints for various operations, such as logging in, sending messages, and uploading images.",{"type":24,"tag":243,"props":335,"children":337},{"id":336},"_4-real-time-chat-with-socketio",[338,340],{"type":30,"value":339},"4. ",{"type":24,"tag":39,"props":341,"children":342},{},[343],{"type":30,"value":344},"Real-Time Chat with Socket.io",{"type":24,"tag":33,"props":346,"children":347},{},[348,350,355,357,362],{"type":30,"value":349},"The most exciting feature of this application is its ",{"type":24,"tag":39,"props":351,"children":352},{},[353],{"type":30,"value":354},"real-time chat functionality",{"type":30,"value":356},". Using ",{"type":24,"tag":39,"props":358,"children":359},{},[360],{"type":30,"value":361},"Socket.io",{"type":30,"value":363},", I implemented a messaging system that allows users to send and receive messages in real-time without needing to refresh the page. This is crucial for building interactive, live applications.",{"type":24,"tag":243,"props":365,"children":367},{"id":366},"_5-private-chat-functionality",[368,370],{"type":30,"value":369},"5. ",{"type":24,"tag":39,"props":371,"children":372},{},[373],{"type":30,"value":374},"Private Chat Functionality",{"type":24,"tag":33,"props":376,"children":377},{},[378,380,385],{"type":30,"value":379},"In addition to public messaging, the application supports ",{"type":24,"tag":39,"props":381,"children":382},{},[383],{"type":30,"value":384},"private chat functionality",{"type":30,"value":386},". Users can send messages to specific users, and only the intended recipient can view the messages, enhancing privacy and security.",{"type":24,"tag":243,"props":388,"children":390},{"id":389},"_6-image-uploads-with-cloudinary",[391,393],{"type":30,"value":392},"6. ",{"type":24,"tag":39,"props":394,"children":395},{},[396],{"type":30,"value":397},"Image Uploads with Cloudinary",{"type":24,"tag":33,"props":399,"children":400},{},[401,403,407,408,412,414,419,421,426],{"type":30,"value":402},"Both the ",{"type":24,"tag":39,"props":404,"children":405},{},[406],{"type":30,"value":57},{"type":30,"value":97},{"type":24,"tag":39,"props":409,"children":410},{},[411],{"type":30,"value":63},{"type":30,"value":413}," apps support ",{"type":24,"tag":39,"props":415,"children":416},{},[417],{"type":30,"value":418},"image uploads",{"type":30,"value":420},". When users share images, they are uploaded to ",{"type":24,"tag":39,"props":422,"children":423},{},[424],{"type":30,"value":425},"Cloudinary",{"type":30,"value":427},", a cloud-based image storage service, ensuring fast and reliable image storage.",{"type":24,"tag":243,"props":429,"children":431},{"id":430},"_7-emojis-support",[432,434],{"type":30,"value":433},"7. ",{"type":24,"tag":39,"props":435,"children":436},{},[437],{"type":30,"value":438},"Emojis Support",{"type":24,"tag":33,"props":440,"children":441},{},[442,444,448,449,453],{"type":30,"value":443},"To make conversations more fun, I integrated an emoji feature into both the ",{"type":24,"tag":39,"props":445,"children":446},{},[447],{"type":30,"value":57},{"type":30,"value":97},{"type":24,"tag":39,"props":450,"children":451},{},[452],{"type":30,"value":63},{"type":30,"value":454}," apps. Users can select emojis to enhance their messages, making the chat experience more engaging.",{"type":24,"tag":243,"props":456,"children":458},{"id":457},"_8-materialize-css-framework",[459,461],{"type":30,"value":460},"8. ",{"type":24,"tag":39,"props":462,"children":463},{},[464],{"type":30,"value":465},"Materialize CSS Framework",{"type":24,"tag":33,"props":467,"children":468},{},[469,471,476],{"type":30,"value":470},"For a sleek and modern UI, I used the ",{"type":24,"tag":39,"props":472,"children":473},{},[474],{"type":30,"value":475},"Materialize CSS",{"type":30,"value":477}," framework. It provides a responsive, user-friendly interface with pre-built components, ensuring a smooth and visually appealing user experience.",{"type":24,"tag":243,"props":479,"children":481},{"id":480},"_9-angular-lazy-loading",[482,484],{"type":30,"value":483},"9. ",{"type":24,"tag":39,"props":485,"children":486},{},[487],{"type":30,"value":488},"Angular Lazy Loading",{"type":24,"tag":33,"props":490,"children":491},{},[492,494,498,500,504],{"type":30,"value":493},"To optimize the performance of the ",{"type":24,"tag":39,"props":495,"children":496},{},[497],{"type":30,"value":57},{"type":30,"value":499}," application, I used ",{"type":24,"tag":39,"props":501,"children":502},{},[503],{"type":30,"value":488},{"type":30,"value":505},". This technique ensures that only the necessary modules are loaded when needed, reducing the initial load time and improving performance.",{"type":24,"tag":25,"props":507,"children":509},{"id":508},"how-i-built-the-application",[510],{"type":30,"value":511},"How I Built the Application",{"type":24,"tag":243,"props":513,"children":515},{"id":514},"_1-setting-up-the-backend",[516,517],{"type":30,"value":248},{"type":24,"tag":39,"props":518,"children":519},{},[520],{"type":30,"value":521},"Setting Up the Backend",{"type":24,"tag":33,"props":523,"children":524},{},[525,527,532,534,539,541,545,547,552],{"type":30,"value":526},"The first step was setting up the ",{"type":24,"tag":39,"props":528,"children":529},{},[530],{"type":30,"value":531},"NodeJS + Express",{"type":30,"value":533}," backend. I used the ",{"type":24,"tag":39,"props":535,"children":536},{},[537],{"type":30,"value":538},"Express framework",{"type":30,"value":540}," to build a RESTful API, and connected it to a ",{"type":24,"tag":39,"props":542,"children":543},{},[544],{"type":30,"value":70},{"type":30,"value":546}," database using ",{"type":24,"tag":39,"props":548,"children":549},{},[550],{"type":30,"value":551},"Mongoose",{"type":30,"value":553}," for data modeling. This backend handles authentication, chat message storage, user management, and image uploads.",{"type":24,"tag":243,"props":555,"children":557},{"id":556},"_2-frontend-development-with-angular",[558,559],{"type":30,"value":293},{"type":24,"tag":39,"props":560,"children":561},{},[562],{"type":30,"value":563},"Frontend Development with Angular",{"type":24,"tag":33,"props":565,"children":566},{},[567,569,573,575,580,582,587,589,594],{"type":30,"value":568},"Next, I created the ",{"type":24,"tag":39,"props":570,"children":571},{},[572],{"type":30,"value":57},{"type":30,"value":574}," web application using ",{"type":24,"tag":39,"props":576,"children":577},{},[578],{"type":30,"value":579},"Angular CLI",{"type":30,"value":581},". The Angular app communicates with the backend using Angularâ€™s ",{"type":24,"tag":39,"props":583,"children":584},{},[585],{"type":30,"value":586},"HttpClient",{"type":30,"value":588}," service to make API calls. I implemented routing for different views (login, chat, profile) and used ",{"type":24,"tag":39,"props":590,"children":591},{},[592],{"type":30,"value":593},"Angular Forms",{"type":30,"value":595}," with validations for user input.",{"type":24,"tag":33,"props":597,"children":598},{},[599,601,605],{"type":30,"value":600},"The real-time chat functionality was implemented using ",{"type":24,"tag":39,"props":602,"children":603},{},[604],{"type":30,"value":361},{"type":30,"value":606},". The Angular app listens for messages from other users and displays them as they arrive.",{"type":24,"tag":243,"props":608,"children":610},{"id":609},"_3-building-the-mobile-app-with-ionic",[611,612],{"type":30,"value":316},{"type":24,"tag":39,"props":613,"children":614},{},[615],{"type":30,"value":616},"Building the Mobile App with Ionic",{"type":24,"tag":33,"props":618,"children":619},{},[620,622,627,629,634,636,641],{"type":30,"value":621},"To make the app mobile-friendly, I used ",{"type":24,"tag":39,"props":623,"children":624},{},[625],{"type":30,"value":626},"Ionic Framework",{"type":30,"value":628},", which allows the development of hybrid mobile applications using web technologies. The mobile app communicates with the ",{"type":24,"tag":39,"props":630,"children":631},{},[632],{"type":30,"value":633},"NodeJS backend",{"type":30,"value":635}," through ",{"type":24,"tag":39,"props":637,"children":638},{},[639],{"type":30,"value":640},"Ionicâ€™s providers",{"type":30,"value":642},".",{"type":24,"tag":33,"props":644,"children":645},{},[646,648,652],{"type":30,"value":647},"The mobile app also supports the same features as the Angular web app, including real-time messaging, image uploads, and emojis. The ",{"type":24,"tag":39,"props":649,"children":650},{},[651],{"type":30,"value":361},{"type":30,"value":653}," integration ensures that the app can receive messages in real-time, just like the web version.",{"type":24,"tag":243,"props":655,"children":657},{"id":656},"_4-image-uploads-and-cloudinary-integration",[658,659],{"type":30,"value":339},{"type":24,"tag":39,"props":660,"children":661},{},[662],{"type":30,"value":663},"Image Uploads and Cloudinary Integration",{"type":24,"tag":33,"props":665,"children":666},{},[667,669,673],{"type":30,"value":668},"For uploading images, I integrated ",{"type":24,"tag":39,"props":670,"children":671},{},[672],{"type":30,"value":425},{"type":30,"value":674},", a cloud-based service that stores and serves images. Both the Angular and Ionic apps allow users to upload images, and the backend stores image URLs in the database.",{"type":24,"tag":25,"props":676,"children":678},{"id":677},"lessons-learned",[679],{"type":30,"value":680},"Lessons Learned",{"type":24,"tag":33,"props":682,"children":683},{},[684],{"type":30,"value":685},"This project gave me hands-on experience with several technologies and concepts:",{"type":24,"tag":162,"props":687,"children":688},{},[689,716,732],{"type":24,"tag":166,"props":690,"children":691},{},[692,697,699,703,705,709,710,714],{"type":24,"tag":39,"props":693,"children":694},{},[695],{"type":30,"value":696},"Building full-stack applications",{"type":30,"value":698},": I learned how to connect a ",{"type":24,"tag":39,"props":700,"children":701},{},[702],{"type":30,"value":633},{"type":30,"value":704}," with both ",{"type":24,"tag":39,"props":706,"children":707},{},[708],{"type":30,"value":57},{"type":30,"value":97},{"type":24,"tag":39,"props":711,"children":712},{},[713],{"type":30,"value":63},{"type":30,"value":715}," frontends, which allowed me to build a scalable solution for both web and mobile platforms.",{"type":24,"tag":166,"props":717,"children":718},{},[719,724,726,730],{"type":24,"tag":39,"props":720,"children":721},{},[722],{"type":30,"value":723},"Real-time communication",{"type":30,"value":725},": Implementing ",{"type":24,"tag":39,"props":727,"children":728},{},[729],{"type":30,"value":361},{"type":30,"value":731}," for real-time chat functionality was a key part of the project. This allowed me to understand how to manage and broadcast messages between users instantly.",{"type":24,"tag":166,"props":733,"children":734},{},[735,740,742,746],{"type":24,"tag":39,"props":736,"children":737},{},[738],{"type":30,"value":739},"Cloud integration",{"type":30,"value":741},": Integrating ",{"type":24,"tag":39,"props":743,"children":744},{},[745],{"type":30,"value":425},{"type":30,"value":747}," for image uploads taught me how to manage user-generated content in a cloud environment.",{"type":24,"tag":25,"props":749,"children":751},{"id":750},"conclusion",[752],{"type":30,"value":753},"Conclusion",{"type":24,"tag":33,"props":755,"children":756},{},[757,759,763,765,770,772,776,778,782,783,788,789,793],{"type":30,"value":758},"By the end of this project, I successfully built a ",{"type":24,"tag":39,"props":760,"children":761},{},[762],{"type":30,"value":88},{"type":30,"value":764}," that works on both ",{"type":24,"tag":39,"props":766,"children":767},{},[768],{"type":30,"value":769},"web and mobile platforms",{"type":30,"value":771},", using a single ",{"type":24,"tag":39,"props":773,"children":774},{},[775],{"type":30,"value":633},{"type":30,"value":777},". This project allowed me to integrate technologies like ",{"type":24,"tag":39,"props":779,"children":780},{},[781],{"type":30,"value":361},{"type":30,"value":52},{"type":24,"tag":39,"props":784,"children":785},{},[786],{"type":30,"value":787},"JWT authentication",{"type":30,"value":126},{"type":24,"tag":39,"props":790,"children":791},{},[792],{"type":30,"value":425},{"type":30,"value":794}," into a seamless application, making it an exciting full-stack development experience.",{"type":24,"tag":33,"props":796,"children":797},{},[798,800,805,807,811,812,816,817,821],{"type":30,"value":799},"If you're interested in building ",{"type":24,"tag":39,"props":801,"children":802},{},[803],{"type":30,"value":804},"real-time applications",{"type":30,"value":806}," or looking to expand your knowledge of ",{"type":24,"tag":39,"props":808,"children":809},{},[810],{"type":30,"value":57},{"type":30,"value":52},{"type":24,"tag":39,"props":813,"children":814},{},[815],{"type":30,"value":63},{"type":30,"value":126},{"type":24,"tag":39,"props":818,"children":819},{},[820],{"type":30,"value":50},{"type":30,"value":822},", I highly recommend trying out this project. The hands-on experience is invaluable, and you'll walk away with a complete, functioning chat application ready for deployment.",{"type":24,"tag":243,"props":824,"children":826},{"id":825},"get-started",[827],{"type":30,"value":828},"Get Started",{"type":24,"tag":33,"props":830,"children":831},{},[832,834,838,839,843,845,849,850,854],{"type":30,"value":833},"Interested in building your own chat application? Start by setting up the backend with ",{"type":24,"tag":39,"props":835,"children":836},{},[837],{"type":30,"value":50},{"type":30,"value":97},{"type":24,"tag":39,"props":840,"children":841},{},[842],{"type":30,"value":114},{"type":30,"value":844},", then create your ",{"type":24,"tag":39,"props":846,"children":847},{},[848],{"type":30,"value":57},{"type":30,"value":97},{"type":24,"tag":39,"props":851,"children":852},{},[853],{"type":30,"value":63},{"type":30,"value":855}," apps to connect to the backend. With real-time chat and image uploads, youâ€™ll be on your way to building a full-stack application in no time!",{"type":24,"tag":33,"props":857,"children":858},{},[859],{"type":30,"value":860},"Let me know if you have any questions or need further guidance on the development process. Happy coding!",{"type":24,"tag":33,"props":862,"children":863},{},[864],{"type":30,"value":865},"Happy coding!",{"type":24,"tag":867,"props":868,"children":869},"hr",{},[],{"type":24,"tag":33,"props":871,"children":872},{},[873],{"type":30,"value":874},"Thank you so much for reading. If you found it valuable, consider subscribing for more such content every week. If you have any questions or suggestions, please email me your comments or feel free to improve it.",{"title":8,"searchDepth":876,"depth":876,"links":877},2,[878,879,880,881,902,912,913],{"id":27,"depth":876,"text":31},{"id":75,"depth":876,"text":78},{"id":157,"depth":876,"text":160},{"id":238,"depth":876,"text":241,"children":882},[883,886,888,890,892,894,896,898,900],{"id":245,"depth":884,"text":885},3,"1. NodeJS + Express + MongoDB Backend",{"id":290,"depth":884,"text":887},"2. JWT Authentication",{"id":313,"depth":884,"text":889},"3. RESTful API Design",{"id":336,"depth":884,"text":891},"4. Real-Time Chat with Socket.io",{"id":366,"depth":884,"text":893},"5. Private Chat Functionality",{"id":389,"depth":884,"text":895},"6. Image Uploads with Cloudinary",{"id":430,"depth":884,"text":897},"7. Emojis Support",{"id":457,"depth":884,"text":899},"8. Materialize CSS Framework",{"id":480,"depth":884,"text":901},"9. Angular Lazy Loading",{"id":508,"depth":876,"text":511,"children":903},[904,906,908,910],{"id":514,"depth":884,"text":905},"1. Setting Up the Backend",{"id":556,"depth":884,"text":907},"2. Frontend Development with Angular",{"id":609,"depth":884,"text":909},"3. Building the Mobile App with Ionic",{"id":656,"depth":884,"text":911},"4. Image Uploads and Cloudinary Integration",{"id":677,"depth":876,"text":680},{"id":750,"depth":876,"text":753,"children":914},[915],{"id":825,"depth":884,"text":828},"markdown","content:projects:chat-app-fullstack.md","content","projects/chat-app-fullstack.md","projects/chat-app-fullstack","md",{"loc":5},{"_path":924,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":925,"description":926,"projectGitHubLink":927,"projectDemoLink":8,"topics":928,"readingTime":929,"body":934,"_type":916,"_id":1614,"_source":918,"_file":1615,"_stem":1616,"_extension":921,"sitemap":1617},"/projects/dating-app-fullstack"," Dating Application with .NET Core and Angular","In this project, I built a dating application using ASP.NET Core for the backend and Angular for the frontend, creating a full-stack solution that enables users to interact and connect in real-time. The app offers various essential features for a dating platform, such as user authentication, profile management, private messaging, and real-time notifications.","https://github.com/AherRahul/DatingApp",[14],{"text":930,"minutes":931,"time":932,"words":933},"7 min read",6.545,392700,1309,{"type":21,"children":935,"toc":1575},[936,942,968,986,990,1000,1011,1020,1030,1042,1053,1063,1075,1085,1097,1109,1119,1142,1152,1177,1189,1199,1223,1233,1252,1262,1280,1286,1298,1308,1331,1341,1364,1374,1398,1408,1413,1423,1435,1445,1456,1460,1481,1486,1502,1508,1559,1564,1568,1571],{"type":24,"tag":25,"props":937,"children":939},{"id":938},"full-stack-dating-application-with-net-core-and-angular",[940],{"type":30,"value":941},"Full-Stack Dating Application with .NET Core and Angular",{"type":24,"tag":33,"props":943,"children":944},{},[945,947,952,954,959,961,966],{"type":30,"value":946},"In this ",{"type":24,"tag":39,"props":948,"children":949},{},[950],{"type":30,"value":951},"Full-Stack Dating Application",{"type":30,"value":953}," project, I created a fully functional web application using ",{"type":24,"tag":39,"props":955,"children":956},{},[957],{"type":30,"value":958},"ASP.NET Core 8.0",{"type":30,"value":960}," for the backend and ",{"type":24,"tag":39,"props":962,"children":963},{},[964],{"type":30,"value":965},"Angular 18",{"type":30,"value":967}," for the frontend. This project is not just a simple tutorial â€” it is a hands-on journey through building a real-world application, using modern development tools and frameworks to implement essential features like authentication, messaging, real-time notifications, and more.",{"type":24,"tag":33,"props":969,"children":970},{},[971,973,978,980,984],{"type":30,"value":972},"The application is designed for users to create profiles, upload pictures, send private messages, and interact with each other in real-time. The backend, built with ",{"type":24,"tag":39,"props":974,"children":975},{},[976],{"type":30,"value":977},"ASP.NET Core",{"type":30,"value":979},", handles user authentication, message management, and real-time interactions, while the frontend, developed with ",{"type":24,"tag":39,"props":981,"children":982},{},[983],{"type":30,"value":57},{"type":30,"value":985},", creates a seamless user interface with responsive layouts and dynamic content.",{"type":24,"tag":25,"props":987,"children":988},{"id":238},[989],{"type":30,"value":241},{"type":24,"tag":243,"props":991,"children":993},{"id":992},"_1-user-authentication-and-authorization",[994,995],{"type":30,"value":248},{"type":24,"tag":39,"props":996,"children":997},{},[998],{"type":30,"value":999},"User Authentication and Authorization",{"type":24,"tag":33,"props":1001,"children":1002},{},[1003,1005,1009],{"type":30,"value":1004},"One of the most critical features in any application is secure user authentication. In this project, ",{"type":24,"tag":39,"props":1006,"children":1007},{},[1008],{"type":30,"value":308},{"type":30,"value":1010}," is used for secure login and registration. When a user logs in, they receive a token that allows them to access protected routes and perform actions like sending messages, uploading pictures, and viewing profiles.",{"type":24,"tag":33,"props":1012,"children":1013},{},[1014,1018],{"type":24,"tag":39,"props":1015,"children":1016},{},[1017],{"type":30,"value":298},{"type":30,"value":1019}," ensures that only authenticated users can access certain features of the app, and users can sign up, log in, and manage their profiles securely.",{"type":24,"tag":243,"props":1021,"children":1023},{"id":1022},"_2-profile-and-photo-upload",[1024,1025],{"type":30,"value":293},{"type":24,"tag":39,"props":1026,"children":1027},{},[1028],{"type":30,"value":1029},"Profile and Photo Upload",{"type":24,"tag":33,"props":1031,"children":1032},{},[1033,1035,1040],{"type":30,"value":1034},"The application allows users to create a personalized profile and upload their profile pictures. The ",{"type":24,"tag":39,"props":1036,"children":1037},{},[1038],{"type":30,"value":1039},"drag-and-drop photo upload",{"type":30,"value":1041}," feature is integrated with a cloud storage platform, ensuring that the images are stored securely and are accessible across devices. This integration also reduces the load on the server, as the images are stored in the cloud instead of in the local database.",{"type":24,"tag":33,"props":1043,"children":1044},{},[1045,1047,1051],{"type":30,"value":1046},"The profile gallery is built using ",{"type":24,"tag":39,"props":1048,"children":1049},{},[1050],{"type":30,"value":57},{"type":30,"value":1052}," to display the uploaded images in an organized and user-friendly manner, with additional features like image preview and gallery management.",{"type":24,"tag":243,"props":1054,"children":1056},{"id":1055},"_3-private-messaging-system",[1057,1058],{"type":30,"value":316},{"type":24,"tag":39,"props":1059,"children":1060},{},[1061],{"type":30,"value":1062},"Private Messaging System",{"type":24,"tag":33,"props":1064,"children":1065},{},[1066,1068,1073],{"type":30,"value":1067},"The core of any dating application is the ability for users to communicate privately. In this project, a ",{"type":24,"tag":39,"props":1069,"children":1070},{},[1071],{"type":30,"value":1072},"private messaging system",{"type":30,"value":1074}," is implemented, allowing users to send messages to each other in real-time. The messaging system supports text communication and allows users to keep their conversations private, providing an engaging experience.",{"type":24,"tag":243,"props":1076,"children":1078},{"id":1077},"_4-real-time-notifications-with-signalr",[1079,1080],{"type":30,"value":339},{"type":24,"tag":39,"props":1081,"children":1082},{},[1083],{"type":30,"value":1084},"Real-Time Notifications with SignalR",{"type":24,"tag":33,"props":1086,"children":1087},{},[1088,1090,1095],{"type":30,"value":1089},"Real-time interaction is a crucial feature in any modern application. With ",{"type":24,"tag":39,"props":1091,"children":1092},{},[1093],{"type":30,"value":1094},"SignalR",{"type":30,"value":1096},", we add the ability for users to receive live notifications and updates. Whether itâ€™s a new message or a new match, users are notified instantly, ensuring they never miss out on an interaction.",{"type":24,"tag":33,"props":1098,"children":1099},{},[1100,1102,1107],{"type":30,"value":1101},"SignalR is also used for ",{"type":24,"tag":39,"props":1103,"children":1104},{},[1105],{"type":30,"value":1106},"presence tracking",{"type":30,"value":1108},", which means that users can see whether their matches are online or offline. This enhances the user experience and ensures that the dating app functions as expected, even with multiple users interacting simultaneously.",{"type":24,"tag":243,"props":1110,"children":1112},{"id":1111},"_5-real-time-presence-and-notifications",[1113,1114],{"type":30,"value":369},{"type":24,"tag":39,"props":1115,"children":1116},{},[1117],{"type":30,"value":1118},"Real-Time Presence and Notifications",{"type":24,"tag":33,"props":1120,"children":1121},{},[1122,1124,1129,1130,1135,1136,1140],{"type":30,"value":1123},"Another key feature that enhances user engagement is ",{"type":24,"tag":39,"props":1125,"children":1126},{},[1127],{"type":30,"value":1128},"real-time presence",{"type":30,"value":97},{"type":24,"tag":39,"props":1131,"children":1132},{},[1133],{"type":30,"value":1134},"notifications",{"type":30,"value":356},{"type":24,"tag":39,"props":1137,"children":1138},{},[1139],{"type":30,"value":1094},{"type":30,"value":1141},", we implemented a system where users are notified instantly about new messages, profile updates, or when someone is online. This ensures that users are always kept in the loop and can engage with the app in real time, improving the overall user experience.",{"type":24,"tag":243,"props":1143,"children":1145},{"id":1144},"_6-data-handling-with-entity-framework-core",[1146,1147],{"type":30,"value":392},{"type":24,"tag":39,"props":1148,"children":1149},{},[1150],{"type":30,"value":1151},"Data Handling with Entity Framework Core",{"type":24,"tag":33,"props":1153,"children":1154},{},[1155,1157,1161,1163,1168,1170,1175],{"type":30,"value":1156},"The backend is built using ",{"type":24,"tag":39,"props":1158,"children":1159},{},[1160],{"type":30,"value":977},{"type":30,"value":1162}," with ",{"type":24,"tag":39,"props":1164,"children":1165},{},[1166],{"type":30,"value":1167},"Entity Framework Core",{"type":30,"value":1169}," to handle data interaction. ",{"type":24,"tag":39,"props":1171,"children":1172},{},[1173],{"type":30,"value":1174},"Entity Framework",{"type":30,"value":1176}," provides an easy-to-use ORM for interacting with the database, and we use it to manage user profiles, messages, and photos.",{"type":24,"tag":33,"props":1178,"children":1179},{},[1180,1182,1187],{"type":30,"value":1181},"Additionally, we implement ",{"type":24,"tag":39,"props":1183,"children":1184},{},[1185],{"type":30,"value":1186},"sorting, filtering, and paging",{"type":30,"value":1188}," for the data, making it easier to display large sets of profiles and messages without overwhelming the user. For example, users can filter profiles based on age, location, or interests, making it easy for them to find matches.",{"type":24,"tag":243,"props":1190,"children":1192},{"id":1191},"_7-ui-design-with-bootstrap",[1193,1194],{"type":30,"value":433},{"type":24,"tag":39,"props":1195,"children":1196},{},[1197],{"type":30,"value":1198},"UI Design with Bootstrap",{"type":24,"tag":33,"props":1200,"children":1201},{},[1202,1204,1209,1211,1215,1217,1221],{"type":30,"value":1203},"The user interface of the app is designed with ",{"type":24,"tag":39,"props":1205,"children":1206},{},[1207],{"type":30,"value":1208},"Bootstrap",{"type":30,"value":1210},", which ensures that the app is responsive and looks good on all devices. ",{"type":24,"tag":39,"props":1212,"children":1213},{},[1214],{"type":30,"value":57},{"type":30,"value":1216}," is used to manage dynamic content, such as user profiles, messages, and notifications. With ",{"type":24,"tag":39,"props":1218,"children":1219},{},[1220],{"type":30,"value":1208},{"type":30,"value":1222},", the app provides a clean, modern look with easy-to-navigate pages, and the design adapts smoothly to different screen sizes, from mobile phones to desktops.",{"type":24,"tag":243,"props":1224,"children":1226},{"id":1225},"_8-third-party-integrations",[1227,1228],{"type":30,"value":460},{"type":24,"tag":39,"props":1229,"children":1230},{},[1231],{"type":30,"value":1232},"Third-Party Integrations",{"type":24,"tag":33,"props":1234,"children":1235},{},[1236,1238,1243,1245,1250],{"type":30,"value":1237},"In addition to basic application features, the app integrates ",{"type":24,"tag":39,"props":1239,"children":1240},{},[1241],{"type":30,"value":1242},"third-party components",{"type":30,"value":1244}," to add additional functionality and visual appeal. For example, we used ",{"type":24,"tag":39,"props":1246,"children":1247},{},[1248],{"type":30,"value":1249},"Dragula",{"type":30,"value":1251}," for the photo upload feature, allowing users to easily drag and drop their photos into the app. By integrating these third-party tools, we were able to create a more engaging and interactive experience.",{"type":24,"tag":243,"props":1253,"children":1255},{"id":1254},"_9-cloud-deployment",[1256,1257],{"type":30,"value":483},{"type":24,"tag":39,"props":1258,"children":1259},{},[1260],{"type":30,"value":1261},"Cloud Deployment",{"type":24,"tag":33,"props":1263,"children":1264},{},[1265,1267,1272,1274,1278],{"type":30,"value":1266},"Once the application was complete, I deployed it to ",{"type":24,"tag":39,"props":1268,"children":1269},{},[1270],{"type":30,"value":1271},"Heroku",{"type":30,"value":1273},", a cloud platform that provides easy deployment for web apps. ",{"type":24,"tag":39,"props":1275,"children":1276},{},[1277],{"type":30,"value":1271},{"type":30,"value":1279}," simplifies the process of hosting applications, making it possible to get a web app online quickly. After deploying the app, it is accessible via a live URL, allowing users to sign up, upload photos, send messages, and engage in real-time communication.",{"type":24,"tag":25,"props":1281,"children":1283},{"id":1282},"development-process",[1284],{"type":30,"value":1285},"Development Process",{"type":24,"tag":33,"props":1287,"children":1288},{},[1289,1291,1296],{"type":30,"value":1290},"The course that guided this project follows a ",{"type":24,"tag":39,"props":1292,"children":1293},{},[1294],{"type":30,"value":1295},"step-by-step approach",{"type":30,"value":1297},", starting with the basics and gradually building the application from the ground up. Each step is explained clearly, with detailed demonstrations of how to implement each feature.",{"type":24,"tag":243,"props":1299,"children":1301},{"id":1300},"_1-setting-up-the-development-environment",[1302,1303],{"type":30,"value":248},{"type":24,"tag":39,"props":1304,"children":1305},{},[1306],{"type":30,"value":1307},"Setting Up the Development Environment",{"type":24,"tag":33,"props":1309,"children":1310},{},[1311,1313,1318,1320,1324,1325,1329],{"type":30,"value":1312},"The development environment was set up using ",{"type":24,"tag":39,"props":1314,"children":1315},{},[1316],{"type":30,"value":1317},"Visual Studio Code",{"type":30,"value":1319},", a popular code editor that works across multiple operating systems (Windows, Linux, macOS). The course starts by teaching how to configure the development tools, install required packages, and set up ",{"type":24,"tag":39,"props":1321,"children":1322},{},[1323],{"type":30,"value":977},{"type":30,"value":97},{"type":24,"tag":39,"props":1326,"children":1327},{},[1328],{"type":30,"value":57},{"type":30,"value":1330}," environments.",{"type":24,"tag":243,"props":1332,"children":1334},{"id":1333},"_2-creating-the-api-with-aspnet-core",[1335,1336],{"type":30,"value":293},{"type":24,"tag":39,"props":1337,"children":1338},{},[1339],{"type":30,"value":1340},"Creating the API with ASP.NET Core",{"type":24,"tag":33,"props":1342,"children":1343},{},[1344,1346,1350,1351,1355,1357,1362],{"type":30,"value":1345},"The backend API is built using ",{"type":24,"tag":39,"props":1347,"children":1348},{},[1349],{"type":30,"value":977},{"type":30,"value":1162},{"type":24,"tag":39,"props":1352,"children":1353},{},[1354],{"type":30,"value":1167},{"type":30,"value":1356}," for database management. The backend handles everything from user authentication to real-time messaging and notifications. We also use ",{"type":24,"tag":39,"props":1358,"children":1359},{},[1360],{"type":30,"value":1361},"AutoMapper",{"type":30,"value":1363}," to simplify object mapping between models and DTOs.",{"type":24,"tag":243,"props":1365,"children":1367},{"id":1366},"_3-building-the-frontend-with-angular",[1368,1369],{"type":30,"value":316},{"type":24,"tag":39,"props":1370,"children":1371},{},[1372],{"type":30,"value":1373},"Building the Frontend with Angular",{"type":24,"tag":33,"props":1375,"children":1376},{},[1377,1379,1383,1385,1390,1391,1396],{"type":30,"value":1378},"The frontend of the application is developed using ",{"type":24,"tag":39,"props":1380,"children":1381},{},[1382],{"type":30,"value":57},{"type":30,"value":1384},", one of the most powerful and widely used JavaScript frameworks. Angularâ€™s ",{"type":24,"tag":39,"props":1386,"children":1387},{},[1388],{"type":30,"value":1389},"Reactive Forms",{"type":30,"value":97},{"type":24,"tag":39,"props":1392,"children":1393},{},[1394],{"type":30,"value":1395},"Template Forms",{"type":30,"value":1397}," are used for handling user inputs like registration, login, and profile updates, with built-in form validation to ensure that the data is correct.",{"type":24,"tag":243,"props":1399,"children":1401},{"id":1400},"_4-integrating-real-time-features-with-signalr",[1402,1403],{"type":30,"value":339},{"type":24,"tag":39,"props":1404,"children":1405},{},[1406],{"type":30,"value":1407},"Integrating Real-Time Features with SignalR",{"type":24,"tag":33,"props":1409,"children":1410},{},[1411],{"type":30,"value":1412},"SignalR is integrated into both the backend and frontend, enabling real-time communication between users. Whether it's updating the userâ€™s online status or sending a new message, SignalR ensures that the app responds instantly without requiring the user to refresh the page.",{"type":24,"tag":243,"props":1414,"children":1416},{"id":1415},"_5-photo-upload-and-cloud-integration",[1417,1418],{"type":30,"value":369},{"type":24,"tag":39,"props":1419,"children":1420},{},[1421],{"type":30,"value":1422},"Photo Upload and Cloud Integration",{"type":24,"tag":33,"props":1424,"children":1425},{},[1426,1428,1433],{"type":30,"value":1427},"For photo management, the app integrates with a ",{"type":24,"tag":39,"props":1429,"children":1430},{},[1431],{"type":30,"value":1432},"cloud storage platform",{"type":30,"value":1434}," that allows users to upload and store their profile pictures. This approach ensures that the images are handled securely and efficiently, without burdening the server with large media files.",{"type":24,"tag":243,"props":1436,"children":1438},{"id":1437},"_6-publishing-and-deployment",[1439,1440],{"type":30,"value":392},{"type":24,"tag":39,"props":1441,"children":1442},{},[1443],{"type":30,"value":1444},"Publishing and Deployment",{"type":24,"tag":33,"props":1446,"children":1447},{},[1448,1450,1454],{"type":30,"value":1449},"Finally, after all the features were implemented and tested, the application was deployed to ",{"type":24,"tag":39,"props":1451,"children":1452},{},[1453],{"type":30,"value":1271},{"type":30,"value":1455}," for easy and free cloud hosting. This makes the application publicly accessible, allowing users to sign up, interact, and enjoy the full dating experience.",{"type":24,"tag":25,"props":1457,"children":1458},{"id":750},[1459],{"type":30,"value":753},{"type":24,"tag":33,"props":1461,"children":1462},{},[1463,1465,1469,1470,1474,1475,1479],{"type":30,"value":1464},"Building a ",{"type":24,"tag":39,"props":1466,"children":1467},{},[1468],{"type":30,"value":951},{"type":30,"value":1162},{"type":24,"tag":39,"props":1471,"children":1472},{},[1473],{"type":30,"value":977},{"type":30,"value":97},{"type":24,"tag":39,"props":1476,"children":1477},{},[1478],{"type":30,"value":57},{"type":30,"value":1480}," is a rewarding project that demonstrates how to create a complete, modern web application from start to finish. With features like real-time messaging, profile management, cloud photo storage, and real-time notifications, this project covers a wide range of essential technologies and tools.",{"type":24,"tag":33,"props":1482,"children":1483},{},[1484],{"type":30,"value":1485},"By completing this project, I have gained valuable hands-on experience with two of the most in-demand technologies in the web development world today. Whether you're building a dating app or any other web application, the techniques learned here will be incredibly useful in creating engaging, scalable, and efficient applications.",{"type":24,"tag":33,"props":1487,"children":1488},{},[1489,1491,1495,1496,1500],{"type":30,"value":1490},"This project has not only boosted my skills with ",{"type":24,"tag":39,"props":1492,"children":1493},{},[1494],{"type":30,"value":977},{"type":30,"value":97},{"type":24,"tag":39,"props":1497,"children":1498},{},[1499],{"type":30,"value":57},{"type":30,"value":1501},", but it has also provided me with the confidence to build and deploy full-stack applications in real-world scenarios.",{"type":24,"tag":25,"props":1503,"children":1505},{"id":1504},"key-takeaways",[1506],{"type":30,"value":1507},"Key Takeaways:",{"type":24,"tag":162,"props":1509,"children":1510},{},[1511,1525,1536,1548],{"type":24,"tag":166,"props":1512,"children":1513},{},[1514,1518,1519,1523],{"type":24,"tag":39,"props":1515,"children":1516},{},[1517],{"type":30,"value":977},{"type":30,"value":97},{"type":24,"tag":39,"props":1520,"children":1521},{},[1522],{"type":30,"value":57},{"type":30,"value":1524}," provide a powerful combination for building full-stack applications.",{"type":24,"tag":166,"props":1526,"children":1527},{},[1528,1530,1534],{"type":30,"value":1529},"Real-time features like ",{"type":24,"tag":39,"props":1531,"children":1532},{},[1533],{"type":30,"value":1094},{"type":30,"value":1535}," make applications more engaging and interactive.",{"type":24,"tag":166,"props":1537,"children":1538},{},[1539,1541,1546],{"type":30,"value":1540},"Using ",{"type":24,"tag":39,"props":1542,"children":1543},{},[1544],{"type":30,"value":1545},"cloud platforms",{"type":30,"value":1547}," for image storage and hosting makes the application scalable and efficient.",{"type":24,"tag":166,"props":1549,"children":1550},{},[1551,1553,1557],{"type":30,"value":1552},"Deployment to ",{"type":24,"tag":39,"props":1554,"children":1555},{},[1556],{"type":30,"value":1271},{"type":30,"value":1558}," makes it easy to get the application online quickly.",{"type":24,"tag":33,"props":1560,"children":1561},{},[1562],{"type":30,"value":1563},"I hope this blog post inspires you to start building your own full-stack applications using these technologies. Happy coding!",{"type":24,"tag":33,"props":1565,"children":1566},{},[1567],{"type":30,"value":865},{"type":24,"tag":867,"props":1569,"children":1570},{},[],{"type":24,"tag":33,"props":1572,"children":1573},{},[1574],{"type":30,"value":874},{"title":8,"searchDepth":876,"depth":876,"links":1576},[1577,1578,1598,1612,1613],{"id":938,"depth":876,"text":941},{"id":238,"depth":876,"text":241,"children":1579},[1580,1582,1584,1586,1588,1590,1592,1594,1596],{"id":992,"depth":884,"text":1581},"1. User Authentication and Authorization",{"id":1022,"depth":884,"text":1583},"2. Profile and Photo Upload",{"id":1055,"depth":884,"text":1585},"3. Private Messaging System",{"id":1077,"depth":884,"text":1587},"4. Real-Time Notifications with SignalR",{"id":1111,"depth":884,"text":1589},"5. Real-Time Presence and Notifications",{"id":1144,"depth":884,"text":1591},"6. Data Handling with Entity Framework Core",{"id":1191,"depth":884,"text":1593},"7. UI Design with Bootstrap",{"id":1225,"depth":884,"text":1595},"8. Third-Party Integrations",{"id":1254,"depth":884,"text":1597},"9. Cloud Deployment",{"id":1282,"depth":876,"text":1285,"children":1599},[1600,1602,1604,1606,1608,1610],{"id":1300,"depth":884,"text":1601},"1. Setting Up the Development Environment",{"id":1333,"depth":884,"text":1603},"2. Creating the API with ASP.NET Core",{"id":1366,"depth":884,"text":1605},"3. Building the Frontend with Angular",{"id":1400,"depth":884,"text":1607},"4. Integrating Real-Time Features with SignalR",{"id":1415,"depth":884,"text":1609},"5. Photo Upload and Cloud Integration",{"id":1437,"depth":884,"text":1611},"6. Publishing and Deployment",{"id":750,"depth":876,"text":753},{"id":1504,"depth":876,"text":1507},"content:projects:dating-app-fullstack.md","projects/dating-app-fullstack.md","projects/dating-app-fullstack",{"loc":924},[],[],[],[],1758006253746]